{"meta":{"title":"Gaussli's Blog","subtitle":"Learn More Everyday","description":"Here is Gaussli's Blog","author":"gaussli","url":"http://gaussli.com","root":"/"},"pages":[{"title":"About Me","date":"2021-07-26T07:14:53.000Z","updated":"2021-07-26T08:09:08.000Z","comments":false,"path":"about/index.html","permalink":"http://gaussli.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"【容器化】Kubernetes二进制高可用部署10-Coredns部署","slug":"【容器化】kubernetes二进制高可用部署10-coredns部署","date":"2022-01-16T09:11:56.000Z","updated":"2022-01-16T09:27:13.820Z","comments":true,"path":"2022/01/16/【容器化】kubernetes二进制高可用部署10-coredns部署/","link":"","permalink":"http://gaussli.com/2022/01/16/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B210-coredns%E9%83%A8%E7%BD%B2/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、说明本文将部署Kubernetes的dns组件-coredns (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"coredns","slug":"coredns","permalink":"http://gaussli.com/tags/coredns/"}]},{"title":"【容器化】Kubernetes二进制高可用部署9-Flannel网络插件部署","slug":"【容器化】kubernetes二进制高可用部署9-flannel网络插件部署","date":"2022-01-16T09:11:46.000Z","updated":"2022-01-16T09:27:07.533Z","comments":true,"path":"2022/01/16/【容器化】kubernetes二进制高可用部署9-flannel网络插件部署/","link":"","permalink":"http://gaussli.com/2022/01/16/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B29-flannel%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6%E9%83%A8%E7%BD%B2/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、说明本文将部署Kubernetes的网络插件Flannel 占坑 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"cni","slug":"cni","permalink":"http://gaussli.com/tags/cni/"},{"name":"网络插件","slug":"网络插件","permalink":"http://gaussli.com/tags/%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/"},{"name":"flannel","slug":"flannel","permalink":"http://gaussli.com/tags/flannel/"}]},{"title":"【容器化】Kubernetes二进制高可用部署8-Calico网络插件部署","slug":"【容器化】kubernetes二进制高可用部署8-calico网络插件部署","date":"2022-01-15T22:45:53.000Z","updated":"2022-01-16T09:26:59.279Z","comments":true,"path":"2022/01/16/【容器化】kubernetes二进制高可用部署8-calico网络插件部署/","link":"","permalink":"http://gaussli.com/2022/01/16/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B28-calico%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6%E9%83%A8%E7%BD%B2/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、说明本文将部署Kubernetes的网络插件Calico 二、获取Calico.yaml文件1wget -O /usr/local/src/calico.yaml https://docs.projectcalico.org/manifests/calico.yaml 或者从下方获取，版本对应为3.21.4calico.yaml 三、修改参数 按需修改4223行的CALICO_IPV4POOL_CIDR的值，指定pod的IP范围，该值不能和节点IP以及ClusterIP范围重合。默认值为192.168.0.0/16 按需修改4225行的IP_AUTODETECTION_METHOD的值，指定网卡名称。默认值为第一张网卡的名称 四、创建Calico服务1kubectl apply -f /usr/local/src/calico.yaml 五、验证测试查看集群内calico-kube-controllers的 Deployment 和 calico-node 的 Daemonset 资源是否都成功处于 Running 状态。这个过程根据网络可能很慢 1kubectl -n kube-system get po -owide 结果截图 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"cni","slug":"cni","permalink":"http://gaussli.com/tags/cni/"},{"name":"calico","slug":"calico","permalink":"http://gaussli.com/tags/calico/"},{"name":"网络插件","slug":"网络插件","permalink":"http://gaussli.com/tags/%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/"}]},{"title":"【容器化】Kubernetes二进制高可用部署7-Kubelet和kube-Proxy部署","slug":"【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署","date":"2022-01-15T20:57:26.000Z","updated":"2022-01-16T09:26:53.583Z","comments":true,"path":"2022/01/16/【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署/","link":"","permalink":"http://gaussli.com/2022/01/16/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B27-kubelet%E5%92%8Ckube-proxy%E9%83%A8%E7%BD%B2/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、说明本文将部署Kubernetes组件kubelet和kube-proxy 二、前提 docker 已安装且 Cgroup driver 为 systemd，反正就是 docker 和 kubelet 的 Cgroup Driver 需要一致。 Kubernetes创建pod时需要一个pause的镜像，而该镜像tag默认为k8s.gcr.io/pause:3.2，这个镜像源k8s.gcr.io是 google 的，国内默认都是不能访问的，所以有以下三种方式处理这个镜像拉取失败问题： （推荐）docker配置国内镜像源（如阿里的https://registry.cn-hangzhou.aliyuncs.com），在阿里的镜像源中，pause在google_containers仓库中，所以需要修改下方 kubelet 的启动参数，添加 --pod-infra-container-image=google_containers/pause:3.2 不修改docker镜像源的情况下，可修改下方 kubelet 的启动参数，添加 --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 从docker官方仓库拉取rancher/pause:3.2镜像，并使用docker tag修改tag为k8s.gcr.io/pause:3.2，不过这个方法每加一个节点就要执行一次，不建议使用。 三、复制二进制文件到/usr/bin目录123# 所有节点执行cp /usr/local/src/kubernetes/server/bin/kubelet /usr/bincp /usr/local/src/kubernetes/server/bin/kube-proxy /usr/bin 四、创建kubelet服务创建kubelet配置文件配置文件 kubelet.conf 参数说明： –kubeconfig：设置与 API Server 连接的相关配置，可以与 kube-controller-manager 使用的 kubeconfig 文件相同。需要将相关客户端证书文件从 Master 主机复制到 Node 主机的 /etc/kubernetes/pki 目录下，例如 ca.crt、client.key、client.crt文件 –config：kubelet 配置文件，从 Kubernetes 1.10 版本开始引入，设置可以让多个 Node 共享的配置参数，例如address、port、cgroupDriver、clusterDNS、clusterDomain等 –hostname-override：设置本 Node 在集群中的名称，默认值为主机名，应将各 Node 设置为主机IP或域名 –network-plugin：网络插件类型，建议使用 CNI 网络插件 配置文件 kubelet.config 参数说明： address：服务监听 IP 地址 port：服务监听端口号，默认值为 10250 cgroupDriver：设置为 cgroupDriver 驱动，默认值为 cgroupfs，可选项包括 systemd clusterDNS：集群 DNS 服务的 IP 地址，例如 169.169.0.100 clusterDomain：服务 DNS 域名后缀，例如 cluster.local authentication：设置是否允许匿名访问或者是否使用 webhook 进行鉴权 12345678910111213141516171819202122232425262728293031323334353637383940414243# 192.168.56.105节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/kubelet.confKUBELET_ARGS=&quot;--kubeconfig=/etc/kubernetes/kubeconfig \\--config=/etc/kubernetes/kubelet.config \\--hostname-override=192.168.56.105 \\--network-plugin=cni \\--log-dir=/var/log/kubernetes --logtostderr=false --v=0&quot;EOF# 192.168.56.106节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/kubelet.confKUBELET_ARGS=&quot;--kubeconfig=/etc/kubernetes/kubeconfig \\--config=/etc/kubernetes/kubelet.config \\--hostname-override=192.168.56.106 \\--network-plugin=cni \\--log-dir=/var/log/kubernetes --logtostderr=false --v=0&quot;EOF# 192.168.56.107节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/kubelet.confKUBELET_ARGS=&quot;--kubeconfig=/etc/kubernetes/kubeconfig \\--config=/etc/kubernetes/kubelet.config \\--hostname-override=192.168.56.107 \\--network-plugin=cni \\--log-dir=/var/log/kubernetes --logtostderr=false --v=0&quot;EOF# 所有节点执行cat &lt;&lt; EOF &gt; /etc/kubernetes/kubelet.configkind: KubeletConfigurationapiVersion: kubelet.config.k8s.io/v1beta1address: 0.0.0.0port: 10250cgroupDriver: systemdclusterDNS: [&quot;169.169.0.100&quot;]clusterDomain: cluster.localauthentication: anonymous: enabled: trueEOF 创建系统服务文件1234567891011121314cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/kubelet.service[Unit]Description=Kubernetes Kubelet ServerDocumentation=https://github.com/kubernetes/kubernetesAfter=docker.target[Service]EnvironmentFile=/etc/kubernetes/kubelet.confExecStart=/usr/bin/kubelet \\$KUBELET_ARGSRestart=always[Install]WantedBy=multi-user.targetEOF 启动kubelet服务123systemctl daemon-reloadsystemctl start kubeletsystemctl enable kubelet 五、创建kube-proxy服务创建kube-proxy配置文件12345678910111213141516171819202122232425# 192.168.56.105节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/kube-proxy.confKUBE_PROXY_ARGS=&quot;--kubeconfig=/etc/kubernetes/kubeconfig \\--hostname-override=192.168.56.105 \\--proxy-mode=iptables \\--logtostderr=false --log-dir=/var/log/kubernetes --v=0&quot;EOF# 192.168.56.106节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/kube-proxy.confKUBE_PROXY_ARGS=&quot;--kubeconfig=/etc/kubernetes/kubeconfig \\--hostname-override=192.168.56.106 \\--proxy-mode=iptables \\--logtostderr=false --log-dir=/var/log/kubernetes --v=0&quot;EOF# 192.168.56.107节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/kube-proxy.confKUBE_PROXY_ARGS=&quot;--kubeconfig=/etc/kubernetes/kubeconfig \\--hostname-override=192.168.56.107 \\--proxy-mode=iptables \\--logtostderr=false --log-dir=/var/log/kubernetes --v=0&quot;EOF 创建系统服务文件123456789101112131415# 所有节点执行cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/kube-proxy.service[Unit]Description=Kubernetes Kube-proxy ServerDocumentation=https://github.com/kubernetes/kubernetesAfter=network.target[Service]EnvironmentFile=/etc/kubernetes/kube-proxy.confExecStart=/usr/bin/kube-proxy \\$KUBE_PROXY_ARGSRestart=always[Install]WantedBy=multi-user.targetEOF 启动kube-proxy服务1234# 所有节点执行systemctl daemon-reloadsystemctl start kube-proxysystemctl enable kube-proxy 六、Kubernetes集群查看复制kubelet二进制文件到/usr/bin目录1cp /usr/local/src/kubernetes/server/bin/kubectl /usr/bin 查看集群节点此时所有节点状态为 NotReady 是由于还没安装网络插件 123456kubectl --kubeconfig=/etc/kubernetes/kubeconfig get nodes -owide# 如果不想使用--kubeconfig参数，则只需要在用户目录下创建 .kube 目录，把 /etc/kubernetes/kubeconfig 文件复制进去并命名为configmkdir -p ~/.kubecp /etc/kubernetes/kubeconfig ~/.kube/configkubectl get nodes -owide 结果截图 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"kubelet","slug":"kubelet","permalink":"http://gaussli.com/tags/kubelet/"},{"name":"kube-proxy","slug":"kube-proxy","permalink":"http://gaussli.com/tags/kube-proxy/"}]},{"title":"【容器化】Kubernetes二进制高可用部署6-Kube-Controller和kube-Scheduler部署","slug":"【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署","date":"2022-01-15T20:57:10.000Z","updated":"2022-01-16T09:26:47.370Z","comments":true,"path":"2022/01/16/【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署/","link":"","permalink":"http://gaussli.com/2022/01/16/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B26-kube-controller%E5%92%8Ckube-scheduler%E9%83%A8%E7%BD%B2/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、说明本文将部署Kubernetes组件kube-controller和kube-scheduler。 二、Kubernetes客户端证书生成kube-controller-manager、kube-scheduler、kubelet和kube-proxy服务作为客户端连接kube-apiserver服务，需要为它们创建客户端CA证书进行访问。 12345# 192.168.56.105节点执行openssl genrsa -out /etc/kubernetes/pki/client.key 2048# 其中 -subj 参数中的 &quot;/CN&quot; 的名称可以被设置为 &quot;admin&quot;，用于标识连接 kube-apiserver 的客户端用户名称openssl req -new -key /etc/kubernetes/pki/client.key -subj &quot;/CN=admin&quot; -out /etc/kubernetes/pki/client.csropenssl x509 -req -in /etc/kubernetes/pki/client.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/client.crt -days 36500 12# 192.168.56.106和192.168.56.107节点执行scp -r root@192.168.56.105:/etc/kubernetes/pki/client.* /etc/kubernetes/pki/ 三、创建kubeconfig配置文件统一创建一个kubeconfig文件作为kube-controller-manager、kube-scheduler、kubelet和kube-proxy服务连接kube-apiserver服务的配置文件，也作为后续kubectl命令工具连接kube-apiserver服务的配置文件。 123456789101112131415161718192021# 所有节点执行cat &lt;&lt; EOF &gt; /etc/kubernetes/kubeconfigapiVersion: v1kind: Configclusters:- name: default cluster: server: https://192.168.56.250:9443 certificate-authority: /etc/kubernetes/pki/ca.crtusers:- name: admin user: client-certificate: /etc/kubernetes/pki/client.crt client-key: /etc/kubernetes/pki/client.keycontexts:- context: cluster: default user: admin name: defaultcurrent-context: defaultEOF 四、复制二进制文件到/usr/bin目录123# 所有节点执行cp /usr/local/src/kubernetes/server/bin/kube-controller-manager /usr/bin/cp /usr/local/src/kubernetes/server/bin/kube-scheduler /usr/bin/ 创建kube-controller服务创建kube-controller配置文件123456789# 所有节点执行cat &lt;&lt; EOF &gt; /etc/kubernetes/controller-manager.confKUBE_CONTROLLER_MANAGER_ARGS=&quot;--kubeconfig=/etc/kubernetes/kubeconfig \\--leader-elect=true \\--service-cluster-ip-range=169.169.0.0/16 \\--service-account-private-key-file=/etc/kubernetes/pki/apiserver.key \\--root-ca-file=/etc/kubernetes/pki/ca.crt \\--log-dir=/var/log/kubernetes --logtostderr=false --v=0&quot;EOF 创建系统服务文件1234567891011121314# 所有节点执行cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/kube-controller-manager.service[Unit]Description=Kubernetes Controller ManagerDocumentation=https://github.com/kubernetes/kubernetes[Service]EnvironmentFile=/etc/kubernetes/controller-manager.confExecStart=/usr/bin/kube-controller-manager \\$KUBE_CONTROLLER_MANAGER_ARGSRestart=always[Install]WantedBy=multi-user.targetEOF 启动kube-controller服务1234# 所有节点执行systemctl daemon-reloadsystemctl start kube-controller-managersystemctl enable kube-controller-manager 五、创建kube-scheduler服务创建kube-scheduler配置文件123456# 所有节点执行cat &lt;&lt; EOF &gt; /etc/kubernetes/scheduler.confKUBE_SCHEDULER_ARGS=&quot;--kubeconfig=/etc/kubernetes/kubeconfig \\--leader-elect=true \\--log-dir=/var/log/kubernetes --logtostderr=false --v=0&quot;EOF 创建系统服务文件1234567891011121314# 所有节点执行cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/kube-scheduler.service[Unit]Description=Kubernetes SchedulerDocumentation=https://github.com/kubernetes/kubernetes[Service]EnvironmentFile=/etc/kubernetes/scheduler.confExecStart=/usr/bin/kube-scheduler \\$KUBE_SCHEDULER_ARGSRestart=always[Install]WantedBy=multi-user.targetEOF 启动kube-scheduler服务1234# 所有节点执行systemctl daemon-reloadsystemctl start kube-schedulersystemctl enable kube-scheduler (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"kube-controller","slug":"kube-controller","permalink":"http://gaussli.com/tags/kube-controller/"},{"name":"kube-scheduler","slug":"kube-scheduler","permalink":"http://gaussli.com/tags/kube-scheduler/"}]},{"title":"【容器化】Kubernetes二进制高可用部署5-HA和Keepalived部署","slug":"【容器化】kubernetes二进制高可用部署5-ha和keepalived部署","date":"2022-01-15T18:48:53.000Z","updated":"2022-01-16T09:26:41.293Z","comments":true,"path":"2022/01/16/【容器化】kubernetes二进制高可用部署5-ha和keepalived部署/","link":"","permalink":"http://gaussli.com/2022/01/16/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B25-ha%E5%92%8Ckeepalived%E9%83%A8%E7%BD%B2/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、说明本文将部署HAProxy和Keepalived服务，以实现kube-apiserver服务的高可用。 二、前提本文的HAProxy和Keepalived直接使用docker部署，所以需要提前安装好docker服务，详见：【容器化】Docker部署 修改cgroupdriver 1234567891011mkdir -p /etc/dockercat &lt;&lt; EOF &gt; /etc/docker/daemon.json&#123; &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;], &quot;log-driver&quot;: &quot;json-file&quot;, &quot;log-opts&quot;: &#123; &quot;max-size&quot;: &quot;100m&quot; &#125;, &quot;storage-driver&quot;: &quot;overlay2&quot;&#125;EOF 三、部署HAProxy创建HAProxy配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 192.168.56.105和192.168.56.106节点执行mkdir -p /etc/haproxycat &lt;&lt; EOF &gt; /etc/haproxy/haproxy.cfgglobal log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 4096 user haproxy group haproxy daemon stats socket /var/lib/haproxy/statsdefaults mode http log global option httplog option dontlognull option http-server-close option forwardfor except 127.0.0.0/8 option redispatch retries 3 timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout http-keep-alive 10s timeout check 10s maxconn 3000frontend kube-apiserver mode tcp bind *:9443 option tcplog default_backend kube-apiserverlisten stats mode http bind *:8888 stats auth admin:password stats refresh 5s stats realm HAProxy\\ Statistics stats uri /stats log 127.0.0.1 local3 errbackend kube-apiserver mode tcp balance roundrobin server k8s-master1 192.168.56.105:6443 check server k8s-master2 192.168.56.106:6443 check server k8s-master3 192.168.56.107:6443 checkEOF 基于docker部署HAProxy服务123456# 192.168.56.105和192.168.56.106节点执行docker run -d --name k8s-haproxy \\--net=host \\--restart=always \\-v /etc/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro \\haproxytech/haproxy-debian:2.3 访问测试访问：http://192.168.56.105:8888/stats或http://192.168.56.106:8888/stats，可见三个节点的状态都处于UP状态则为正常。结果截图 四、部署Keepalived服务创建Keepalived配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 192.168.56.105节点执行mkdir -p /etc/keepalivedcat &lt;&lt; EOF &gt; /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs &#123; router_id LVS_1&#125;vrrp_script checkhaproxy &#123; script &quot;/usr/bin/check-haproxy.sh&quot; interval 2 weight -30&#125;vrrp_instance VI_1 &#123; state MASTER interface enp0s8 virtual_router_id 51 priority 100 advert_int 1 virtual_ipaddress &#123; 192.168.56.250/24 dev enp0s8 &#125; authentication &#123; auth_type PASS auth_pass password &#125; track_script &#123; checkhaproxy &#125;&#125;EOFcat &lt;&lt; EOF &gt; /etc/keepalived/check-haproxy.sh#!/bin/bashcount=\\`netstat -apn | grep 9443 | wc -l\\`if [ $count -gt 0 ]; then exit 0else exit 1fiEOF 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 192.168.56.106节点执行mkdir -p /etc/keepalivedcat &lt;&lt; EOF &gt; /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs &#123; router_id LVS_2&#125;vrrp_script checkhaproxy &#123; script &quot;/usr/bin/check-haproxy.sh&quot; interval 2 weight -30&#125;vrrp_instance VI_1 &#123; state BACKUP interface enp0s8 virtual_router_id 51 priority 100 advert_int 1 virtual_ipaddress &#123; 192.168.56.250/24 dev enp0s8 &#125; authentication &#123; auth_type PASS auth_pass password &#125; track_script &#123; checkhaproxy &#125;&#125;EOFcat &lt;&lt; EOF &gt; /etc/keepalived/check-haproxy.sh#!/bin/bashcount=\\`netstat -apn | grep 9443 | wc -l\\`if [ $count -gt 0 ]; then exit 0else exit 1fiEOF 基于docker部署Keepalived12345678# 192.168.56.105和192.168.56.106节点执行docker run -d --name k8s-keepalived \\--restart=always \\--net=host \\--cap-add=NET_ADMIN --cap-add=NET_BROADCAST --cap-add=NET_RAW \\-v /etc/keepalived/keepalived.conf:/container/service/keepalived/assets/keepalived.conf \\-v /etc/keepalived/check-haproxy.sh:/usr/bin/check-haproxy.sh \\osixia/keepalived:2.0.20 --copy-service 五、结果验证查看vip状态12# 192.168.56.105和192.168.56.106节点执行ip a 结果截图192.168.56.105中的enp0s8网卡获取到vip 192.168.56.106中的enp0s8网卡则没有获取到vip 查看kube-apiserver高可用是否正常12# 任意节点执行curl -v -k https://192.168.56.250:9443 结果截图 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"HAProxy","slug":"haproxy","permalink":"http://gaussli.com/tags/haproxy/"},{"name":"Keepalived","slug":"keepalived","permalink":"http://gaussli.com/tags/keepalived/"}]},{"title":"【容器化】Kubernetes二进制高可用部署4-Kube-Apiserver高可用部署","slug":"【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署","date":"2022-01-15T18:00:02.000Z","updated":"2022-01-16T09:26:35.492Z","comments":true,"path":"2022/01/16/【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署/","link":"","permalink":"http://gaussli.com/2022/01/16/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B24-kube-apiserver%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、说明本文将在三个虚拟机上都部署kube-apiserver服务，已达到一个三节点的kube-apiserver高可用集群。 二、修改hosts文件123456# 所有节点执行cat &lt;&lt; EOF &gt;&gt; /etc/hosts192.168.56.105 k8s1192.168.56.106 k8s2192.168.56.107 k8s3EOF 三、kube-apiserver证书生成ssl配置文件注意点： alt_names的值指定为节点ip 169.169.0.1：kubernetes 服务 IP 是 apiserver 自动创建的，一般是 –service-cluster-ip-range 参数指定的网段的第一个IP 1234567891011121314151617181920212223242526# 192.168.56.105节点执行cat &lt;&lt; EOF &gt; /etc/kubernetes/pki/master_ssl.cnf[ req ]req_extensions = v3_reqdistinguished_name = req_distinguished_name[ req_distinguished_name ][ v3_req ]basicConstraints = CA:FALSEkeyUsage = nonRepudiation, digitalSignature, keyEnciphermentsubjectAltName = @alt_names[ alt_names ]DNS.1 = kubernetesDNS.2 = kubernetes.defaultDNS.3 = kubernetes.default.svcDNS.4 = kubernetes.default.svc.cluster.localDNS.5 = k8s1DNS.6 = k8s2DNS.7 = k8s3IP.1 = 169.169.0.1IP.2 = 192.168.56.105IP.3 = 192.168.56.106IP.4 = 192.168.56.107IP.5 = 192.168.56.250EOF 服务端证书1234# 192.168.56.105节点执行openssl genrsa -out /etc/kubernetes/pki/apiserver.key 2048openssl req -new -key /etc/kubernetes/pki/apiserver.key -config /etc/kubernetes/pki/master_ssl.cnf -subj &quot;/CN=192.168.56.105&quot; -out /etc/kubernetes/pki/apiserver.csropenssl x509 -req -in /etc/kubernetes/pki/apiserver.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -days 36500 -extensions v3_req -extfile /etc/kubernetes/pki/master_ssl.cnf -out /etc/kubernetes/pki/apiserver.crt 复制kube-apiserver证书到106、107虚拟机12# 192.168.56.106和192.168.56.107节点执行scp -r root@192.168.56.105:/etc/kubernetes/pki/apiserver.* /etc/kubernetes/pki/ 四、下载kubernetes并解压并把二进制文件复制到/usr/bin目录1234# 所有节点上执行wget -O /usr/local/src/kubernetes-server-v1.19.0.tar.gz https://dl.k8s.io/v1.19.0/kubernetes-server-linux-amd64.tar.gztar -C /usr/local/src/ -zxvf /usr/local/src/kubernetes-server-v1.19.0.tar.gzcp /usr/local/src/kubernetes/server/bin/kube-apiserver /usr/bin/ 五、创建kube-apiserver服务创建kube-apiserver配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# 192.168.56.105节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/apiserver.confKUBE_API_ARGS=&quot;--insecure-port=0 \\--secure-port=6443 \\--advertise-address=192.168.56.105 \\--tls-cert-file=/etc/kubernetes/pki/apiserver.crt \\--tls-private-key-file=/etc/kubernetes/pki/apiserver.key \\--client-ca-file=/etc/kubernetes/pki/ca.crt \\--apiserver-count=3 \\--endpoint-reconciler-type=master-count \\--etcd-servers=https://192.168.56.105:2379,https://192.168.56.106:2379,https://192.168.56.107:2379 \\--etcd-cafile=/etc/kubernetes/pki/ca.crt \\--etcd-certfile=/etc/etcd/pki/etcd_client.crt \\--etcd-keyfile=/etc/etcd/pki/etcd_client.key \\--service-cluster-ip-range=169.169.0.0/16 \\--service-node-port-range=30000-32767 \\--allow-privileged=true \\--logtostderr=false --log-dir=/var/log/kubernetes --v=0&quot;EOF# 192.168.56.106节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/apiserver.confKUBE_API_ARGS=&quot;--insecure-port=0 \\--secure-port=6443 \\--advertise-address=192.168.56.106 \\--tls-cert-file=/etc/kubernetes/pki/apiserver.crt \\--tls-private-key-file=/etc/kubernetes/pki/apiserver.key \\--client-ca-file=/etc/kubernetes/pki/ca.crt \\--apiserver-count=3 \\--endpoint-reconciler-type=master-count \\--etcd-servers=https://192.168.56.105:2379,https://192.168.56.106:2379,https://192.168.56.107:2379 \\--etcd-cafile=/etc/kubernetes/pki/ca.crt \\--etcd-certfile=/etc/etcd/pki/etcd_client.crt \\--etcd-keyfile=/etc/etcd/pki/etcd_client.key \\--service-cluster-ip-range=169.169.0.0/16 \\--service-node-port-range=30000-32767 \\--allow-privileged=true \\--logtostderr=false --log-dir=/var/log/kubernetes --v=0&quot;EOF# 192.168.56.107节点配置cat &lt;&lt; EOF &gt; /etc/kubernetes/apiserver.confKUBE_API_ARGS=&quot;--insecure-port=0 \\--secure-port=6443 \\--advertise-address=192.168.56.107 \\--tls-cert-file=/etc/kubernetes/pki/apiserver.crt \\--tls-private-key-file=/etc/kubernetes/pki/apiserver.key \\--client-ca-file=/etc/kubernetes/pki/ca.crt \\--apiserver-count=3 \\--endpoint-reconciler-type=master-count \\--etcd-servers=https://192.168.56.105:2379,https://192.168.56.106:2379,https://192.168.56.107:2379 \\--etcd-cafile=/etc/kubernetes/pki/ca.crt \\--etcd-certfile=/etc/etcd/pki/etcd_client.crt \\--etcd-keyfile=/etc/etcd/pki/etcd_client.key \\--service-cluster-ip-range=169.169.0.0/16 \\--service-node-port-range=30000-32767 \\--allow-privileged=true \\--logtostderr=false --log-dir=/var/log/kubernetes --v=0&quot;EOF 创建系统服务文件1234567891011121314# 所有节点执行cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/kube-apiserver.service[Unit]Description=Kubernetes API ServerDocumentation=https://github.com/kubernetes/kubernetes[Service]EnvironmentFile=/etc/kubernetes/apiserver.confExecStart=/usr/bin/kube-apiserver \\$KUBE_API_ARGSRestart=always[Install]WantedBy=multi-user.targetEOF 启动kube-apiserver服务1234# 所有节点执行systemctl daemon-reloadsystemctl start kube-apiserversystemctl enable kube-apiserver 六、kube-apiserver服务验证12345# 查看服务运行状态systemctl status kube-apiserver# 访问kube-apiserver是否有内容成功返回curl -v -k https://192.168.56.105:6443 结果截图 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"kube-apiserver","slug":"kube-apiserver","permalink":"http://gaussli.com/tags/kube-apiserver/"}]},{"title":"【容器化】Kubernetes二进制高可用部署3-Etcd高可用部署","slug":"【容器化】kubernetes二进制高可用部署3-etcd高可用部署","date":"2022-01-15T16:48:25.000Z","updated":"2022-01-16T09:26:28.480Z","comments":true,"path":"2022/01/16/【容器化】kubernetes二进制高可用部署3-etcd高可用部署/","link":"","permalink":"http://gaussli.com/2022/01/16/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B23-etcd%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、说明本文将在三个虚拟机上都部署etcd服务，已达到一个三节点的etcd高可用集群。 二、etcd证书生成ssl配置文件注意点：alt_names的值指定为节点ip 12345678910111213141516171819# 192.168.56.105节点执行mkdir -p /etc/etcd/pkicat &lt;&lt; EOF &gt; /etc/etcd/pki/etcd_ssl.cnf[ req ]req_extensions = v3_reqdistinguished_name = req_distinguished_name[ req_distinguished_name ][ v3_req ]basicConstraints = CA:FALSEkeyUsage = nonRepudiation, digitalSignature, keyEnciphermentsubjectAltName = @alt_names[ alt_names ]IP.1 = 192.168.56.105IP.2 = 192.168.56.106IP.3 = 192.168.56.107EOF 服务端证书1234# 192.168.56.105节点执行openssl genrsa -out /etc/etcd/pki/etcd_server.key 2048openssl req -new -key /etc/etcd/pki/etcd_server.key -config /etc/etcd/pki/etcd_ssl.cnf -subj &quot;/CN=etcd-server&quot; -out /etc/etcd/pki/etcd_server.csropenssl x509 -req -in /etc/etcd/pki/etcd_server.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -days 36500 -extensions v3_req -extfile /etc/etcd/pki/etcd_ssl.cnf -out /etc/etcd/pki/etcd_server.crt 客户端证书1234# 192.168.56.105节点执行openssl genrsa -out /etc/etcd/pki/etcd_client.key 2048openssl req -new -key /etc/etcd/pki/etcd_client.key -config /etc/etcd/pki/etcd_ssl.cnf -subj &quot;/CN=etcd-client&quot; -out /etc/etcd/pki/etcd_client.csropenssl x509 -req -in /etc/etcd/pki/etcd_client.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -days 36500 -extensions v3_req -extfile /etc/etcd/pki/etcd_ssl.cnf -out /etc/etcd/pki/etcd_client.crt 复制etcd证书到106、107虚拟机123# 192.168.56.106和192.168.56.107节点执行mkdir -p /etc/etcd/pkiscp -r root@192.168.56.105:/etc/etcd/pki/ /etc/etcd 三、下载etcd并解压并把二进制文件复制到/usr/bin目录1234# 所有节点执行wget -O /usr/local/src/etcd-v3.4.13-linux-amd64.tar.gz https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gztar -C /usr/local/src/ -zxvf /usr/local/src/etcd-v3.4.13-linux-amd64.tar.gzcp /usr/local/src/etcd-v3.4.13-linux-amd64/etcd /usr/local/src/etcd-v3.4.13-linux-amd64/etcdctl /usr/bin/ 四、创建etcd服务创建etcd配置文件etcd服务参数说明： ETCD_NAME：etcd节点名称，每个节点都应不同，例如：etcd1、etcd2、etcd3 ETCD_DATA_DIR：etcd数据存储目录，例如：/etc/etcd/data ETCD_LISTEN_CLIENT_URLS和ETCD_ADVERTISE_CLIENT_URLS：为客户端提供的服务监听URL地址，例如：https://192.168.56.105:2379 ETCD_LISTEN_PEER_URLS和ETCD_INITIAL_ADVERTISE_PEER_URLS：为本etcd集群其他节点提供的服务监听URL地址，例如：https://192.168.56.105:2380 ETCD_INITIAL_CLUSTER_TOKEN：etcd集群名称，例如：etcd-cluster ETCD_INITIAL_CLUSTER：etcd集群各节点的endpoint列表 ETCD_INITIAL_CLUSTER_STATE：初始集群状态，新建集群时设置为“new”，集群已存在时设置为“existing” ca证书参数说明： ETCD_CERT_FILE：etcd服务端CA证书crt文件全路径 ETCD_KEY_FILE：etcd服务端CA证书key文件全路径 ETCD_TRUSTED_CA_FILE：CA根证书文件全路径 ETCD_CLIENT_CERT_AUTH：是否启用客户端证书认证 ETCD_PEER_CERT_FILE：etcd集群各节点相互认证使用的CA证书crt文件全路径 ETCD_PEER_KEY_FILE：etcd集群各节点相互认证使用的CA证书key文件全路径 ETCD_PEER_TRUSTED_CA_FILE：etcd集群各节点相互认证使用的CA根证书文件全路径 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# 192.168.56.105节点配置cat &lt;&lt; EOF &gt; /etc/etcd/etcd.confETCD_NAME=etcd1ETCD_DATA_DIR=/etc/etcd/dataETCD_CERT_FILE=/etc/etcd/pki/etcd_server.crtETCD_KEY_FILE=/etc/etcd/pki/etcd_server.keyETCD_TRUSTED_CA_FILE=/etc/kubernetes/pki/ca.crtETCD_CLIENT_CERT_AUTH=trueETCD_LISTEN_CLIENT_URLS=https://192.168.56.105:2379ETCD_ADVERTISE_CLIENT_URLS=https://192.168.56.105:2379ETCD_PEER_CERT_FILE=/etc/etcd/pki/etcd_server.crtETCD_PEER_KEY_FILE=/etc/etcd/pki/etcd_server.keyETCD_PEER_TRUSTED_CA_FILE=/etc/kubernetes/pki/ca.crtETCD_LISTEN_PEER_URLS=https://192.168.56.105:2380ETCD_INITIAL_ADVERTISE_PEER_URLS=https://192.168.56.105:2380ETCD_INITIAL_CLUSTER_TOKEN=etcd-clusterETCD_INITIAL_CLUSTER=&quot;etcd1=https://192.168.56.105:2380,etcd2=https://192.168.56.106:2380,etcd3=https://192.168.56.107:2380&quot;ETCD_INITIAL_CLUSTER_STATE=newEOF# 192.168.56.106节点配置cat &lt;&lt; EOF &gt; /etc/etcd/etcd.confETCD_NAME=etcd2ETCD_DATA_DIR=/etc/etcd/dataETCD_CERT_FILE=/etc/etcd/pki/etcd_server.crtETCD_KEY_FILE=/etc/etcd/pki/etcd_server.keyETCD_TRUSTED_CA_FILE=/etc/kubernetes/pki/ca.crtETCD_CLIENT_CERT_AUTH=trueETCD_LISTEN_CLIENT_URLS=https://192.168.56.106:2379ETCD_ADVERTISE_CLIENT_URLS=https://192.168.56.106:2379ETCD_PEER_CERT_FILE=/etc/etcd/pki/etcd_server.crtETCD_PEER_KEY_FILE=/etc/etcd/pki/etcd_server.keyETCD_PEER_TRUSTED_CA_FILE=/etc/kubernetes/pki/ca.crtETCD_LISTEN_PEER_URLS=https://192.168.56.106:2380ETCD_INITIAL_ADVERTISE_PEER_URLS=https://192.168.56.106:2380ETCD_INITIAL_CLUSTER_TOKEN=etcd-clusterETCD_INITIAL_CLUSTER=&quot;etcd1=https://192.168.56.105:2380,etcd2=https://192.168.56.106:2380,etcd3=https://192.168.56.107:2380&quot;ETCD_INITIAL_CLUSTER_STATE=newEOF# 192.168.56.107节点配置cat &lt;&lt; EOF &gt; /etc/etcd/etcd.confETCD_NAME=etcd3ETCD_DATA_DIR=/etc/etcd/dataETCD_CERT_FILE=/etc/etcd/pki/etcd_server.crtETCD_KEY_FILE=/etc/etcd/pki/etcd_server.keyETCD_TRUSTED_CA_FILE=/etc/kubernetes/pki/ca.crtETCD_CLIENT_CERT_AUTH=trueETCD_LISTEN_CLIENT_URLS=https://192.168.56.107:2379ETCD_ADVERTISE_CLIENT_URLS=https://192.168.56.107:2379ETCD_PEER_CERT_FILE=/etc/etcd/pki/etcd_server.crtETCD_PEER_KEY_FILE=/etc/etcd/pki/etcd_server.keyETCD_PEER_TRUSTED_CA_FILE=/etc/kubernetes/pki/ca.crtETCD_LISTEN_PEER_URLS=https://192.168.56.107:2380ETCD_INITIAL_ADVERTISE_PEER_URLS=https://192.168.56.107:2380ETCD_INITIAL_CLUSTER_TOKEN=etcd-clusterETCD_INITIAL_CLUSTER=&quot;etcd1=https://192.168.56.105:2380,etcd2=https://192.168.56.106:2380,etcd3=https://192.168.56.107:2380&quot;ETCD_INITIAL_CLUSTER_STATE=newEOF 创建系统服务文件123456789101112131415# 所有节点执行cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/etcd.service[Unit]Description=etcd key-value storeDocumentation=https://github.com/etcd-io/etcdAfter=network.target[Service]EnvironmentFile=/etc/etcd/etcd.confExecStart=/usr/bin/etcdRestart=always[Install]WantedBy=multi-user.targetEOF 启动etcd服务1234# 所有节点执行systemctl daemon-reloadsystemctl start etcdsystemctl enable etcd 五、etcd服务验证123456# 任意节点执行etcdctl --cacert=/etc/kubernetes/pki/ca.crt \\--cert=/etc/etcd/pki/etcd_client.crt \\--key=/etc/etcd/pki/etcd_client.key \\--endpoints=https://192.168.56.105:2379,https://192.168.56.106:2379,https://192.168.56.107:2379 \\endpoint health 结果截图 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"高可用","slug":"高可用","permalink":"http://gaussli.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"},{"name":"etcd","slug":"etcd","permalink":"http://gaussli.com/tags/etcd/"},{"name":"数据库","slug":"数据库","permalink":"http://gaussli.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"【容器化】Kubernetes二进制高可用部署2-Ca根证书","slug":"【容器化】kubernetes二进制高可用部署2-ca根证书","date":"2022-01-15T13:55:23.000Z","updated":"2022-01-16T09:26:22.421Z","comments":true,"path":"2022/01/15/【容器化】kubernetes二进制高可用部署2-ca根证书/","link":"","permalink":"http://gaussli.com/2022/01/15/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B22-ca%E6%A0%B9%E8%AF%81%E4%B9%A6/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、证书x509 X.509是密码学里公钥证书的格式标准。X.509证书已应用在包括TLS/SSL在内的众多网络协议里，同时它也用在很多非在线应用场景里，比如电子签名服务。X.509证书里含有公钥、身份信息（比如网络主机名，组织的名称或个体名称等）和签名信息（可以是证书签发机构CA的签名，也可以是自签名）。 说白了，就是一个常用的数字证书标准。一个标准的X.509数字证书包含以下内容： 证书 版本号 序列号 签名算法 证书有效期 此日期前无效 此日期后无效 主题 主题公钥信息 公钥算法 主题公钥 颁发着唯一身份信息（可选项） 主题唯一身份信息（可选项） 扩展信息（可选项） …… 证书签名算法 数字签名 证书格式 .key：一般是base64编码的公钥或私钥文件 .der .cer .crt：DER二进制编码格式的证书 .pem .cer .crt：DER二进制编码格式进行base64编码的证书 .p12：包含证书和私钥的文件 相关命令1234567891011121314151617181920# .key文件生成（pem）openssl genrsa -out xxx.key 2048# .key文件查看（pem）openssl rsa -noout -text -in xxx.key# .key从pem转到der（der）openssl rsa -in xxx.key -outform der -out xxx-der.key# .key文件查看（der）openssl rsa -noout -text -inform der -in xxx-der.key# .pem证书文件生成openssl req -x509 -new -key xxx.key -out xxx.pem# .pem证书文件查看openssl x509 -noout -text -in xxx.pem# .der证书文件生成openssl req -x509 -new -outform der -key xxx.key -out xxx.der# .der证书文件查看openssl x509 -noout -text -inform der -in xxx.der 二、Kubernetes的CA证书生成Kubernets需要用到的CA证书1234# 192.168.56.105节点执行mkdir -p /etc/kubernetes/pkiopenssl genrsa -out /etc/kubernetes/pki/ca.key 2048openssl req -x509 -new -key /etc/kubernetes/pki/ca.key -days 36500 -subj &quot;/CN=192.168.56.105&quot; -out /etc/kubernetes/pki/ca.crt 结果截图 复制ca.key和ca.crt到106、107虚拟机123# 192.168.56.106和192.168.56.107节点执行mkdir -p /etc/kubernetes/pkiscp -r root@192.168.56.105:/etc/kubernetes/pki/ /etc/kubernetes (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"高可用","slug":"高可用","permalink":"http://gaussli.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"},{"name":"ca证书","slug":"ca证书","permalink":"http://gaussli.com/tags/ca%E8%AF%81%E4%B9%A6/"},{"name":"openssl","slug":"openssl","permalink":"http://gaussli.com/tags/openssl/"},{"name":"x509","slug":"x509","permalink":"http://gaussli.com/tags/x509/"},{"name":"pem","slug":"pem","permalink":"http://gaussli.com/tags/pem/"},{"name":"der","slug":"der","permalink":"http://gaussli.com/tags/der/"},{"name":"crt","slug":"crt","permalink":"http://gaussli.com/tags/crt/"},{"name":"cer","slug":"cer","permalink":"http://gaussli.com/tags/cer/"}]},{"title":"【容器化】Kubernetes二进制高可用部署1-准备","slug":"【容器化】kubernetes二进制高可用部署1-准备","date":"2021-09-12T09:14:59.000Z","updated":"2022-01-16T09:26:15.112Z","comments":true,"path":"2021/09/12/【容器化】kubernetes二进制高可用部署1-准备/","link":"","permalink":"http://gaussli.com/2021/09/12/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B21-%E5%87%86%E5%A4%87/","excerpt":"","text":"零、目录 【容器化】Kubernetes二进制高可用部署1-准备 【容器化】Kubernetes二进制高可用部署2-ca根证书 【容器化】kubernetes二进制高可用部署3-etcd高可用部署 【容器化】kubernetes二进制高可用部署4-kube-apiserver高可用部署 【容器化】kubernetes二进制高可用部署5-HA和Keepalived部署 【容器化】kubernetes二进制高可用部署6-kube-controller和kube-scheduler部署 【容器化】kubernetes二进制高可用部署7-kubelet和kube-proxy部署 【容器化】kubernetes二进制高可用部署8-Calico网络插件部署 【容器化】kubernetes二进制高可用部署9-Flannel网络插件部署 【容器化】kubernetes二进制高可用部署10-coredns部署 Post not found: 【容器化】kubernetes二进制高可用部署11-kubernetes测试验证 Post not found: 【容器化】kubernetes二进制高可用部署12-kubernetes-ui面板 Post not found: 【容器化】kubernetes二进制高可用部署13-kubernetes指标监控 Post not found: 【容器化】kubernetes二进制高可用部署14-fabric8的使用 Post not found: 【容器化】kubernetes二进制高可用部署15-spring-cloud-starter-kubernetes的使用 一、虚拟机信息虚拟机配置 SYSTEM OS：CentOS7.9.2009 KERNEL：3.10.0-1160 CPU：2C MEMORY：2G DISK：8G12345678910111213141516# 查看内核版本uname -runame -acat /proc/version# 查看CentOS版本cat /etc/centos-release# 查看cpu核数cat /proc/cpuinfo | grep processor |wc -l# 查看内存free -h# 查看磁盘大小df -h 结果截图 IP信息 主机名 IP centos1 192.168.56.105 centos2 192.168.56.106 centos3 192.168.56.107 Master高可用节点的VIP需要保证该IP没有被网络内其他主机使用 192.168.56.250 二、Kubernetes相关信息Kubernetes中ClusterIp的cidr需要保证该网段不和主机网络重复 169.169.0.0/16 服务部署版本 服务名 版本 docker 19.03.15 etcd v3.4.13 kubernetes v1.19.0 三、前期准备所有主机禁用swap虚拟内存12345678# 查看默认是否开启swap虚拟内存，swap端不为0则说明开启free -h# 临时禁用swapswapoff -a# 永久禁用swap，需重启服务生效sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab# 再次查看swap是否已关闭free -h 所有主机禁用SELinux12345678# 查看默认是否已关闭getenforce# 临时禁用setenforce 0# 永久禁用，需重启服务器生效sed -i &quot;s/^SELINUX=.*/SELINUX=disabled/g&quot; /etc/selinux/config# 再次查看是否已关闭getenforce 所有主机关闭防火墙123# 所有主机执行systemctl stop firewalldsystemctl disable firewalld 创建kubernetes日志目录12# 所有主机执行mkdir /var/log/kubernetes 安装必要的工具12# 安装net-tools工具yum install -y net-tools (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"高可用","slug":"高可用","permalink":"http://gaussli.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"},{"name":"内核","slug":"内核","permalink":"http://gaussli.com/tags/%E5%86%85%E6%A0%B8/"},{"name":"cpu","slug":"cpu","permalink":"http://gaussli.com/tags/cpu/"},{"name":"虚拟内存","slug":"虚拟内存","permalink":"http://gaussli.com/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"},{"name":"SELinux","slug":"selinux","permalink":"http://gaussli.com/tags/selinux/"},{"name":"firewall","slug":"firewall","permalink":"http://gaussli.com/tags/firewall/"}]},{"title":"【Linux】修改时间为上海时间","slug":"【linux】修改时间为上海时间","date":"2021-09-11T07:49:27.000Z","updated":"2021-09-12T09:15:50.776Z","comments":true,"path":"2021/09/11/【linux】修改时间为上海时间/","link":"","permalink":"http://gaussli.com/2021/09/11/%E3%80%90linux%E3%80%91%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%BA%E4%B8%8A%E6%B5%B7%E6%97%B6%E9%97%B4/","excerpt":"","text":"CentOS7纯默认安装的时间会是美国东部时间（EDT） 12# 2021年 09月 11日 星期六 03:42:28 EDTdate 修改为上海时间（CST）（中国标准时间） 12mv /etc/localtime /etc/localtime.bakln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 再次查看时间 12# 2021年 09月 11日 星期六 15:44:50 CSTdate (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"时间","slug":"时间","permalink":"http://gaussli.com/tags/%E6%97%B6%E9%97%B4/"},{"name":"linux","slug":"linux","permalink":"http://gaussli.com/tags/linux/"},{"name":"localtime","slug":"localtime","permalink":"http://gaussli.com/tags/localtime/"}]},{"title":"【容器化】K3S部署安装","slug":"【容器化】k3s部署安装","date":"2021-07-26T15:06:14.000Z","updated":"2021-07-26T15:10:04.581Z","comments":true,"path":"2021/07/26/【容器化】k3s部署安装/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91k3s%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85/","excerpt":"","text":"本文针对版本v1.21.2+k3s1官网https://k3s.io/ 前期准备12# 关闭防火墙systemctl stop firewalld 完成可联网情况下123export INSTALL_K3S_VERSION=v1.21.2+k3s1export INSTALL_K3S_EXEC=&quot;--write-kubeconfig ~/.kube/config --cluster-cidr 10.72.0.0/16 --service-cidr 10.73.0.0/16&quot;curl -sfL https://get.k3s.io | sh - 连不上Github情况下1. 上传相关工具、k3s二进制包、k3s安装脚本、Nginx测试yaml文件到服务器1234scp k3s-selinux-0.2-1.el7_8.noarch.rpm root@xxx.xxx.xxx.xxx:/usr/local/src/scp k3s root@xxx.xxx.xxx.xxx:/usr/local/src/scp k3s.sh root@xxx.xxx.xxx.xxx:/usr/local/src/scp nginx.yaml root@xxx.xxx.xxx.xxx:/usr/local/src/ 2. 配置k3s二进制包的路径和权限12cp /usr/local/src/k3s /usr/local/bin/chmod 755 /usr/local/bin/k3s 3. yum安装相关工具12yum install -y container-selinux selinux-policy-baseyum install -y /usr/local/src/k3s-selinux-0.2-1.el7_8.noarch.rpm 4. 执行k3s安装脚本1234export INSTALL_K3S_VERSION=v1.21.2+k3s1export INSTALL_K3S_SKIP_DOWNLOAD=trueexport INSTALL_K3S_EXEC=&quot;--write-kubeconfig ~/.kube/config --cluster-cidr 172.16.0.0/12 --service-cidr 172.16.130.0/12&quot;sh /usr/local/src/k3s.sh 5. 检查是否安装成功1234systemctl status k3skubectl get node# 等待所有服务处于Running或Completed状态kubectl get pod -A 结果截图： 6. 测试nginx服务1234# 创建测试nginx服务kubectl create -f /usr/local/src/nginx.yaml# 查看服务是否启动成功，nginx服务处于Running状态的则表明都运行成功kubectl get pod -A 结果截图： 通过浏览器访问：https://[server-ip]:32000 k3s二进制文件地址下载地址：https://github.com/k3s-io/k3s/releases/download/v1.21.2+k3s1/k3s k3s-selinux地址下载网址：https://rpm.rancher.io/k3s/stable/common/centos/7/noarch/k3s-selinux-0.2-1.el7_8.noarch.rpm k3s.sh文件内容下载网址：https://get.k3s.io/ nginx.yaml文件内容12345678910111213141516171819202122232425262728293031323334353637383940414243444546kind: NamespaceapiVersion: v1metadata: name: test-project---kind: ServiceapiVersion: v1metadata: name: service-nginx-server namespace: test-project labels: app: service-nginx-serverspec: ports: - name: tcp-80 protocol: TCP port: 80 targetPort: 80 nodePort: 32000 selector: app: nginx-server type: NodePort---kind: DeploymentapiVersion: apps/v1metadata: name: deployment-nginx-server namespace: test-project labels: app: nginx-serverspec: replicas: 3 selector: matchLabels: app: nginx-server template: metadata: labels: app: nginx-server spec: containers: - name: container-nginx-server image: &#x27;nginx:1.20.1-alpine&#x27; ports: - containerPort: 80 protocol: TCP (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"K3S","slug":"tech/container/k3s","permalink":"http://gaussli.com/categories/tech/container/k3s/"}],"tags":[{"name":"脚本安装","slug":"脚本安装","permalink":"http://gaussli.com/tags/%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"},{"name":"Container","slug":"container","permalink":"http://gaussli.com/tags/container/"},{"name":"K3S","slug":"k3s","permalink":"http://gaussli.com/tags/k3s/"}]},{"title":"【容器化】Kubernetes中openebs数据迁移","slug":"【容器化】kubernetes中openebs数据迁移","date":"2021-07-26T15:01:24.000Z","updated":"2021-07-26T15:05:37.069Z","comments":true,"path":"2021/07/26/【容器化】kubernetes中openebs数据迁移/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%B8%ADopenebs%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/","excerpt":"","text":"问题描述openebs作为Kubernetes持久层使用的时候，数据只会存在Kubernetes集群中某个节点中，节点间的数据不会自动共享，这也是导致Kubesphere官方说openebs建议不在生产环境下使用的原因。这种情况下，如果某个Node节点从集群中移除后，该Node节点中的数据就需要手动同步到其他节点中。 现象发现1. Node节点移除后，某pod一直处于Pending状态1kubectl get pod -A |grep Pending 结果截图 2. 查看pod的describe信息1kubectl describe pod [pending-pod-name] -n [pending-pod-namespace] 结果截图结果表明：该POD有Node节点亲和性（affinity）问题。 3. 查看pod的yaml文件内容1kubectl get pod [pending-pod-name] -n [pending-pod-namespace] -oyaml 进一步分析：本身POD是没有进行亲和性（affinity）配置的，那么和POD有关的额外资源，就是持久层资源（pvc、pv） 4. 查看对应持久层资源（pvc、pv）12kubectl get pvc [pvc-name] -n [pending-pod-namespace] -oyamlkubectl get pv [pv-name] -oyaml 5. 最后能发现，openebs的pv是需要指定Node节点亲和性的而如果对应的Node节点被移除了，那么自然这个pv肯定是运行失败了 123456789# 例子nodeAffinity: required: nodeSelectorTerms: - matchExpressions: - key: kubernetes.io/hostname operator: In values: - k8s-node3 解决思路问题找到了，那么就有了解决思路： 把已移除节点中旧PV已存储的数据内容迁移到集群中尚存在的的某节点对应目录上 保存PVC、PV的yaml文件 删除掉PVC和PV 修改PV的节点亲和性 重新部署PVC和PV 解决流程把已移除节点中旧PV已存储的数据（目录/var/openebs/local/）迁移到Master节点上（目录：/var/openebs/local/）过程略 保存PVC、PV的yaml文件12kubectl get -n [namespace] pvc [pvc-name] -oyaml &gt; pvc.yamlkubectl get -n [namespace] pv [pv-name] -oyaml &gt; pv.yaml 删除PVC和PV默认情况下，PVC和PV被正在使用是不能直接删除的，删除会一直使PV处于Terminating状态，所以先给PVC加一个元数据，载进行删除 123kubectl patch -n [namespace] pvc [pvc-name] -p &#x27;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;:null&#125;&#125;&#x27;kubectl delete -n [namespace] pvc [pvc-name]kubectl delete -n [namespace] pv [pv-name] 结果截图 修改PV的节点亲和性和删掉和PVC的关联信息123456789101112131415161718192021# 修改pv.yamlvi pv.yaml# 删除以下内容#claimRef:# apiVersion: v1# kind: PersistentVolumeClaim# name: data-elasticsearch-logging-data-0# namespace: kubesphere-logging-system# resourceVersion: &quot;13881&quot;# uid: f15f1581-f8ae-452b-9825-c28c1cf34f7bnodeAffinity: required: nodeSelectorTerms: - matchExpressions: - key: kubernetes.io/hostname operator: In values: # 修改以下内容 # k8s-node3改成k8s-master1，改成集群中存在可用的节点名称 - k8s-master1 重新部署PVC和PV12kubectl create -f pv.yamlkubectl create -f pvc.yaml (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"Container","slug":"container","permalink":"http://gaussli.com/tags/container/"},{"name":"OpenEBS","slug":"openebs","permalink":"http://gaussli.com/tags/openebs/"},{"name":"数据迁移","slug":"数据迁移","permalink":"http://gaussli.com/tags/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"}]},{"title":"【容器化】Kubernetes证书过期问题处理","slug":"【容器化】kubernetes证书过期问题处理","date":"2021-07-26T14:57:33.000Z","updated":"2021-07-26T15:01:13.692Z","comments":true,"path":"2021/07/26/【容器化】kubernetes证书过期问题处理/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/","excerpt":"","text":"问题描述Kubernetes稳定运行了一年，突然Kubesphere中任何和K8S资源相关的操作都失效了，而且发现kubectl命令也出错了，报错如下： 12Unable to connect to the server: x509: certificate has expired or is not yet validopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -noout -text |grep &#x27; Not &#x27; 原因是Kubernetes的证书默认过期有效期为1年，查看证书有效期命令如下 1kubeadm alpha certs check-expiration 查看结果例子： 12345678910111213141516171819[check-expiration] Reading configuration from the cluster...[check-expiration] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;CERTIFICATE EXPIRES RESIDUAL TIME CERTIFICATE AUTHORITY EXTERNALLY MANAGEDadmin.conf Jul 08, 2022 01:40 UTC 364d no apiserver Jul 08, 2022 01:40 UTC 364d ca no apiserver-etcd-client Jul 08, 2022 01:40 UTC 364d etcd-ca no apiserver-kubelet-client Jul 08, 2022 01:40 UTC 364d ca no controller-manager.conf Jul 08, 2022 01:40 UTC 364d no etcd-healthcheck-client Jul 08, 2022 01:40 UTC 364d etcd-ca no etcd-peer Jul 08, 2022 01:40 UTC 364d etcd-ca no etcd-server Jul 08, 2022 01:40 UTC 364d etcd-ca no front-proxy-client Jul 08, 2022 01:40 UTC 364d front-proxy-ca no scheduler.conf Jul 08, 2022 01:40 UTC 364d no CERTIFICATE AUTHORITY EXPIRES RESIDUAL TIME EXTERNALLY MANAGEDca Jul 05, 2030 08:16 UTC 8y no etcd-ca Jul 05, 2030 08:16 UTC 8y no front-proxy-ca Jul 05, 2030 08:16 UTC 8y no 解决方案（更新证书有效期）1. 备份证书1cp -rp /etc/kubernetes /etc/kubernetes.bak.[date] 2. 更新所有证书1kubeadm alpha certs renew all 3. 复制admin.conf到~/.kube/config，kubectl需要用到该文件12cp -rp ~/.kube ~/.kube.bak.[date]cp /etc/kubernetes/admin.conf ~/.kube/config 4. 重启kube-apiserver、kube-controller-manager、kube-scheduler和etcd服务或直接重启docker1systemctl restart docker (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"Container","slug":"container","permalink":"http://gaussli.com/tags/container/"},{"name":"证书过期","slug":"证书过期","permalink":"http://gaussli.com/tags/%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F/"}]},{"title":"【容器化】Kubernetes优雅新增或移除节点","slug":"【容器化】kubernetes优雅新增或移除节点","date":"2021-07-26T14:41:18.000Z","updated":"2021-07-26T14:44:57.946Z","comments":true,"path":"2021/07/26/【容器化】kubernetes优雅新增或移除节点/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E4%BC%98%E9%9B%85%E6%96%B0%E5%A2%9E%E6%88%96%E7%A7%BB%E9%99%A4%E8%8A%82%E7%82%B9/","excerpt":"","text":"新增节点1. 集群内所有节点的hosts文件加上新节点解析12345# 进入hosts文件编辑vi /etc/hosts## 在文件中加入下面内容[new-node-ip] [new-node-hostname] 2. 进入Master节点，查看当前是否存在可用Token，没有任何输出说明当前没有可用Token1kubeadm token list 3. 创建Token1kubeadm token create 结果截图： 4. 再次查看可用Token，可查看Token的一些信息1kubeadm token list 结果截图： 5. 根据ca的公钥证书数据计算出hash值1openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2&gt;/dev/null | sha256sum | cut -d&#x27; &#x27; -f1 结果截图： 6. 新节点安装kubectl、kubeadm、kubelet，版本需和Master的一致123yum -y install kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3systemctl enable kubeletsystemctl start kubelet 7. 把新节点加入到集群中，其中使用到上述获取的Token和ca证书的hash值1kubeadm join &lt;master-ip&gt;:6443 --node-name [new-node-hostname] --token kklhin.swv9pvue5jncxzqs --discovery-token-ca-cert-hash sha256:7e0f436144520310a988005261894d4c82c36c99c0db9e71e4daac5546d5f159 移除节点1. 进入到Master节点，驱逐待移除节点上的pod参数说明 –force当一些pod不是经 ReplicationController, ReplicaSet, Job, DaemonSet 或者 StatefulSet 管理的时候就需要用–force来强制执行 (例如:kube-proxy) –ignore-daemonsets无视DaemonSet管理下的Pod –delete-local-data如果有mount local volumn的pod，会强制杀掉该pod并把料清除掉另外如果跟本身的配置讯息有冲突时，drain就不会执行 1kubectl drain [node-name] --force --ignore-daemonsets --delete-local-data 结果截图 2. 删除节点1kubectl delete node [node-name] 3. 进入待删除节点，重置节点1kubeadm reset 4. （可选）移除待删除节点的Kubernetes网络配置12# 查看网络配置ip a 结果截图发现有两个Kubernetes的网络配置（flannel.1和cni0）是已无用网络配置，对其进行下线及删除 12345ifconfig cni0 downifconfig flannel.1 downip link delete cni0ip link delete flannel.1ip a 结果截图 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"Container","slug":"container","permalink":"http://gaussli.com/tags/container/"},{"name":"Node","slug":"node","permalink":"http://gaussli.com/tags/node/"},{"name":"优雅","slug":"优雅","permalink":"http://gaussli.com/tags/%E4%BC%98%E9%9B%85/"},{"name":"节点","slug":"节点","permalink":"http://gaussli.com/tags/%E8%8A%82%E7%82%B9/"}]},{"title":"【容器化】Kubesphere部署","slug":"【容器化】kubesphere部署","date":"2021-07-26T14:39:44.000Z","updated":"2021-07-26T14:41:07.819Z","comments":true,"path":"2021/07/26/【容器化】kubesphere部署/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubesphere%E9%83%A8%E7%BD%B2/","excerpt":"","text":"官网github：https://github.com/kubesphere/kubesphere official-website：https://kubesphere.io/ 简介 官方说明：KubeSphere is a distributed operating system for cloud-native application management, using Kubernetes as its kernel. It provides a plug-and-play architecture, allowing third-party applications to be seamlessly integrated into its ecosystem. 官方说明：KubeSphere 愿景是打造一个以 Kubernetes 为内核的云原生分布式操作系统，它的架构可以非常方便地使第三方应用与云原生生态组件进行即插即用（plug-and-play）的集成，支持云原生应用在多云与多集群的统一分发和运维管理。 准备 如需在 Kubernetes 上安装 KubeSphere v3.1.1，您的 Kubernetes 版本必须为：1.17.x、1.18.x、1.19.x 或 1.20.x。 确保您的机器满足最低硬件要求：CPU &gt; 1 核，内存 &gt; 2 GB。 在安装之前，需要配置 Kubernetes 集群中的默认存储类型。1kubectl patch storageclass &lt;storageclass-name&gt; -p &#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27; 部署123456# 下载部署YAML文件curl -o /usr/local/src/kubesphere-installer.yaml https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/kubesphere-installer.yamlcurl -o /usr/local/src/cluster-configuration.yaml https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/cluster-configuration.yaml# 执行YAML文件kubectl -f /usr/local/src/kubesphere-installer.yamlkubectl -f /usr/local/src/cluster-configuration.yaml 结果截图： 卸载1234# 下载卸载脚本curl -o /usr/local/src/kubesphere-delete.sh https://raw.githubusercontent.com/kubesphere/ks-installer/release-3.1/scripts/kubesphere-delete.sh# Master节点执行脚本sh /usr/local/src/kubesphere-delete.sh (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubesphere","slug":"tech/container/kubesphere","permalink":"http://gaussli.com/categories/tech/container/kubesphere/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"Container","slug":"container","permalink":"http://gaussli.com/tags/container/"},{"name":"Kubesphere","slug":"kubesphere","permalink":"http://gaussli.com/tags/kubesphere/"},{"name":"YAML","slug":"yaml","permalink":"http://gaussli.com/tags/yaml/"}]},{"title":"【容器化】OpenEBS部署","slug":"【容器化】openebs部署","date":"2021-07-26T14:37:33.000Z","updated":"2021-07-26T14:39:35.702Z","comments":true,"path":"2021/07/26/【容器化】openebs部署/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91openebs%E9%83%A8%E7%BD%B2/","excerpt":"","text":"官网official-website：https://docs.openebs.io/ 简介 官方说明：OpenEBS helps Developers and Platform SREs easily deploy Kubernetes Stateful Workloads that require fast and highly reliable container attached storage.OpenEBS turns any storage available on the Kubernetes worker nodes into local or distributed Kubernetes Persistent Volumes.OpenEBS Local and Distributed volumes are implemented using a collection of OpenEBS Data Engines. OpenEBS Control Plane integrates deeply into Kubernetes and uses Kubernetes to manage the provisioning, scheduling and maintenance of OpenEBS Volumes.OpenEBS supports hyperconverged and disaggregated deployments. OpenEBS is the leading choice for NVMe based storage deployments. 准备安装iscsid服务官方说明：https://docs.openebs.io/docs/next/prerequisites.htmlThis guide will help you to verify that your Kubernetes worker nodes have the required prerequisites to install OpenEBS and use OpenEBS Volumes to run your Kubernetes Stateful Workloads. In addition, you will learn about how to customize the installer according to your managed Kubernetes provider.OpenEBS provides block volume support through the iSCSI protocol. Therefore, the iSCSI client (initiator) presence on all Kubernetes nodes is required. Choose the platform below to find the steps to verify if the iSCSI client is installed and running or to find the steps to install the iSCSI client. 1234# 所有节点都需要安装yum install iscsi-initiator-utils -ysystemctl enable --now iscsidcat /etc/iscsi/initiatorname.iscsi 配置Master节点可被调度1kubectl taint nodes &lt;Master节点名称&gt; node-role.kubernetes.io/master:NoSchedule- 部署12# Master节点执行kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml 查看是否安装成功12# 查看OpenEBS的pod是否都处于Running状态kubectl get pod -n openebs （可选）配置默认Storage Class1kubectl patch storageclass &lt;storageclass-name&gt; -p &#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27; 卸载123# 下载卸载脚本curl -o /usr/local/src/openebs-uninstall.sh https://raw.githubusercontent.com/openebs/charts/gh-pages/scripts/uninstall/uninstall.sh# Master节点中执行卸载脚本 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"OpenEBS","slug":"tech/container/openebs","permalink":"http://gaussli.com/categories/tech/container/openebs/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"OpenEBS","slug":"openebs","permalink":"http://gaussli.com/tags/openebs/"},{"name":"YAML","slug":"yaml","permalink":"http://gaussli.com/tags/yaml/"}]},{"title":"【容器化】Kubernetes部署","slug":"【容器化】kubernetes部署","date":"2021-07-26T14:26:59.000Z","updated":"2021-07-26T14:34:43.451Z","comments":true,"path":"2021/07/26/【容器化】kubernetes部署/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91kubernetes%E9%83%A8%E7%BD%B2/","excerpt":"","text":"官网github：https://github.com/kubernetes/kubernetes official-website：https://kubernetes.io/ 简介 官方说明：Kubernetes 是用于自动部署，扩展和管理容器化应用程序的开源系统。 官方说明：Kubernetes, also known as K8s, is an open source system for managing containerized applications across multiple hosts. It provides basic mechanisms for deployment, maintenance, and scaling of applications. Kubernetes builds upon a decade and a half of experience at Google running production workloads at scale using a system called Borg, combined with best-of-breed ideas and practices from the community. Kubernetes is hosted by the Cloud Native Computing Foundation (CNCF). If your company wants to help shape the evolution of technologies that are container-packaged, dynamically scheduled, and microservices-oriented, consider joining the CNCF. For details about who’s involved and how Kubernetes plays a role, read the CNCF announcement. Kubeadm方式部署1. 准备a) 禁用swap虚拟内存原因：https://github.com/kubernetes/kubernetes/issues/53533 12345678# 查看默认是否开启swap虚拟内存，swap端不为0则说明开启free -h# 临时禁用swapswapoff -a# 永久禁用swap，需重启服务生效sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab# 再次查看swap是否已关闭free -h 结果截图： b) 禁用selinux原因：（https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/）Setting SELinux in permissive mode by runningsetenforce 0andsed …effectively disables it. This is required to allow containers to access the host filesystem, which is needed by pod networks for example. You have to do this until SELinux support is improved in the kubelet. 12345678# 查看默认是否已关闭getenforce# 临时禁用setenforce 0# 永久禁用，需重启服务器生效sed -i &quot;s/^SELINUX=.*/SELINUX=disabled/g&quot; /etc/selinux/config# 再次查看是否已关闭getenforce 结果截图： c) 禁用防火墙（firewall）原因：（https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/）Theiptablestooling can act as a compatibility layer, behaving like iptables but actually configuring nftables. This nftables backend is not compatible with the current kubeadm packages: it causes duplicated firewall rules and breakskube-proxy. 123systemctl stop firewalldsystemctl disable firewalldsystemctl status firewalld 结果截图： d) 允许 iptables 检查桥接流量说明：（https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/）Make sure that the br_netfilter module is loaded. This can be done by running lsmod | grep br_netfilter. To load it explicitly call sudo modprobe br_netfilter.As a requirement for your Linux Node’s iptables to correctly see bridged traffic, you should ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl config, e.g. 123456789cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.confbr_netfilterEOFcat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsudo sysctl --system 结果截图： e) 安装Docker略 f) 配置Docker的Cgroup驱动程序说明：https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#dockerDocker中默认的Cgroup驱动程序为cgroupfs，和Kubelet默认的systemd不一致，将会导致Kubelet安装时报错，所以修改Docker的Cgroup驱动程序为systemd。 1vi /etc/docker/daemon.json 添加以下内容 12345678&#123; &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;], &quot;log-driver&quot;: &quot;json-file&quot;, &quot;log-opts&quot;: &#123; &quot;max-size&quot;: &quot;100m&quot; &#125;, &quot;storage-driver&quot;: &quot;overlay2&quot;&#125; 结果截图： 123# 重启Dockersystemctl daemon-reloadsystemctl restart docker g) 配置Kubernetes的YUM源YUM默认源是没有Kubernetes相关组件的软件的（Kubeadm、Kubectl、Kubelet），所以需要配置Kubernetes的YUM源 12345678910cat &lt;&lt; EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOFyum makecache fast h) 查看可安装的Kuberadm、Kubelet、Kubectl版本1yum list kubeadm --showduplicates 2. 所有节点安装Kubeadm、Kubelet、Kubectl1234# 安装最新版本# yum install -y kubeadm kubelet kubectl# 安装指定指定版本yum install -y kubeadm-1.20.9 kubelet-1.20.9 kubectl-1.20.9 结果截图： 3. 所有节点配置开启自启动及服务启动12systemctl enable kubeletsystemctl start kubelet 结果截图： 3. Master节点初始化123456kubeadm init --apiserver-advertise-address=192.168.10.8 \\--apiserver-bind-port=6443 \\--image-repository=google_containers \\--kubernetes-version=v1.20.9 \\--pod-network-cidr=10.244.0.0/16 \\--service-cidr=10.96.0.0/12 结果截图： 1234# 按照提示复制对应配置文件mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config 4. Work节点初始化123kubeadm join 192.168.10.8:6443 \\--token rbmgap.cdmqe0c25613a8yr \\--discovery-token-ca-cert-hash sha256:b1dacd2a9ec2205aa80ad09f80e8a44eee43f6527aa2ea5745e405bb1c5ca2bd 结果截图： 5. Master查看节点信息集群节点当前处于NotReady状态，原因是coredns服务还没启动成功，而coredns服务依赖Kubernetes集群中的网络插件，常用的网络插件为Flannel、Calico。 1kubectl get node -owide 结果截图： 6. Master节点配置网络插件（Flannel）说明官方地址：https://github.com/flannel-io/flannel网络插件只需要安装一个即可，即安装了Flannel就不需要安装Calico了。 下载并修改服务配置1234# 下载Flannel部署YAML文件curl -o /usr/local/src/kube-flannel.yaml https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml# 修改部分属性vi /usr/local/src/kube-flannel.yaml 1234567# 修改其中的net-conf.json中的Network属性，改为初始化命令中的pod-network-cidr参数&quot;Network&quot;: &quot;10.244.0.0/16&quot;,# （若存在多网卡）新增指定网卡属性args: - --ip-masq - --kube-subnet-mgr - --iface=enp0s8 部署服务12# 部署网络插件Flannel服务kubectl create -f /usr/local/src/kube-flannel.yaml 结果截图： 查看结果1234# 定时查看Kubernetes集群中pod运行状态，若全部处于Running状态则表明网络插件Flannel部署成功了watch -n 1 &quot;kubectl get pod -A&quot;# 再次查看节点状态，若都处于Ready状态则表明网络插件Flannel配置成功了kubectl get node -owide 结果截图： 7. Master节点配置网络插件（Calico）说明官方地址：https://www.tigera.io/project-calico/网络插件只需要安装一个即可，即安装了Calico就不需要安装Flannel了。 下载并修改服务配置12345# 下载calico部署YAML文件curl -o /usr/local/src/tigera-operator.yaml https://docs.projectcalico.org/manifests/tigera-operator.yamlcurl -o /usr/local/src/custom-resources.yaml https://docs.projectcalico.org/manifests/custom-resources.yaml# 修改部分属性vi /usr/local/src/custom-resources.yaml 12# 修改其中的cidr属性，改为初始化命令中的pod-network-cidr参数cidr: 10.244.0.0/16 部署服务123# 部署网络插件Calico服务kubectl create -f /usr/local/src/tigera-operator.yamlkubectl create -f /usr/local/src/custom-resources.yaml 结果截图： 查看结果1234# 定时查看Kubernetes集群中pod运行状态，若全部处于Running状态则表明网络插件Calico部署成功了watch -n 1 &quot;kubectl get pod -A&quot;# 再次查看节点状态，若都处于Ready状态则表明网络插件Calico配置成功了kubectl get node -owide 结果截图： 8. Master节点配置网络插件（Calico）(方式2)说明官方地址：https://www.tigera.io/project-calico/网络插件只需要安装一个即可，即安装了Calico就不需要安装Flannel了。此方式关键在于直接使用一个配置文件即可 下载并修改服务配置1234# 下载Calico部署YAML文件curl -o /usr/local/src/calico.yaml https://docs.projectcalico.org/manifests/calico.yaml# 修改部分属性vi /usr/local/src/calico.yaml 123# 修改其中的CALICO_IPV4POOL_CIDR环境变量（默认是被注释的了），改为初始化命令中的pod-network-cidr参数- name: CALICO_IPV4POOL_CIDR value: &quot;10.244.0.0/16&quot; 部署服务12# 部署网络插件Calico服务kubectl create -f /usr/local/src/calico.yaml 结果截图： 查看结果1234# 定时查看Kubernetes集群中pod运行状态，若全部处于Running状态则表明网络插件Calico部署成功了watch -n 1 &quot;kubectl get pod -A&quot;# 再次查看节点状态，若都处于Ready状态则表明网络插件Calico配置成功了kubectl get node -owide 结果截图： (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"Container","slug":"container","permalink":"http://gaussli.com/tags/container/"},{"name":"Kubeadm","slug":"kubeadm","permalink":"http://gaussli.com/tags/kubeadm/"},{"name":"Kubelet","slug":"kubelet","permalink":"http://gaussli.com/tags/kubelet/"},{"name":"Kubectl","slug":"kubectl","permalink":"http://gaussli.com/tags/kubectl/"}]},{"title":"【容器化】Docker部署","slug":"【容器化】docker部署","date":"2021-07-26T14:23:36.000Z","updated":"2021-07-26T14:27:34.182Z","comments":true,"path":"2021/07/26/【容器化】docker部署/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90%E5%AE%B9%E5%99%A8%E5%8C%96%E3%80%91docker%E9%83%A8%E7%BD%B2/","excerpt":"","text":"官网official-website：https://www.docker.com/ 中文教程：https://www.runoob.com/docker/docker-tutorial.html 简介 官方说明：Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production. YUM方式部署1. 准备配置Docker-CE的YUM源YUM默认源中的Docker是比较旧的，如果需要安装新版本的Docker，需要配置Docker-CE的YUM源。 12curl -o /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fast 结果截图： 查看可安装的Docker版本1yum list docker-ce --showduplicates 结果截图： 2. 安装部署1234# 安装最新版本# yum install -y docker-ce# 安装指定指定版本yum install -y docker-ce-3:19.03.15-3.el7.x86_64 结果截图： 3. 配置开机自启动及服务启动12systemctl enable dockersystemctl start docker 结果截图： 4. 配置私有仓库123456789101112131415mkdir -p /etc/docker# 配置Docker私有仓库文件cat &lt;&lt; EOF &gt; /etc/docker/daemon.json&#123; &quot;registry-mirrors&quot;: [ &quot;http://&lt;IP&gt;:&lt;PORT&gt;&quot; ], &quot;insecure-registries&quot;: [ &quot;&lt;IP&gt;:&lt;PORT&gt;&quot; ]&#125;EOF# 重启Docker服务systemctl daemon-reloadsystemctl restart docker 5. 测试镜像拉取1docker pull busybox 结果截图： (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Docker","slug":"tech/container/docker","permalink":"http://gaussli.com/categories/tech/container/docker/"}],"tags":[{"name":"YUM","slug":"yum","permalink":"http://gaussli.com/tags/yum/"},{"name":"Docker","slug":"docker","permalink":"http://gaussli.com/tags/docker/"},{"name":"Container","slug":"container","permalink":"http://gaussli.com/tags/container/"}]},{"title":"【Middleware】Seata部署及使用","slug":"【middleware】seata部署及使用","date":"2021-07-26T14:21:03.000Z","updated":"2021-07-26T14:22:31.688Z","comments":true,"path":"2021/07/26/【middleware】seata部署及使用/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90middleware%E3%80%91seata%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"官网github：https://github.com/seata/seata github-example：https://github.com/seata/seata-samples offical-website：https://seata.io/ 简介 官方说明：Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。 PS: Seata是比较难以理解的一个框架，强烈建议在学习Seata框架时，先认真阅读官网内容，以了解整个Seata各种概念和设计思路，再动手写代码。 脚本方式安装1. 准备安装JDK略 下载应用包 应用包名称 下载地址 seata-server-1.4.2.tar.gz https://github.com/seata/seata/releases/download/v1.4.2/seata-server-1.4.2.tar.gz seata-server.sql https://github.com/seata/seata/blob/1.4.2/script/server/db/mysql.sql 上传应用包1scp seata-server-1.4.2.tar.gz root@xxx:/usr/local/src/ 解压应用包1tar -zxvf seata-server-1.4.2.tar.gz 移动到安装目录（/usr/local/seata）1mv /usr/local/src/seata/seata-server-1.4.2/ /usr/local/seata-server 2. 创建数据库123# MySQL命令行中create database seata_server_db;source seata-server.sql 3. 配置Seata信息 seata支持通过file、nacos、eureka、redis、zk、consul、etcd3、sofa方式注册服务 seata支持使用file、nacos、apollo、zk、consul、etcd3作为配置中心 以服务注册方式：file，服务配置方式：file，数据存储方式：file不需要改动任何配置文件，当这种方式不可实现高可用部署，高可用部署架构上数据存储方式不能使用file方式。 以服务注册方式：eureka，服务配置方式：apollo，数据存储方式：mysql Apollo中配置Seata属性1234567891011121314151617store.mode = db## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.store.db.datasource = druid## mysql/oracle/postgresql/h2/oceanbase etc.store.db.dbType = mysqlstore.db.driverClassName = com.mysql.jdbc.Driver## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection paramstore.db.url = jdbc:mysql://xxx:xxx/xxx_db?rewriteBatchedStatements=true&amp;autoReconnect=true&amp;failOverReadOnly=falsestore.db.user = xxxstore.db.password = xxxxstore.db.minConn = 5store.db.maxConn = 30store.db.globalTable = global_tablestore.db.branchTable = branch_tablestore.db.lockTable = lock_tablestore.db.queryLimit = 100store.db.maxWait = 5000 配置registry.conf文件12# 修改registry.confvi /usr/local/seata-server/conf/registry.conf 12345678910111213141516# 修改registry下的eureka模块eureka &#123; serviceUrl = &quot;&lt;eureka的服务地址&gt;&quot; application = &quot;&lt;seata在eureka中的服务名，建议seata-server&gt;&quot; weight = &quot;1&quot;&#125;# 修改config下的apollo模块apollo &#123; appId = &quot;&lt;Apollo已配置项目名称&gt;&quot; ## apolloConfigService will cover apolloMeta apolloMeta = &quot;&lt;Apollo-Meta的服务地址&gt;&quot; apolloConfigService = &quot;&lt;Apollo-Config的服务地址，一般和Apollo-Meta服务的一致&gt;&quot; namespace = &quot;&lt;Apollo中配置的Seata命名空间&gt;&quot; apolloAccesskeySecret = &quot;&lt;若有，则配置&gt;&quot; cluster = &quot;&lt;Apollo配置的集群名称&gt;&quot;&#125; 4. 启动服务12# &quot;-p&quot;表示指定服务端口nohup sh /usr/local/seata-server/bin/seata-server.sh -p &lt;端口号&gt; &gt; /usr/local/seata-server/logs/seata-server.log 2&gt;&amp;1 &amp; 5. 查看日志查看文件/usr/local/seata-server/conf/logback/file-appender.xml内容可知，默认的日志路径为$&#123;user.home&#125;/logs/seata 12# 或tail -f /usr/local/seata-server/logs/seata-server.logtail -f ~/logs/seata/seata-server.&lt;端口号&gt;.all.log 6. 停止服务1kill -9 `ps -aux | grep seata | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;` Kubernetes方式安装1. 创建数据库和脚本方式安装中的创建数据库步骤一致 2. 部署服务（以服务注册方式：eureka，服务配置方式：apollo，数据存储方式：mysql进行部署）修改其中&lt;namespace-name&gt;的内容，以及配置文件相关属性。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980---# configmap for seata-serverkind: ConfigMapapiVersion: v1metadata: name: configmap-seata-server namespace: &lt;namespace-name&gt;data: registry.conf: | registry &#123; type = &quot;eureka&quot; eureka &#123; serviceUrl = &quot;&lt;eureka的服务地址&gt;&quot; application = &quot;&lt;seata在eureka中的服务名，建议seata-server&gt;&quot; weight = &quot;1&quot; &#125; &#125; config &#123; type = &quot;apollo&quot; apollo &#123; appId = &quot;&lt;Apollo已配置项目名称&gt;&quot; ## apolloConfigService will cover apolloMeta apolloMeta = &quot;&lt;Apollo-Meta的服务地址&gt;&quot; apolloConfigService = &quot;&lt;Apollo-Config的服务地址，一般和Apollo-Meta服务的一致&gt;&quot; namespace = &quot;&lt;Apollo中配置的Seata命名空间&gt;&quot; cluster = &quot;&lt;Apollo配置的集群名称&gt;&quot; &#125; &#125;---# deployment for seata-serverkind: DeploymentapiVersion: apps/v1metadata: name: deployment-seata-server namespace: &lt;namespace-name&gt; labels: app: seata-serverspec: replicas: 3 selector: matchLabels: app: seata-server template: metadata: labels: app: seata-server spec: # 存储资源定义 volumes: - name: volume-configmap-seata-server configMap: name: configmap-seata-server defaultMode: 420 containers: - name: container-seata-server image: &#x27;seataio/seata-server:latest&#x27; ports: - name: http containerPort: 8091 protocol: TCP # 环境变量 env: - name: SEATA_CONFIG_NAME value: &#x27;file:/root/seata-config/registry&#x27; resources: limits: cpu: &#x27;1&#x27; memory: 2000Mi requests: cpu: 500m memory: 1000Mi # 存储资源挂载 volumeMounts: - name: volume-configmap-seata-server mountPath: /root/seata-config strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 1 maxSurge: 1 SpringBoot中使用1. 创建undo_log表1234567891011121314-- 注意此处0.3.0+ 增加唯一索引 ux_undo_logCREATE TABLE `undo_log` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `branch_id` bigint(20) NOT NULL, `xid` varchar(100) NOT NULL, `context` varchar(128) NOT NULL, `rollback_info` longblob NOT NULL, `log_status` int(11) NOT NULL, `log_created` datetime NOT NULL, `log_modified` datetime NOT NULL, `ext` varchar(100) DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; 2. 引入依赖注意版本强烈建议和部署的服务版本一致 12345&lt;dependency&gt; &lt;groupId&gt;io.seata&lt;/groupId&gt; &lt;artifactId&gt;seata-all&lt;/artifactId&gt; &lt;version&gt;$&#123;seata.version&#125;&lt;/version&gt;&lt;/dependency&gt; 3. 修改SpringBoot配置文件（application.yml或application.properties）Seata独立部署方式配置1234seata.enabled = trueseata.service.grouplist.seata-server = &lt;seata-server的地址（含端口）&gt;seata.service.vgroup-mapping.tx_service_group_xxx = seata-serverseata.tx-service-group = tx_service_group_xxx Seata基于Eureka服务部署方式配置12345seata.enabled = trueseata.registry.type = eurekaseata.registry.eureka.service-url = &lt;Eureka地址，多个逗号（,）隔开&gt;seata.service.vgroup-mapping.tx_service_group_xxx = seata-serverseata.tx-service-group = tx_service_group_xxx 4. 与ORM框架整合（配置数据源代理）seata虽说是和主流的ORM框架都能支持整合，但整合过程还是需要进行一定的配置的，其中最重要的就是数据源代理了。 1234567891011121314151617181920@Value(&quot;$&#123;seata.enabled:false&#125;&quot;)private boolean isSeataEnabled;@Bean@ConfigurationProperties(prefix = &quot;spring.datasource.druid&quot;)public DataSource druidDataSource()&#123; DruidDataSource druidDataSource = new DruidDataSource(); return druidDataSource;&#125;@Primary@Bean(&quot;dataSource&quot;)public DataSource dataSource(DataSource druidDataSource) &#123; if (isSeataEnabled) &#123; return new DataSourceProxy(druidDataSource); &#125; else &#123; return druidDataSource; &#125;&#125; 5. 与RPC框架整合（配置事务传播）seata的全局事务是基于内部的XID确定全局唯一事务ID的，而下游服务自动默认是从Request-Header中获取的，所以基于不同的RPC框架，有不同的事务传播配置。官网的微服务框架支持 https://seata.io/zh-cn/docs/user/microservice.html 文章中有具体的说明。当前用的RPC框架为Feign，所以以Feign为例，创建Feign的请求拦截器类，把当前的XID放到请求头里： 123456789101112@Configuration@ConditionalOnClass(&#123;RequestInterceptor.class, RootContext.class&#125;)public class FeignRequestSeataInterceptor implements RequestInterceptor &#123; @Override public void apply(RequestTemplate template) &#123; // 传输Seata的xid到下游服务 String xid = RootContext.getXID(); if (StrUtil.isNotBlank(xid)) &#123; template.header(RootContext.KEY_XID, xid); &#125; &#125;&#125; 6. 使用注解@GlobalTransactional启用Seata分布式事务1234567@Serverpublic class UserServiceImpl &#123; @GlobalTransactional public Result&lt;String&gt; save(User user) &#123; //TODO: 具体业务逻辑 &#125;&#125; 注意事项1. 脚本方式单机部署的高可用或多实例如果想在同一台服务器部署多个实例，不能单单改了端口执行同一条命令启动服务命令，这样会由于部分文件在不同实例下共同使用而出错，这一点已经测试证实过了，至少使用Seata1.2.0和Seata1.3.0版本都测试过。 所以有多少个实例，就要创建多少个Seata部署文件夹，每个文件夹各自管理各自的实例。如部署例子分别创建/usr/local/seata1/、/usr/local/seata2/、/usr/local/seata3/三个目录，并把seata的解压内容复制到目录内，分别用不同端口执行不同目录下的bin/seata-server.sh脚本，这样才能正确地得到三个seata实例。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Middleware","slug":"tech/middleware","permalink":"http://gaussli.com/categories/tech/middleware/"},{"name":"Seata","slug":"tech/middleware/seata","permalink":"http://gaussli.com/categories/tech/middleware/seata/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"Seata","slug":"seata","permalink":"http://gaussli.com/tags/seata/"},{"name":"脚本安装","slug":"脚本安装","permalink":"http://gaussli.com/tags/%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"}]},{"title":"【Middleware】Zipkin部署及使用","slug":"【middleware】zipkin部署及使用","date":"2021-07-26T14:18:29.000Z","updated":"2021-07-26T14:20:18.583Z","comments":true,"path":"2021/07/26/【middleware】zipkin部署及使用/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90middleware%E3%80%91zipkin%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1. 官方链接 官方链接OpenZipkin · A distributed tracing system github链接openzipkin/zipkin 2.一些概念和知识点 数据流转图 开源分布式跟踪系统，Twitter公司开源 作用 查看服务调用的大局观，分析服务间调用关系 分析服务调用耗时 分析服务调用异常问题 四大组件 collector对链路数据进行验证、存储、建立索引的操作 storage对数据进行存储，默认情况下使用Cassandra。storage组件被设计成插件化，除了Cassandra外，还支持ElasticSearch和MySQL search（Zipkin Query Service）一旦数据被存储以及建立索引，搜索守护进程就能提供一个JSON格式的API来进行链路数据的查找。web UI内部使用的就是这个API web UI提供一个友好的用户界面，展示链路数据关联的服务、耗时和注解等信息。特别地，该UI并没有身份验证能力。 数据传输方式 http：默认方式 RabbitMQ Kafka设置spring.zipkin.sender.type: kafka 安装方式 结合springcloud启动zipkin服务，让eureka进行服务发现 通过docker安装 通过jar包执行java -jar安装 源码安装 高可用考虑 通过kubernetes保证至少存在一个副本 3. 安装配置，使用MySQL作为存储方式 数据库配置 1234# Barracuda supports compression (In AWS RDS, this must be assigned in a parameter group)mysql -uroot -e &quot;SET GLOBAL innodb_file_format=Barracuda&quot;# This command should work even in RDS, and return &quot;Barracuda&quot;mysql -uroot -e &quot;show global variables like &#x27;innodb_file_format&#x27;&quot; SQL DDL 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657---- Copyright 2015-2019 The OpenZipkin Authors---- Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except-- in compliance with the License. You may obtain a copy of the License at---- http://www.apache.org/licenses/LICENSE-2.0---- Unless required by applicable law or agreed to in writing, software distributed under the License-- is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express-- or implied. See the License for the specific language governing permissions and limitations under-- the License.-CREATE TABLE IF NOT EXISTS zipkin_spans ( `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;, `trace_id` BIGINT NOT NULL, `id` BIGINT NOT NULL, `name` VARCHAR(255) NOT NULL, `remote_service_name` VARCHAR(255), `parent_id` BIGINT, `debug` BIT(1), `start_ts` BIGINT COMMENT &#x27;Span.timestamp(): epoch micros used for endTs query and to implement TTL&#x27;, `duration` BIGINT COMMENT &#x27;Span.duration(): micros used for minDuration and maxDuration query&#x27;, PRIMARY KEY (`trace_id_high`, `trace_id`, `id`)) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ciALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT &#x27;for getTracesByIds&#x27;;ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT &#x27;for getTraces and getSpanNames&#x27;;ALTER TABLE zipkin_spans ADD INDEX(`remote_service_name`) COMMENT &#x27;for getTraces and getRemoteServiceNames&#x27;;ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT &#x27;for getTraces ordering and range&#x27;CREATE TABLE IF NOT EXISTS zipkin_annotations ( `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;, `trace_id` BIGINT NOT NULL COMMENT &#x27;coincides with zipkin_spans.trace_id&#x27;, `span_id` BIGINT NOT NULL COMMENT &#x27;coincides with zipkin_spans.id&#x27;, `a_key` VARCHAR(255) NOT NULL COMMENT &#x27;BinaryAnnotation.key or Annotation.value if type == -1&#x27;, `a_value` BLOB COMMENT &#x27;BinaryAnnotation.value(), which must be smaller than 64KB&#x27;, `a_type` INT NOT NULL COMMENT &#x27;BinaryAnnotation.type() or -1 if Annotation&#x27;, `a_timestamp` BIGINT COMMENT &#x27;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&#x27;, `endpoint_ipv4` INT COMMENT &#x27;Null when Binary/Annotation.endpoint is null&#x27;, `endpoint_ipv6` BINARY(16) COMMENT &#x27;Null when Binary/Annotation.endpoint is null, or no IPv6 address&#x27;, `endpoint_port` SMALLINT COMMENT &#x27;Null when Binary/Annotation.endpoint is null&#x27;, `endpoint_service_name` VARCHAR(255) COMMENT &#x27;Null when Binary/Annotation.endpoint is null&#x27;) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ciALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT &#x27;Ignore insert on duplicate&#x27;;ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT &#x27;for joining with zipkin_spans&#x27;;ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT &#x27;for getTraces/ByIds&#x27;;ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT &#x27;for getTraces and getServiceNames&#x27;;ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT &#x27;for getTraces and autocomplete values&#x27;;ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT &#x27;for getTraces and autocomplete values&#x27;;ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT &#x27;for dependencies job&#x27;CREATE TABLE IF NOT EXISTS zipkin_dependencies ( `day` DATE NOT NULL, `parent` VARCHAR(255) NOT NULL, `child` VARCHAR(255) NOT NULL, `call_count` BIGINT, `error_count` BIGINT, PRIMARY KEY (`day`, `parent`, `child`)) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci; docker部署 12345678910docker run -d \\--name zipkin \\-e STORAGE_TYPE=mysql \\-e MYSQL_DB=zipkindb \\-e MYSQL_USER=root \\-e MYSQL_PASS=root \\-e MYSQL_HOST=192.168.56.1 \\-e MYSQL_TCP_PORT=3306 \\-e QUERY_PORT=9411 \\-p 9411:9411 openzipkin/zipkin Jar部署 12345678STORAGE_TYPE=mysql \\MYSQL_DB=zipkindb_jar \\MYSQL_USER=rootMYSQL_PASS=root \\MYSQL_HOST=192.168.56.1 \\MYSQL_TCP_PORT=3306 \\QUERY_PORT=9411nohup java -jar zipkin.jar &gt; zipkin.log 2&gt;&amp;1 &amp; Kubernetes部署 Secret12345678910111213kind: SecretapiVersion: v1metadata: name: secret-zipkin-server namespace: xxx labels: app: secret-zipkin-serverdata: # 数据库账号 username: cm9vdA== # 数据库密码 password: QmRyTWVzQDIwMjBCWkw=type: Opaque Service123456789101112131415161718kind: ServiceapiVersion: v1metadata: name: service-zipkin-server namespace: xxx labels: app: service-zipkin-serverspec: ports: - protocol: TCP port: 9411 targetPort: 9411 # 对外暴露端口 nodePort: 32710 selector: app: zipkin-server type: NodePort sessionAffinity: ClientIP Deployment123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687kind: DeploymentapiVersion: apps/v1metadata: name: deployment-zipkin-server namespace: xxx labels: app: zipkin-serverspec: # 副本数配置 replicas: 3 selector: matchLabels: app: zipkin-server template: metadata: labels: app: zipkin-server spec: containers: - name: container-zipkin-server image: &#x27;openzipkin/zipkin:2.23.2&#x27; # 端口配置 ports: - containerPort: 9411 protocol: TCP # 环境变量配置 env: - name: STORAGE_TYPE value: mysql - name: MYSQL_HOST value: xxx - name: MYSQL_TCP_PORT value: &#x27;xxx&#x27; - name: MYSQL_DB value: xxx - name: MYSQL_USER valueFrom: secretKeyRef: name: secret-zipkin-server key: username - name: MYSQL_PASS valueFrom: secretKeyRef: name: secret-zipkin-server key: password - name: QUERY_PORT value: &#x27;9411&#x27; # 存活探针配置 livenessProbe: tcpSocket: port: 9411 initialDelaySeconds: 120 timeoutSeconds: 1 periodSeconds: 15 successThreshold: 1 failureThreshold: 3 # 就绪探针配置 readinessProbe: tcpSocket: port: 9411 initialDelaySeconds: 10 timeoutSeconds: 1 periodSeconds: 5 successThreshold: 1 failureThreshold: 3 securityContext: privileged: true # 亲和性配置 affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - zipkin-server topologyKey: kubernetes.io/hostname schedulerName: default-scheduler # 更新策略配置 strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 1 maxSurge: 1 开放端口 12firewall-cmd --permanent --zone=public --add-port=9411/tcpsystemctl restart firewalld 4. 项目中使用 pom中引入zipkin依赖，同时子依赖sleuth也会被依赖了 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;&lt;/dependency&gt; properties中配置 12345678# 启动sleuth，默认spring检测到引入了sleuth就会默认启动了spring.sleuth.web.client.enabled=true# trace-id的生成规则spring.sleuth.trace-id128=true# 数据采样比例，默认是0.1，全采样设置为1.0spring.sleuth.sampler.probability=1.0# zipkin服务IPspring.zipkin.base-url=http://192.168.56.104:9411 浏览器输入Zipkin服务地址点击搜索按钮即可看到微服务中的服务调用情况（红色表明有调用异常情况） (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Middleware","slug":"tech/middleware","permalink":"http://gaussli.com/categories/tech/middleware/"},{"name":"Zipkin","slug":"tech/middleware/zipkin","permalink":"http://gaussli.com/categories/tech/middleware/zipkin/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"Docker","slug":"docker","permalink":"http://gaussli.com/tags/docker/"},{"name":"Zipkin","slug":"zipkin","permalink":"http://gaussli.com/tags/zipkin/"},{"name":"二进制安装","slug":"二进制安装","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"}]},{"title":"【Middleware】Showdoc部署及使用","slug":"【middleware】showdoc部署及使用","date":"2021-07-26T14:15:48.000Z","updated":"2021-07-26T15:16:07.405Z","comments":true,"path":"2021/07/26/【middleware】showdoc部署及使用/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90middleware%E3%80%91showdoc%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"官网github：https://github.com/star7th/showdoc offical-website：https://www.showdoc.com.cn/ 简介 官方说明：ShowDoc是一个非常适合IT团队的在线API文档、技术文档工具。通过showdoc，你可以方便地使用markdown语法来书写出美观的API文档、数据字典文档、技术文档、在线excel文档等等。如果不想编辑markdown文档，你还可以利用showdoc的自动化能力，从程序注释中自动生成API文档，或者从搭配的RunApi客户端（类似postman的api调试工具）中一边调试接口、一边自动生成文档。通过分配项目成员和团队成员，你可以很方便地进行项目文档的权限管理和团队协作，也可以分享文档出去给朋友查看。ShowDoc还支持多平台客户端，有win客户端、mac客户端、ios、android等，更方便跨平台使用。目前超过100000+的互联网团队正在使用showdoc，包括知名公司内部的一些团队，比如腾讯、华为、百度、京东、字节跳动等等。 Docker部署1. 安装Docker略 2. 创建数据存储目录123# 新增Showdoc数据存储目录并配置访问权限mkdir -p /usr/local/showDoc/showdoc_data/htmlchmod -R 777 /usr/local/showDoc/showdoc_data 3. 拉取Docker镜像1docker pull star7th/showdoc 4. 启动服务1docker run -d --name showdoc -user=root --privileged=true -p 4999:80 -v /usr/local/showDoc/showdoc_data/html:/var/www/html star7th/showdoc 服务访问直接访问服务地址及端口，默认端口：4999。访问界面截图： 使用直接注册登录使用。注册强烈建议使用BIP账号。 注意事项1. 服务器迁移官方说明：https://www.showdoc.com.cn/help/2511252204165611 如何迁移这里的迁移服务器，指的是：服务器A已经安装好了showdoc， 然后现在要迁移到服务器B去。 首先参考教程，在新服务器上全新安装一个showdoc。推荐使用官方自动脚本或者docker方式安装。 假如你是官方自动脚本或者docker方式安装，那么数据将放在/showdoc_data/html下。复制旧服务器的Sqlite/showdoc.db.php，以及Public/Uploads/下的所有文件（如没有则可忽略之），覆盖到新showdoc目录的相应文件。覆盖后重新给这些文件可写权限. （可选）如果原有文档里已经有上传的图片和附件，换新的域名的时候也许访问不了。可进入数据库把图片附件路径改一下。showdoc使用sqlite数据库。数据库文件是安装目录下的Sqlite/showdoc.db.php。你可以网络搜索如何在命令行中使用 sqlite数据库，或者使用SQLiteStudio等可视化工具。进入数据库后，执行update page set page_content = replace(page_content,’原始host’,’新host’); 和 update upload_file set real_url= replace(real_url,’原始host’,’新host’); 常见误区复制旧服务器文件过去后，忘记给可写权限新服务器本身没有安装好环境，如缺少php-sqlite扩展等直接用新代码覆盖旧代码，而不是按照官方推荐方式去做。服务器转移数据的时候使用FTP。注意，如果使用FTP，应该用二进制模式传输，否则会破坏数据库文件 2. 数据库迁移官方说明：https://www.showdoc.com.cn/help/31990 一些说明mysql版本由于年久失修，已经放弃维护，官方不再保证能迁移成功。现在官方已在全力支持sqlite版本，请使用新版。另外如果你依然强制使用mysql，则可自行二次开发，但官方不提供支持，也请勿浪费时间问官方团队。经过二次开发的版本有可能与官方以后的版本升级冲突导致升级失败，请谨慎考虑 为什么要迁移数据库如果你是早期使用mysql那部分的用户，可以考虑迁移数据库到Sqlite，否则以后无法再使用官方新增的任何功能。ShowDoc使用Sqlite的理由如下： PHP环境默认支持Sqlite，所以只需要安装好PHP环境，即可使用ShowDoc，无须再安装mysql。这对于不懂mysql的开发者（如App开发者）来说会更容易一些。同时方便官方维护ShowDoc，不用维护和测试两个数据库版本 Sqlite的性能并不差，对于总项目数在一万以内的情况，基本不用考虑性能问题。所以完全足够普通公司或者团队的使用。 Sqlite数据库文件放在/Sqlite目录下，迁移和备份都十分简单，直接复制/转移该目录即可 如何迁移备份所有代码和数据库 下载新代码：https://github.com/star7th/showdoc 将新代码中的/Sqlite/ 复制到旧目录(如果已存在/Sqlite则覆盖之)，并赋予/Sqlite/showdoc.db.php可写权限 复制新代码中的server/Application/Home/Controller/UpdateController.class.php 覆盖原来旧的相应文件。 在浏览器访问：http://xxxx.com/index.php?s=/home/update/toSqlite ，看到ok提示后，mysql的数据已经写入/Sqlite/showdoc.db.php 此时，除了/Sqlite/showdoc.db.php文件外，旧目录的其他所有文件全部用新下载的文件覆盖。注意清理runtime缓存以及保留原来文件夹权限的设定。具体哪些文件需要权限，可参考安装手册。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Middleware","slug":"tech/middleware","permalink":"http://gaussli.com/categories/tech/middleware/"},{"name":"Showdoc","slug":"tech/middleware/showdoc","permalink":"http://gaussli.com/categories/tech/middleware/showdoc/"}],"tags":[{"name":"Showdoc","slug":"showdoc","permalink":"http://gaussli.com/tags/showdoc/"},{"name":"Docker","slug":"docker","permalink":"http://gaussli.com/tags/docker/"}]},{"title":"【Middleware】Redis部署及使用","slug":"【middleware】redis部署及使用","date":"2021-07-26T14:07:46.000Z","updated":"2021-07-26T14:13:11.824Z","comments":true,"path":"2021/07/26/【middleware】redis部署及使用/","link":"","permalink":"http://gaussli.com/2021/07/26/%E3%80%90middleware%E3%80%91redis%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"官网github：http://github.com/redis/redis offical-website：https://redis.io/ 民间教程：https://www.runoob.com/redis/redis-tutorial.html 简介 官方说明：Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. Redis在CentOS官方YUM-BASE源仓库中是没有的，但在EPEL源仓库中虽然是有的，但是版本太低了，是个3.x.x的版本（如下图）；而且，Redis官网是已经没有提供二进制包。所以建议使用源码安装。 源码编译安装1. 准备下载应用包 应用包名称 下载地址 redis-6.2.4.tar.gz https://download.redis.io/releases/redis-6.2.4.tar.gz 上传应用包1scp redis-6.2.4.tar.gz root@xxx:/usr/local/src/ 解压应用包12cd /usr/local/srctar -zxvf redis-6.2.4.tar.gz 安装相关工具1yum install -y gcc 切换GCC版本高版本的Redis需要更高版本GCC版本来进行源码编译，所以需要提高GCC版本。当前版本： 1gcc -v 通过工具devtoolset实现GCC版本切换 1234567891011# 安装devtoolset# devtoolset-7对应gcc7.x.x版本# devtoolset-8对应gcc8.x.x版本# devtoolset-9对应gcc9.x.x版本yum install -y centos-release-sclyum install -y devtoolset-7# 切换scl enable devtoolset-7 bash# 或者# source /opt/rh/devtoolset-7/enable 再次查看当前版本： 1gcc -v 2. 源码编译并修改配置文件源码编译12make distcleanmake install 创建相关目录及复制配置文件1234mkdir -p /usr/local/redis/etcmkdir -p /usr/local/redis/logmkdir -p /usr/local/redis/datacp /usr/local/src/redis-6.2.4/redis.conf /usr/local/redis/etc/redis.conf 修改配置文件1vi /usr/local/redis/etc/redis.conf 123456789101112# 监听所有IPbind 0.0.0.0# 启动后台运行模式daemonize yes# 配置进程信息文件路径pidfile /usr/local/redis/redis.pid# 配置日志文件路径logfile /usr/local/redis/log/redis.log# 配置数据持久化路径dir /usr/local/redis/data# 配置访问密钥requirepass xxx 3. 启动服务1redis-server /usr/local/redis/etc/redis.conf 4. 验证服务1234# 查看Redis进程ps -ef | grep redis# 访问Redis服务redis-cli 5. 开放端口12firewall-cmd --zone=public --add-port=6379/tcp --permanentfirewall-cmd --reload 主从配置1. 准备Redis从库安装方式和上述源码编译安装一致，配置文件也一并修改，除了上述的配置属性外，还需要修改下面属性 1vi /usr/local/redis/etc/redis.conf 123456# 配置主库的IP和端口replicaof xxx_ip xxx_port# 配置主库的验证密钥masterauth xxx# 如果从库允许写操作，配置非只读，默认是只读# replica-read-only no 2. 启动从库服务1redis-server /usr/local/redis/etc/redis.conf 哨兵配置1. 创建哨兵服务相关目录及复制哨兵服务配置文件12mkdir -p /usr/local/redis/data-sentinelcp /usr/local/src/redis-6.2.4/sentinel.conf /usr/local/redis/etc/sentinel.conf 2. 修改哨兵服务配置文件1vi /usr/local/redis/etc/sentinel.conf 12345678910111213141516# 监听所有IP或直接禁用保护模式# protected-mode nobind 0.0.0.0# 启动后台运行模式daemonize yes# 配置进程信息文件路径pidfile /usr/local/redis/redis-sentinel.pid# 配置日志文件路径logfile /usr/local/redis/log/redis-sentinel.log# 配置数据持久化路径dir /usr/local/redis/data-sentinel# 配置哨兵服务监听主库的信息# 这里sentinel monitor代表监控；mymaster代表服务器的名称，可以自定义；1代表只有一个或一个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。sentinel monitor mymaster &lt;主库IP&gt; &lt;主库端口&gt; 1# 配置主库验证密钥sentinel auth-pass mymaster xxx 3. 启动哨兵服务1redis-sentinel /usr/local/redis/etc/sentinel.conf 4. 开放哨兵服务端口12firewall-cmd --zone=public --add-port=26379/tcp --permanentfirewall-cmd --reload Redis服务开机自启动1. 配置自启动文件1vi /usr/local/redis/etc/redis.service 1234567891011121314[Unit]Description=Redis-ServerAfter=network.target[Service]Type=forkingPIDFile=/usr/local/redis/redis.pidExecStart=/usr/local/bin/redis-server /usr/local/redis/etc/redis.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/usr/local/bin/redis-cli -p `cat /usr/local/redis/etc/redis.conf | egrep &#x27;^port&#x27; | awk &#x27;&#123;print $2&#125;&#x27;` -a `cat /usr/local/redis/etc/redis.conf | egrep &#x27;^requirepass&#x27; | awk &#x27;&#123;print $2&#125;&#x27;` SHUTDOWNPrivateTmp=true[Install]WantedBy=multi-user.target 2. 软链到系统服务目录1ln -s /usr/local/redis/etc/redis.service /etc/systemd/system/ 3. 设置开机自启并启动服务12systemctl enable redis.servicesystemctl start redis.service 4. 查看服务状态1systemctl status redis.service 结果截图： 哨兵服务开机自启动1. 配置自启动文件1vi /usr/local/redis/etc/redis-sentinel.service 1234567891011121314[Unit]Description=Redis-Sentinel-ServerAfter=network.target redis.service[Service]Type=forkingPIDFile=/usr/local/redis/redis-sentinel.pidExecStart=/usr/local/bin/redis-sentinel /usr/local/redis/etc/sentinel.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/usr/local/bin/redis-cli -p `cat /usr/local/redis/etc/sentinel.conf | egrep &#x27;^port&#x27; | awk &#x27;&#123;print $2&#125;&#x27;` SHUTDOWNPrivateTmp=true[Install]WantedBy=multi-user.target 2. 软链到系统服务目录1ln -s /usr/local/redis/etc/redis-sentinel.service /etc/systemd/system/ 3. 设置开机自启并启动服务12systemctl enable redis-sentinel.servicesystemctl start redis-sentinel.service 4. 查看服务状态1systemctl status redis-sentinel.service 结果截图： SpringBoot中使用1. 引入依赖12345678910&lt;!-- SpringBoot-Redis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- Redis池化技术依赖此包 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;&lt;/dependency&gt; 2. 修改SpringBoot配置文件（application.yml或application.properties）单服务Redis1234567891011# 配置Redis信息spring.redis.host = &lt;Redis服务IP&gt;spring.redis.port = &lt;Redis服务端口&gt;spring.redis.password = &lt;Redis验证密钥&gt;spring.redis.database = &lt;Redis数据库索引（0-15）&gt;spring.redis.timeout = 20000spring.redis.lettuce.pool.max-active = 8spring.redis.lettuce.pool.min-idle = 1spring.redis.lettuce.pool.max-idle = 8spring.redis.lettuce.pool.max-wait = 600000msspring.redis.lettuce.pool.time-between-eviction-runs = 900000ms 哨兵模式Redis1234567891011# 配置Redis信息spring.redis.database = &lt;Redis数据库索引（0-15）&gt;spring.redis.timeout = 20000spring.redis.lettuce.pool.max-active = 8spring.redis.lettuce.pool.min-idle = 1spring.redis.lettuce.pool.max-idle = 8spring.redis.lettuce.pool.max-wait = 600000msspring.redis.lettuce.pool.time-between-eviction-runs = 900000ms# 配置Redis哨兵服务信息spring.redis.sentinel.master = &lt;哨兵配置文件配置的主库服务名，默认是mymaster&gt;spring.redis.sentinel.nodes = &lt;哨兵服务IP1&gt;, &lt;哨兵服务IP2&gt; 3. 注入RedisTemplate或StringRedisTemplate对象1234@Autowiredprivate RedisTemplate&lt;String, Object&gt; redisTemplate;@Autowiredprivate StringRedisTemplate stringRedisTemplate; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Middleware","slug":"tech/middleware","permalink":"http://gaussli.com/categories/tech/middleware/"}],"tags":[{"name":"源码安装","slug":"源码安装","permalink":"http://gaussli.com/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"},{"name":"Redis","slug":"redis","permalink":"http://gaussli.com/tags/redis/"}]},{"title":"XXL-JOB部署及使用","slug":"xxl-job部署及使用","date":"2021-07-26T08:36:44.000Z","updated":"2021-07-26T15:12:21.769Z","comments":true,"path":"2021/07/26/xxl-job部署及使用/","link":"","permalink":"http://gaussli.com/2021/07/26/xxl-job%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"官网github：https://github.com/xuxueli/xxl-job offical-website：http://www.xuxueli.com/xxl-job/ 简介 官方说明：XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。 Kubernetes方式安装修改其中&lt;namespace-name&gt;、&lt;mysql-username&gt;、&lt;mysql-password&gt;、&lt;mysql-url&gt;、&lt;xxl-job-accesstoken&gt;、&lt;xxl-job-admin-outside-port&gt;的内容。其中&lt;mysql-username&gt;、&lt;mysql-password&gt;、&lt;xxl-job-accesstoken&gt;的内容需要进行Base64编码；&lt;xxl-job-admin-outside-port&gt;为XXL-JOB-ADMIN服务向外暴露端口，Kubernetes默认可向外暴露端口范围为30000-32767。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129---# secret for xxl-job-admin-serverkind: SecretapiVersion: v1metadata: name: secret-xxl-job-admin-server namespace: &lt;namespace-name&gt; labels: app: secret-xxl-job-admin-serverdata: datasource_username: &lt;mysql-username&gt; datasource_password: &lt;mysql-password&gt; xxl_job_accesstoken: &lt;xxl-job-accesstoken&gt;type: Opaque---# headless service for xxl-job-adminkind: ServiceapiVersion: v1metadata: name: service-xxl-job-admin-server-headless namespace: &lt;namespace-name&gt; labels: app: service-xxl-job-admin-server-headlessspec: ports: - protocol: TCP port: 8080 targetPort: 8080 selector: app: xxl-job-admin-server type: ClusterIP clusterIP: None sessionAffinity: ClientIP---# service for xxl-job-adminkind: ServiceapiVersion: v1metadata: name: service-xxl-job-admin-server namespace: &lt;namespace-name&gt; labels: app: service-xxl-job-admin-serverspec: ports: - protocol: TCP port: 8080 targetPort: 8080 nodePort: &lt;xxl-job-admin-outside-port&gt; selector: app: xxl-job-admin-server type: NodePort sessionAffinity: ClientIP---# statefulset for xxl-job-adminkind: StatefulSetapiVersion: apps/v1metadata: name: statefulset-xxl-job-admin-server namespace: &lt;namespace-name&gt; labels: app: xxl-job-admin-serverspec: serviceName: service-xxl-job-admin-server-headless replicas: 3 selector: matchLabels: app: xxl-job-admin-server updateStrategy: type: RollingUpdate template: metadata: labels: app: xxl-job-admin-server spec: # 亲和性定义 affinity: # 非亲和性策略 podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - xxl-job-admin-server topologyKey: kubernetes.io/hostname containers: - name: container-xxl-job-admin-server image: &#x27;xuxueli/xxl-job-admin:2.3.0&#x27; ports: - containerPort: 8080 protocol: TCP # 环境变量 env: - name: SPRING_DATASOURCE_URL value: &quot;&lt;mysql-url&gt;&quot; - name: SPRING_DATASOURCE_USERNAME valueFrom: secretKeyRef: name: secret-xxl-job-admin-server key: datasource_username - name: SPRING_DATASOURCE_PASSWORD valueFrom: secretKeyRef: name: secret-xxl-job-admin-server key: datasource_password - name: XXL_JOB_ACCESSTOKEN valueFrom: secretKeyRef: name: secret-xxl-job-admin-server key: xxl_job_accesstoken # 存活探针 livenessProbe: tcpSocket: port: 8080 initialDelaySeconds: 120 periodSeconds: 10 # 就绪探针 readinessProbe: tcpSocket: port: 8080 initialDelaySeconds: 10 periodSeconds: 5 # 镜像拉取策略 imagePullPolicy: IfNotPresent # 重启策略 restartPolicy: Always 服务访问直接访问XXL-JOB-ADMIN服务对外的端口，账号密码默认为：admin/123456访问界面截图： SpringBoot中使用1. 引入依赖注意版本强烈建议和部署的服务版本一致 12345&lt;dependency&gt; &lt;groupId&gt;com.xuxueli&lt;/groupId&gt; &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt; &lt;version&gt;$&#123;xxl-job.version&#125;&lt;/version&gt;&lt;/dependency&gt; 2. 修改SpringBoot配置文件（application.yml或application.properties）12345678910111213141516## 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；xxl.job.admin.addresses = http://&lt;IP:PORT&gt;/xxl-job-admin## 执行器通讯TOKEN [选填]：非空时启用；xxl.job.accessToken = &lt;xxl-job-accesstoken&gt;# xxl-job执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册xxl.job.executor.appname = &lt;executor-xxx&gt;## 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；xxl.job.executor.port = 9999## 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。xxl.job.executor.address =## 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；xxl.job.executor.ip =## 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；xxl.job.executor.logpath = log/xxl-job/jobhandler## 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；xxl.job.executor.logretentiondays = 30 3. 使用注解@XxlJob(&quot;&lt;executor-xxx&gt;&quot;)执行定时任务逻辑123456789@Componentpublic class DemoXxlJob &#123; @XxlJob(&quot;&lt;executor-xxx&gt;&quot;) public ReturnT&lt;String&gt; demoJobHandler(String param) throws Exception &#123; //TODO 具体的定时任务逻辑 return ReturnT.SUCCESS; &#125;&#125; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Middleware","slug":"tech/middleware","permalink":"http://gaussli.com/categories/tech/middleware/"},{"name":"xxl-job","slug":"tech/middleware/xxl-job","permalink":"http://gaussli.com/categories/tech/middleware/xxl-job/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"xxl-job","slug":"xxl-job","permalink":"http://gaussli.com/tags/xxl-job/"},{"name":"任务调度","slug":"任务调度","permalink":"http://gaussli.com/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"},{"name":"分布式","slug":"分布式","permalink":"http://gaussli.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"}]},{"title":"Apollo部署及使用","slug":"apollo部署及使用","date":"2021-07-26T08:28:16.000Z","updated":"2021-07-26T15:11:38.067Z","comments":true,"path":"2021/07/26/apollo部署及使用/","link":"","permalink":"http://gaussli.com/2021/07/26/apollo%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"官网github: https://github.com/ctripcorp/apollo/ official-website: https://www.apolloconfig.com/ 简介 官方说明：Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。 Apollo分为三个部分，Apollo-configservice、Apollo-adminservice、Apollo-portal。其中configservice和adminservice构成配置管理的服务，同时configservice作为Eureka服务器提供服务发现的能力，部署在同一台服务器上；portal是Apollo的web管理端服务，可单独部署在不同的服务器上。 脚本方式安装当前部署是三个服务都部署在同一台服务器上。 1. 准备安装JDK略 下载应用包 应用包名称 下载地址 apollo-configservice-1.8.1-github.zip https://github.com/ctripcorp/apollo/releases/download/v1.8.1/apollo-configservice-1.8.1-github.zip apollo-adminservice-1.8.1-github.zip https://github.com/ctripcorp/apollo/releases/download/v1.8.1/apollo-adminservice-1.8.1-github.zip apollo-portal-1.8.1-github.zip https://github.com/ctripcorp/apollo/releases/download/v1.8.1/apollo-portal-1.8.1-github.zip apolloconfigdb.sql https://github.com/ctripcorp/apollo/blob/v1.8.1/scripts/sql/apolloconfigdb.sql apolloportaldb.sql https://github.com/ctripcorp/apollo/blob/v1.8.1/scripts/sql/apolloportaldb.sql 上传应用包123scp apollo-configservice-1.8.1-github.zip root@xxx:/usr/local/src/scp apollo-adminservice-1.8.1-github.zip root@xxx:/usr/local/src/scp apollo-portal-1.8.1-github.zip root@xxx:/usr/local/src/ 安装zip解压工具1yum install -y unzip 解压应用包1234cd /usr/local/srcunzip -d apollo-configservice apollo-configservice-1.8.1-github.zipunzip -d apollo-adminservice apollo-adminservice-1.8.1-github.zipunzip -d apollo-portal apollo-portal-1.8.1-github.zip 移动到安装目录（/usr/local/apollo）1234mkdir -p /usr/local/apollomv /usr/local/src/apollo-configservice /usr/local/apollo/apollo-configservicemv /usr/local/src/apollo-adminservice /usr/local/apollo/apollo-adminservicemv /usr/local/src/apollo-portal /usr/local/apollo/apollo-portal 2. 创建数据库创建apolloconfigdb数据库123# MySQL命令行中# 注意下载的sql文件已包含创建数据库的sql语句，按需修改source apolloconfigdb.sql; 创建apolloportaldb数据库123# MySQL命令行中# 注意下载的sql文件已包含创建数据库的sql语句，按需修改source apolloportaldb.sql; 3. 部署apollo-configservice服务配置数据库参数12# 修改spring.datasource.url、spring.datasource.username、spring.datasource.password三个参数vi /usr/local/apollo/apollo-configservice/config/application-github.properties 启动apollo-configservice服务1sh /usr/local/apollo/apollo-configservice/scripts/startup.sh 结果截图： 查看apollo-configservice运行日志目录1tail -f /opt/logs/100003171/apollo-configservice.log 4. 部署apollo-adminservice配置数据库参数12# 修改spring.datasource.url、spring.datasource.username、spring.datasource.password三个参数vi /usr/local/apollo/apollo-adminservice/config/application-github.properties 启动apollo-adminservice服务1sh /usr/local/apollo/apollo-adminservice/scripts/startup.sh 结果截图： 查看apollo-adminservice运行日志目录1tail -f /opt/logs/100003172/apollo-adminservice.log 5. 部署apollo-portal服务配置数据库参数12# 修改spring.datasource.url、spring.datasource.username、spring.datasource.password三个参数vi /usr/local/apollo/apollo-portal/config/application-github.properties 配置portal服务所管理的环境根据Apollo官方的部署方案，portal服务是同时管理各个环境下的Apollo-Config，所以需要指定portal服务能管理的环境参数以及对应的config服务地址 12# 指定portal服务所管理的环境参数vi /usr/local/apollo/apollo-portal/config/application-github.properties 12## vi中添加所管理的环境参数，多个参数逗号（,）隔开。（下面参数值只是例子，按需修改）apollo.portal.envs = DEV,UAT 12# 配置对应的config服务地址vi /usr/local/apollo/apollo-portal/config/apollo-env.properties 123## 修改dev.meta和uat.meta的值，此处配置的服务地址需和apollo.portal.envs参数值对应（下面参数值只是例子，按需修改）dev.meta=http://fill-in-dev-meta-server:8080uat.meta=http://fill-in-uat-meta-server:8080 启动apollo-portal服务1sh /usr/local/apollo/apollo-portal/scripts/startup.sh 结果截图： 查看apollo-adminservice运行日志目录1tail -f /opt/logs/100003173/apollo-portal.log 6. 开放端口123firewall-cmd --zone=public --add-port=8080/tcp --permanentfirewall-cmd --zone=public --add-port=8070/tcp --permanentfirewall-cmd --reload 7. 服务停止apollo-configservice服务停止1sh /usr/local/apollo/apollo-configservice/scripts/shutdown.sh apollo-adminservice服务停止1sh /usr/local/apollo/apollo-adminservice/scripts/shutdown.sh apollo-portal服务停止1sh /usr/local/apollo/apollo-portal/scripts/shutdown.sh Kuebrnetes方式安装1. 创建数据库和脚本方式安装中创建数据库步骤一致 2. 部署apollo-configservice服务修改其中&lt;namespace-name&gt;、&lt;mysql-username&gt;、&lt;mysql-password&gt;、&lt;mysql-url&gt;的内容。其中&lt;mysql-username&gt;、&lt;mysql-password&gt;的内容需要进行Base64编码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152---# secret for apollo-config-serverkind: SecretapiVersion: v1metadata: name: secret-apollo-config-server-mysql namespace: &lt;namespace-name&gt; labels: app: secret-apollo-config-server-mysqldata: username: &lt;mysql-username&gt; password: &lt;mysql-password&gt;type: Opaque---# configmap for apollo-config-serverkind: ConfigMapapiVersion: v1metadata: namespace: &lt;namespace-name&gt; name: configmap-apollo-config-serverdata: application-github.properties: | spring.datasource.url = jdbc:mysql://service-mysql-for-apollo-env:3306/ProdApolloConfigDB?characterEncoding=utf8 spring.datasource.username = FillInCorrectUser spring.datasource.password = FillInCorrectPassword # 根据statefulset-apollo-config-server的副本数按需修改 eureka.service.url = http://statefulset-apollo-config-server-0.service-apollo-meta-server:8080/eureka/,http://statefulset-apollo-config-server-1.service-apollo-meta-server:8080/eureka/,http://statefulset-apollo-config-server-2.service-apollo-meta-server:8080/eureka/---# service for apollo-metakind: ServiceapiVersion: v1metadata: namespace: &lt;namespace-name&gt; name: service-apollo-meta-server labels: app: service-apollo-meta-serverspec: ports: - protocol: TCP port: 8080 targetPort: 8080 selector: app: apollo-config-server type: ClusterIP clusterIP: None sessionAffinity: ClientIP---# service for apollo-configkind: ServiceapiVersion: v1metadata: namespace: &lt;namespace-name&gt; name: service-apollo-config-server labels: app: service-apollo-config-serverspec: ports: - protocol: TCP port: 8080 targetPort: 8080 selector: app: apollo-config-server type: ClusterIP sessionAffinity: ClientIP---# statefulset for apollo-configkind: StatefulSetapiVersion: apps/v1metadata: namespace: &lt;namespace-name&gt; name: statefulset-apollo-config-server labels: app: apollo-config-serverspec: serviceName: service-apollo-meta-server replicas: 3 selector: matchLabels: app: apollo-config-server updateStrategy: type: RollingUpdate template: metadata: labels: app: apollo-config-server spec: # 亲和性定义 affinity: # 非亲和性策略 podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - apollo-config-server topologyKey: kubernetes.io/hostname # 存储资源定义 volumes: - name: volume-configmap-apollo-config-server configMap: name: configmap-apollo-config-server items: - key: application-github.properties path: application-github.properties containers: - image: apolloconfig/apollo-configservice:1.8.1 securityContext: privileged: true # 镜像拉取策略 imagePullPolicy: IfNotPresent name: container-apollo-config-server ports: - protocol: TCP containerPort: 8080 # 存储资源挂载 volumeMounts: - name: volume-configmap-apollo-config-server mountPath: /apollo-configservice/config/application-github.properties subPath: application-github.properties # 环境变量 env: - name: SPRING_DATASOURCE_URL value: &quot;&lt;mysql-url&gt;&quot; - name: SPRING_DATASOURCE_USERNAME valueFrom: secretKeyRef: name: secret-apollo-config-server-mysql key: username - name: SPRING_DATASOURCE_PASSWORD valueFrom: secretKeyRef: name: secret-apollo-config-server-mysql key: password # 就绪探针 readinessProbe: tcpSocket: port: 8080 initialDelaySeconds: 60 periodSeconds: 10 # 存活探针 livenessProbe: tcpSocket: port: 8080 initialDelaySeconds: 300 periodSeconds: 10 dnsPolicy: ClusterFirst # 重启策略 restartPolicy: Always 3. 部署apollo-adminservice服务修改其中&lt;namespace-name&gt;、&lt;mysql-url&gt;的内容。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126---# configmap for apollo-admin-serverkind: ConfigMapapiVersion: v1metadata: namespace: &lt;namespace-name&gt; name: configmap-apollo-admin-serverdata: application-github.properties: | spring.datasource.url = jdbc:mysql://service-mysql-for-apollo-env:3306/ProdApolloConfigDB?characterEncoding=utf8 spring.datasource.username = FillInCorrectUser spring.datasource.password = FillInCorrectPassword # 根据statefulset-apollo-config-server的副本数按需修改 eureka.service.url = http://statefulset-apollo-config-server-0.service-apollo-meta-server:8080/eureka/,http://statefulset-apollo-config-server-1.service-apollo-meta-server:8080/eureka/,http://statefulset-apollo-config-server-2.service-apollo-meta-server:8080/eureka/---# service for apollo-adminkind: ServiceapiVersion: v1metadata: namespace: &lt;namespace-name&gt; name: service-apollo-admin-server labels: app: service-apollo-admin-serverspec: ports: - protocol: TCP port: 8090 targetPort: 8090 selector: app: apollo-admin-server type: ClusterIP sessionAffinity: ClientIP---# deployment for apollo-adminkind: DeploymentapiVersion: apps/v1metadata: namespace: &lt;namespace-name&gt; name: deployment-apollo-admin-server labels: app: apollo-admin-serverspec: replicas: 3 selector: matchLabels: app: apollo-admin-server strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate template: metadata: labels: app: apollo-admin-server spec: # 亲和性定义 affinity: # 非亲和性策略 podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - apollo-admin-server topologyKey: kubernetes.io/hostname # 存储资源定义 volumes: - name: volume-configmap-apollo-admin-server configMap: name: configmap-apollo-admin-server items: - key: application-github.properties path: application-github.properties # 初始容器 initContainers: - image: dwdraju/alpine-curl-jq name: check-service-apollo-config-server command: [&#x27;bash&#x27;, &#x27;-c&#x27;, &quot;curl --connect-timeout 2 --max-time 5 --retry 50 --retry-delay 1 --retry-max-time 120 service-apollo-config-server:8080&quot;] containers: - image: apolloconfig/apollo-adminservice:1.8.1 securityContext: privileged: true # 镜像拉取策略 imagePullPolicy: IfNotPresent name: container-apollo-admin-server ports: - protocol: TCP containerPort: 8090 # 存储资源挂载 volumeMounts: - name: volume-configmap-apollo-admin-server mountPath: /apollo-adminservice/config/application-github.properties subPath: application-github.properties # 环境变量 env: - name: SPRING_DATASOURCE_URL value: &quot;&lt;mysql-url&gt;&quot; - name: SPRING_DATASOURCE_USERNAME valueFrom: secretKeyRef: name: secret-apollo-config-server-mysql key: username - name: SPRING_DATASOURCE_PASSWORD valueFrom: secretKeyRef: name: secret-apollo-config-server-mysql key: password # 就绪探针 readinessProbe: tcpSocket: port: 8090 initialDelaySeconds: 60 periodSeconds: 10 # 存活探针 livenessProbe: tcpSocket: port: 8090 initialDelaySeconds: 300 periodSeconds: 10 dnsPolicy: ClusterFirst restartPolicy: Always 4. 部署apollo-portal服务修改其中&lt;namespace-name&gt;、&lt;mysql-username&gt;、&lt;mysql-password&gt;、&lt;mysql-url&gt;、&lt;apollo-portal-outside-port&gt;的内容。其中&lt;mysql-username&gt;、&lt;mysql-password&gt;的内容需要进行Base64编；&lt;apollo-portal-outside-port&gt;为Portal向外暴露端口，Kubernetes默认可向外暴露端口范围为30000-32767。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157---# secret for apollo-portal-serverkind: SecretapiVersion: v1metadata: name: secret-apollo-portal-server-mysql namespace: &lt;namespace-name&gt; labels: app: secret-apollo-portal-server-mysqldata: username: &lt;mysql-username&gt; password: &lt;mysql-password&gt;type: Opaque---# configmap for apollo-portal-serverkind: ConfigMapapiVersion: v1metadata: namespace: &lt;namespace-name&gt; name: configmap-apollo-portal-serverdata: application-github.properties: | spring.datasource.url = jdbc:mysql://service-mysql-for-portal-server:3306/ApolloPortalDB?characterEncoding=utf8 spring.datasource.username = FillInCorrectUser spring.datasource.password = FillInCorrectPassword # 指定访问前缀 server.servlet.context-path = /apollo apollo-env.properties: | dev.meta=http://fill-in-dev-meta-server:8080 fat.meta=http://fill-in-fat-meta-server:8080 uat.meta=http://fill-in-uat-meta-server:8080 lpt.meta=http://fill-in-lpt-meta-server:8080 pro.meta=http://fill-in-pro-meta-server:8080---# service for apollo-portalkind: ServiceapiVersion: v1metadata: namespace: &lt;namespace-name&gt; name: service-apollo-portal-server labels: app: service-apollo-portal-serverspec: ports: - protocol: TCP port: 8070 targetPort: 8070 nodePort: &lt;apollo-portal-outside-port&gt; selector: app: apollo-portal-server type: NodePort sessionAffinity: ClientIP---# deployment for apollo-portalkind: DeploymentapiVersion: apps/v1metadata: namespace: &lt;namespace-name&gt; name: deployment-apollo-portal-server labels: app: apollo-portal-serverspec: replicas: 3 selector: matchLabels: app: apollo-portal-server strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 type: RollingUpdate template: metadata: labels: app: apollo-portal-server spec: # 亲和性定义 affinity: # 非亲和性策略 podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - apollo-portal-server topologyKey: kubernetes.io/hostname # 存储资源定义 volumes: - name: volume-configmap-apollo-portal-server configMap: name: configmap-apollo-portal-server items: - key: application-github.properties path: application-github.properties - key: apollo-env.properties path: apollo-env.properties # 初始容器 initContainers: # 确保 apollo-admin 正常提供服务 - image: dwdraju/alpine-curl-jq name: check-service-apollo-admin-server-dev command: [&#x27;bash&#x27;, &#x27;-c&#x27;, &quot;curl --connect-timeout 2 --max-time 5 --retry 60 --retry-delay 1 --retry-max-time 120 service-apollo-admin-server.&lt;namespace-name&gt;:8090&quot;] containers: - image: apolloconfig/apollo-portal:1.8.1 securityContext: privileged: true # 镜像拉取策略 imagePullPolicy: IfNotPresent name: container-apollo-portal-server ports: - protocol: TCP containerPort: 8070 # 存储资源挂载 volumeMounts: - name: volume-configmap-apollo-portal-server mountPath: /apollo-portal/config/application-github.properties subPath: application-github.properties - name: volume-configmap-apollo-portal-server mountPath: /apollo-portal/config/apollo-env.properties subPath: apollo-env.properties # 环境变量 env: - name: SPRING_DATASOURCE_URL value: &quot;&lt;mysql-url&gt;&quot; - name: SPRING_DATASOURCE_USERNAME valueFrom: secretKeyRef: name: secret-apollo-portal-server-mysql key: username - name: SPRING_DATASOURCE_PASSWORD valueFrom: secretKeyRef: name: secret-apollo-portal-server-mysql key: password - name: APOLLO_PORTAL_ENVS value: &#x27;dev&#x27; - name: DEV_META value: &#x27;http://service-apollo-config-server.&lt;namespace-name&gt;:8080&#x27; # 就绪探针 readinessProbe: tcpSocket: port: 8070 initialDelaySeconds: 60 periodSeconds: 10 # 存活探针 livenessProbe: tcpSocket: port: 8070 initialDelaySeconds: 300 periodSeconds: 10 dnsPolicy: ClusterFirst # 重启策略 restartPolicy: Always 服务访问直接访问Portal服务对外的端口，账号密码默认为：apollo/admin访问界面截图： SpringBoot中使用1. 引入依赖注意版本强烈建议和部署的服务版本一致 12345&lt;dependency&gt; &lt;groupId&gt;com.ctrip.framework.apollo&lt;/groupId&gt; &lt;artifactId&gt;apollo-client&lt;/artifactId&gt; &lt;version&gt;$&#123;apollo-client.version&#125;&lt;/version&gt;&lt;/dependency&gt; 2. 修改SpringBoot配置文件（application.yml或application.properties）123456app.id=xxxapollo.meta=xxxapollo.cluster=xxxapollo.bootstrap.enabled=trueapollo.bootstrap.eagerLoad.enabled = trueapollo.bootstrap.namespaces=xxx 注意事项如何修改apollo-portal服务中的部门列表Apollo-Portal服务中的部门列表数据是直接存储在数据库中的，页面上不能进行修改，所以需要在创建apolloportaldb的时候按需进行修改，数据表名称是ServerConfig，字段是organizations，内容为json格式数据，可根据官方数据修改即可。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Middleware","slug":"tech/middleware","permalink":"http://gaussli.com/categories/tech/middleware/"},{"name":"Apollo","slug":"tech/middleware/apollo","permalink":"http://gaussli.com/categories/tech/middleware/apollo/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"脚本安装","slug":"脚本安装","permalink":"http://gaussli.com/tags/%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"},{"name":"Apollo","slug":"apollo","permalink":"http://gaussli.com/tags/apollo/"}]},{"title":"软件源镜像源国内加速整理","slug":"软件源镜像源国内加速整理","date":"2021-07-26T08:21:35.000Z","updated":"2022-01-16T07:33:58.597Z","comments":true,"path":"2021/07/26/软件源镜像源国内加速整理/","link":"","permalink":"http://gaussli.com/2021/07/26/%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%95%9C%E5%83%8F%E6%BA%90%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F%E6%95%B4%E7%90%86/","excerpt":"","text":"各大互联网厂商的YUM软件源官网阿里http://mirrors.aliyun.com/ 腾讯https://mirrors.cloud.tencent.com/ 华为https://mirrors.huaweicloud.com/ 网易https://mirrors.163.com/ 清华大学https://mirrors.tuna.tsinghua.edu.cn/ Docker镜像源配置12345678mkdir -p /etc/dockercat &lt;&lt; EOF &gt; /etc/docker/daemon.json&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.cn-hangzhou.aliyuncs.com&quot;]&#125;EOFsystemctl daemon-reloadsystemctl restart docker 网易https://hub-mirror.c.163.com 阿里阿里有两种方式的镜像加速，一是个人账号能配置一个镜像加速，二是使用registry.cn-hangzhou.aliyuncs.com域名，两种方式都需要登录账号查看相关内容https://registry.cn-hangzhou.aliyuncs.com (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"Linux","slug":"linux","permalink":"http://gaussli.com/tags/linux/"},{"name":"YUM","slug":"yum","permalink":"http://gaussli.com/tags/yum/"},{"name":"Docker","slug":"docker","permalink":"http://gaussli.com/tags/docker/"},{"name":"代理源","slug":"代理源","permalink":"http://gaussli.com/tags/%E4%BB%A3%E7%90%86%E6%BA%90/"}]},{"title":"[J2EE]SpringMVC中WebApplicationContext的相关配置笔记","slug":"j2ee-springmvc中webapplicationcontext的相关配置笔记","date":"2019-08-12T09:48:50.000Z","updated":"2021-07-26T15:14:47.507Z","comments":true,"path":"2019/08/12/j2ee-springmvc中webapplicationcontext的相关配置笔记/","link":"","permalink":"http://gaussli.com/2019/08/12/j2ee-springmvc%E4%B8%ADwebapplicationcontext%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/","excerpt":"","text":"WebApplicationContext中特殊的Bean handler mapping：处理映射器。预处理器、后处理器和控制器的列表，他们在符合某种条件下才被执行（例如符合控制器指定的URL） controller(s)：控制器。作为MVC三层的一部分，提供具体功能（或者至少能够访问具体功能）的Bean view resolver：视图解析器。能够解析视图名，在DispatcherServlet解析视图时使用 locale resolver：本地化信息解析器。能够解析用户正在使用的本地化信息，以提供国际化视图 theme resolver：主题解析器。能够解析Web应用所使用的主题，比如提供个性化的布局 multipart file resolver：分段文件解析器。提供HTML表单文件上传功能 handlerexception resolver：处理器异常解析器。将异常对应到视图，或者实现某种复杂的异常处理代码 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"SpringMVC","slug":"springmvc","permalink":"http://gaussli.com/tags/springmvc/"},{"name":"xml","slug":"xml","permalink":"http://gaussli.com/tags/xml/"}]},{"title":"[J2EE]Spring中Bean的生命周期","slug":"j2ee-spring中bean的生命周期","date":"2019-08-12T09:30:51.000Z","updated":"2021-07-26T15:14:50.410Z","comments":true,"path":"2019/08/12/j2ee-spring中bean的生命周期/","link":"","permalink":"http://gaussli.com/2019/08/12/j2ee-spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","excerpt":"","text":"在Spring容器初始化的时候，Spring帮我们的Bean做了很多的工作，下图看看Bean从初始化到销毁的生命周期： 具体的流程步骤说明： Spring实例化Bean 利用依赖注入来配置Bean中的所有属性值 如果Bean实现了BeanNameAware接口，则Spring调用Bean的setBeanName()方法传入当前Bean的ID值 如果Bean实现了BeanFactoryAware接口，则Spring调用setBeanFactory()方法传入当前工厂实例的引用 如果Bean实现了ApplicationContextAware接口，则Spring调用setApplicationContext()方法传入当前ApplicationContext实例的引用 如果Bean实现了BeanPostProcessor接口，则Spring会调用postProcessBeforeInitialization()方法 如果Bean实现了InitializingBean接口，则Spring会调用afterPropertiesSet()方法 如果在配置文件中用过init-method属性制定了初始化方法，则调用该初始化方法 如果Bean实现了BeanPostProcessor接口，则Spring会调用postProcessAfterInitialization()方法 到此为止，Bean就可以被使用了，他将一直存在于Spring容器中直到被销毁 如果Bean实现了DisposableBean接口，则Spring会调用destory()方法 如果在配置文件中用过destory-method属性指定了销毁Bean的方法，则调用该方法 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"Spring","slug":"spring","permalink":"http://gaussli.com/tags/spring/"},{"name":"Bean","slug":"bean","permalink":"http://gaussli.com/tags/bean/"},{"name":"生命周期","slug":"生命周期","permalink":"http://gaussli.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"name":"life cycle","slug":"life-cycle","permalink":"http://gaussli.com/tags/life-cycle/"}]},{"title":"[J2EE]Spring框架的一些笔记","slug":"j2ee-spring框架的一些笔记","date":"2019-08-11T21:04:26.000Z","updated":"2021-07-26T15:14:52.965Z","comments":true,"path":"2019/08/12/j2ee-spring框架的一些笔记/","link":"","permalink":"http://gaussli.com/2019/08/12/j2ee-spring%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/","excerpt":"","text":"0. 全景图 本文说明的Spring Framework版本：4.3.25.RELEASE Spring框架由20个模块组成，这些模块被分成组，分别为： 核心容器（Core Container） AOP（Aspect Oriented Programming） Instrumentation 消息（Messaging） 数据访问/集成（Data Access/Integration） 网站（Web） 测试（Test） 1. 核心容器（Core Container）由以下模块组成： spring-core：框架的基础部分，提供IoC/DI能力 spring-beans：运用工厂模式实现BeanFactory功能 spring-context：基于Core和Beans模块，提供一套对象访问的方法，以及提供一些额外的能力支持，如国际化（internationalization）、事件传递（event propagation）、资源加载（resource loading）、构造容器上下文（Servlet container）；同时也支持Java EE的特性，如EJB、JMX以及基础远程调用（basic remoting） spring-context-support：提供普通第三方包的整合支持，如缓存能力（EhCache、Guava、JCache）、邮件能力（JavaMail）、定时服务（CommonJ、QuartZ）以及模版引擎（FreeMarker、JasperReports、Velocity） spring-expression：提供强大的表达式语言能力 2. AOP spring-aop：提供AOP能力 spring-aspects：提供AspectJ的集成 3. Instrumentation spring-instrument：提供用于某些应用程序服务器的类级工具和类加载器的实现 spring-instrument-tomcat：Spring‘s instrumentation agent for Tomcat 4. Messaging spring-messaging：提供消息协议支持的能力，包括Message，MessageChannel，MessageHandler 5. Data Access/Integration由JDBC、ORM、OXM、JMS和Transaction模块组成 spring-jdbc：提供一个JDBC操作的抽象层，减少JDBC操作代码以及解析不同数据库厂商的错误代码 spring-tx：提供事务管理的能力 spring-orm：提供一些orm框架的支持，如JPA、JDO、Hibernate spring-oxm：提供一些xml对象映射框架（oxm）的支持，如JAXB、Castor、XMLBeans、JiBX、XStream spring-jms：提供Java消息服务的支持，在Spring 4.1之后，该模块已经集成到spring-messaging模块中去了 6. Web（网站）由spring-web、spirng-webmvc、spring-websocket和spring-webmvc-portlet组成 spring-web：提供web应用需要的基础能力，如多文件上传、使用Servlet监听器初始化IoC上下文容器 spring-webmvc：大名鼎鼎的springmvc框架 spring-websocket：提供和websocket相关的能力 spring-webmvc-portlet 7. Test（测试） spring-test：提供单元测试和集成测试相关能力（JUnit或TestNG） 8. 唯一硬性外部依赖spring一直保持最小化的外部依赖，唯一硬性的外部依赖就是Logging了，不额外引入的话就使用JDK中的java.util.logging来打印日志了。 spring-core中依赖了common-logging，这个只是一个日志门面，没有具体实现，可以引入Log4j、LogBack等日志实现框架。其中Log4j1.2版本已经进入EOL阶段了，Log4j2.3版本也兼容到最高java6版本，所以现在推荐使用Log4j2.4以上的版本。 当然，如果不想用JCL日志门面，也可以换成SLF4j，不过要做日志的桥接，而且把spring-core中common-logging依赖exclude掉。这时用LogBack就最舒服了，因为LogBack就是按照SLF4j的接口进行实现的，所以不存在桥接的问题。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"Spring","slug":"spring","permalink":"http://gaussli.com/tags/spring/"},{"name":"String Framework","slug":"string-framework","permalink":"http://gaussli.com/tags/string-framework/"},{"name":"框架","slug":"框架","permalink":"http://gaussli.com/tags/%E6%A1%86%E6%9E%B6/"}]},{"title":"[J2EE]JSP内置对象","slug":"j2ee-jsp内置对象","date":"2019-08-10T11:47:17.000Z","updated":"2021-07-26T15:14:35.146Z","comments":true,"path":"2019/08/10/j2ee-jsp内置对象/","link":"","permalink":"http://gaussli.com/2019/08/10/j2ee-jsp%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"JSP 2.0规范中定义了9中内置对象request Object getAttribute(String name)：获取指定的属性值 void setAttribute(String name, Object value)：将指定属性的值设置为value String getParameter(String name)：获取请求参数名为那么的参数值 Enumeration getParameterNames()：获取所有请求参数的名字集合 String[] getParameterValues(String name)：获得name请求参数的参数值 Map getParameterMap()：获取所有请求参数名和请求参数值所组成的Map对象 void setCharacterEncoding(String encoding)：设定编码格式 response void addCookie(Cookie cookie)：添加一个Cookie对象，用于在客户端保存特定的信息 void addHeader(String name, String value)：添加HTTP头信息，该Header信息将被发送到客户端 void containsHeader(String name)：用于判断指定名字的HTTP文件头是否存在 void sendError(int)：向客户端发送错误的状态码 void sendRedirect(String url)：重定向JSP文件 void setContentType(String contentType)：设置MIME类型与编码方式 PS：response一个主要应用是重定向。 pageContextsessionapplicationoutconfigpageexception(•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"http://gaussli.com/tags/jsp/"},{"name":"内置对象","slug":"内置对象","permalink":"http://gaussli.com/tags/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"}]},{"title":"[J2EE]JSP动作元素","slug":"j2ee-jsp动作元素","date":"2019-08-10T10:16:45.000Z","updated":"2021-07-26T15:14:37.963Z","comments":true,"path":"2019/08/10/j2ee-jsp动作元素/","link":"","permalink":"http://gaussli.com/2019/08/10/j2ee-jsp%E5%8A%A8%E4%BD%9C%E5%85%83%E7%B4%A0/","excerpt":"","text":"JSP的动作元素主要包含7个jsp:include提供一种在JSP中包含页面的方式，既可以包含静态文件，也可以包含动态文件 1&lt;jsp:include page=&quot;relative URL&quot; flush=&quot;true|false&quot;&gt; page属性：指定被包含文件的URL地址，是一个相对路径 flush属性：指定当缓存区满时，是否将其清空，默认为false jsp:forward一种用于页面重定向的动作元素，他的作用是停止当前JSP页面的执行，而将客户端请求转交给另一个JSP页面。PS：转发与重定向的区别，转发是在服务端进行的，不会引起客户端的二次请求，因此浏览器的地址栏不会发生任何变化，效率也比重定向要高 1&lt;jsp:forward page=&quot;转向页面的URL地址&quot;&gt; page属性：用来指定转向页面的URL地址 jsp:param一种提供参数的附属动作元素，以“名-值”对的形式为其他动作元素提供附加信息，一般与jsp:include、jsp:forward、jsp:plugin联合使用 1&lt;jsp:param name=&quot;参数名字&quot; value=&quot;指定给param的参数值&quot;&gt; JSP中通过request.getParameter(&quot;key&quot;)来获取param的值 jsp:useBean、jsp:setProperty、jsp:getPropertyjsp:useBean用来装载一个将在JSP页面中使用的JavaBean。这个功能很有用，充分发挥了Java组件重用的优势，同时也提高了JSP使用的方便性。 1&lt;jsp:userBean id=&quot;beanInstanceName&quot; class=&quot;classname&quot; scope=&quot;page|request|session|application&quot;&gt; id：指定JavaBean的实例名 class：指定JavaBean的全限定类名 scppe：指定引入的JavaBean实例的作用域，默认为当前页 page：表示该JavaBean实例在当前页面生效 request：表示该JavaBean实例在本次请求有效 session：表示该JavaBean实例在本次session内有效 application：表示该JavaBean实例在本应用内一直有效 jsp:setProperty在定义了jsp:useBean后，来设置或修改Bean中的属性值 1&lt;jsp:setProperty name=&quot;beanInstanceName&quot; property=&quot;propertyName&quot; value=&quot;value&quot;&gt; name：指定要进行设置的JavaBean的实例名 property：指定需要设置的JavaBean实例中的属性名 value：指定要将property中指定的属性设置为该属性值 jsp:getProperty在定义了jsp:useBean后，来提出指定Bean属性的值，并将其转换成字符串，然后输出 1&lt;jsp:getProperty name=&quot;beanInstaceName&quot; property=&quot;propertyName&quot;&gt; name：指定要输出的JavaBean的实例名 property：指定需要输出的JavaBean实例中的属性名 PS：jsp:setProperty和jsp:getProperty需要在jsp:useBean设置之后使用 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"http://gaussli.com/tags/jsp/"},{"name":"动作元素","slug":"动作元素","permalink":"http://gaussli.com/tags/%E5%8A%A8%E4%BD%9C%E5%85%83%E7%B4%A0/"}]},{"title":"[Network]Http响应状态行","slug":"network-http响应状态行","date":"2019-08-09T08:48:03.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/08/09/network-http响应状态行/","link":"","permalink":"http://gaussli.com/2019/08/09/network-http%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E8%A1%8C/","excerpt":"","text":"响应状态行由Http版本（HTTP-Version）、状态码（Status-Code）和解释状态码的简单短语（Reason-phrase）三部分组成。 1HTTP-Version Status-Code Reason-phrase CRLF 状态码由三个数组组成，共有5大类33种，其中第一个数字指定了响应类别，取值为1～5 1xx：指示信息，如请求收到了或正在处理 2xx：成功 3xx：重定向 4xx：客户端错误，如请求中含有错误的语法或不能正常完成 5xx：服务器端错误，如服务器失败而无法完成请求 常见的响应状态码解释： 200: 表示请求成功，成功返回了请求的资源 302/307: 表示临时重定向，此时被请求的文档已经临时移动到其他位置，该文档新的URL将在Location响应报头中给出 401: 表示浏览器访问的是一个受到密码保护的页面 403: 表示服务器收到请求，但拒绝提供服务 404: 表示找不到资源，即服务器上不存在浏览器请求的资源 500: 表示内部服务错误，即服务器端中的服务程序发生了错误 503: 表示服务器暂时性超载，不能处理当前的请求 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Network","slug":"tech/network","permalink":"http://gaussli.com/categories/tech/network/"}],"tags":[{"name":"web","slug":"web","permalink":"http://gaussli.com/tags/web/"},{"name":"response","slug":"response","permalink":"http://gaussli.com/tags/response/"},{"name":"响应","slug":"响应","permalink":"http://gaussli.com/tags/%E5%93%8D%E5%BA%94/"},{"name":"状态行","slug":"状态行","permalink":"http://gaussli.com/tags/%E7%8A%B6%E6%80%81%E8%A1%8C/"}]},{"title":"[Linux]记一次gitlab代码仓库备份迁移","slug":"linux-记一次gitlab代码仓库备份迁移","date":"2019-05-14T01:27:17.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/05/14/linux-记一次gitlab代码仓库备份迁移/","link":"","permalink":"http://gaussli.com/2019/05/14/linux-%E8%AE%B0%E4%B8%80%E6%AC%A1gitlab%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E5%A4%87%E4%BB%BD%E8%BF%81%E7%A7%BB/","excerpt":"","text":"由于公司的云平台需要进行一次彻底的升级，所以被告知部门的gitlab代码库需要做一次备份迁移。 由于之前没尝试过，接着又是整个部门的代码库，还是谨慎一点好，毕竟一旦崩了，影响就大了。 整个过程经过两天的时间，从等待临时的虚拟机环境，安装新的gitlab环境，执行gitlab备份，恢复备份，每一步多多少少都有点坑。 操作系统 CentOS 7.5 前提准备gitlab需要依赖一些基础工具，官网上也有说。官方链接190514 sudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld 我发现新机子默认这些工具都已经默认安装完的了，防火墙看需求是否开吧，一般基于安全都需要开。 如果需要用到gitlab邮件能力，还需要安装邮件工具并启动服务： sudo yum install postfix sudo systemctl enable postfix sudo systemctl start postfix 新环境gitlab的安装由于是迁移备份，网上都说新gitlab的版本需要和原有的一致，不然可能会问题。 如果是简单安装最新版本gitlab的话，gitlab官网给出的是执行官方的shell脚本，想必原理是下载rpm文件接着安装。 那手动安装就是下载对应版本gitlab.rpm文件执行安装。下载链接190514 安装命令： 1EXTERNAL_URL=&quot;http://IP:PORT&quot; rpm -i gitlab-ee-9.5.2-ee.0.el7.x86_64.rpm 新环境gitlab的配置rpm安装完后，默认gitlab的配置文件路径为： 1/etc/gitlab/gitlab.rb 默认的应用内容目录路径为（包括默认的仓库路径和备份路径，这两个等会会用到）： 1/var/opt/gitlab/ 当前修改的配置： unicorn服务的端口，默认是8080，但是很多机子的8080都可能占用12# unicorn[&#x27;port&#x27;] = 8080unicorn[&#x27;port&#x27;] = 8889 访问限制，默认单IP限制次数为10，这个太小了，由于当前是内网，所以放开这个限制1234567891011121314# gitlab_rails[&#x27;rack_attack_git_basic_auth&#x27;] = &#123;# &#x27;enabled&#x27; =&gt; true,# &#x27;ip_whitelist&#x27; =&gt; [&quot;127.0.0.1&quot;] ,# &#x27;maxretry&#x27; =&gt; 10,# &#x27;findtime&#x27; =&gt; 60,# &#x27;bantime&#x27; =&gt; 3600#&#125;gitlab_rails[&#x27;rack_attack_git_basic_auth&#x27;] = &#123; &#x27;enabled&#x27; =&gt; true, &#x27;ip_whitelist&#x27; =&gt; [&quot;127.0.0.1&quot;] , &#x27;maxretry&#x27; =&gt; 10000, &#x27;findtime&#x27; =&gt; 60, &#x27;bantime&#x27; =&gt; 3600&#125; 备份目录，可自行修改12# gitlab_rails[&#x27;backup_path&#x27;] = &quot;/var/opt/gitlab/backups&quot;gitlab_rails[&#x27;backup_path&#x27;] = &quot;/gitlab/backup/path&quot; 仓库路径，可自行修改12345678910#git_data_dirs(&#123;# &quot;default&quot; =&gt; &#123;# &quot;path&quot; =&gt; &quot;/var/opt/gitlab/git-data&quot;# &#125;#&#125;)git_data_dirs(&#123; &quot;default&quot; =&gt; &#123; &quot;path&quot; =&gt; &quot;/gitlab/repos/data/path&quot; &#125;&#125;) 修改完配置文件执行gitlab-ctl reconfigure来重启服务使配置生效，刚开始没有该配置，导致恢复备份两次都失败，原因就是默认路径下的空间不足，囧 备份旧的gitlab执行命令进行备份，将会生成一个命名格式为&lt;timestamp&gt;_&lt;date&gt;_&lt;gitlab-version&gt;_gitlab_backup.tar 1gitlab-rake gitlab:backup:create 由于旧的gitlab有个定时任务，每日凌晨3点会执行一次备份，不然手动执行需要差不多一个小时，定时任务shell脚本 123time=$(date &quot;+%Y%m%d%H%M%S&quot;)path=&quot;/var/opt/gitlab/backups/&quot;gitlab-rake gitlab:backup:create &gt; $&#123;path&#125;$&#123;time&#125;_gitlab_backup.log 复制备份文件到新机子可以使用scp命令传到新机子的gitlab备份目录中，因为gitlab的备份恢复命令会从备份目录查找对应的备份文件 在新机子执行备份恢复先停止相关服务，这一步貌似如果gitlab没人正在使用的话，貌似是可以不关闭的，测试了也不会出错，但是稳妥还是关闭一下 12gitlab-ctl stop unicorngitlab-ctl stop sidekiq 执行备份恢复命令 1gitlab-rake gitlab:backup:restore BACKUP=&lt;timestamp&gt;_&lt;date&gt;_&lt;gitlab-version&gt; 这个过程也是很漫长，现在备份文件20G，执行起来需要足足半个小时来恢复，慢慢等吧 执行完成后可以恢复之前关闭的相关服务，或者重启整个gitlab服务也行。 至此，gitlab就通过备份恢复完毕了，用户数据，仓库数据，群组数据都能恢复。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"gitlab","slug":"gitlab","permalink":"http://gaussli.com/tags/gitlab/"},{"name":"代码库","slug":"代码库","permalink":"http://gaussli.com/tags/%E4%BB%A3%E7%A0%81%E5%BA%93/"},{"name":"备份","slug":"备份","permalink":"http://gaussli.com/tags/%E5%A4%87%E4%BB%BD/"},{"name":"迁移","slug":"迁移","permalink":"http://gaussli.com/tags/%E8%BF%81%E7%A7%BB/"}]},{"title":"[Mac]清除DNS缓存","slug":"mac-清除dns缓存","date":"2019-05-07T01:43:48.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/05/07/mac-清除dns缓存/","link":"","permalink":"http://gaussli.com/2019/05/07/mac-%E6%B8%85%E9%99%A4dns%E7%BC%93%E5%AD%98/","excerpt":"","text":"Mac OS X 12（Sierra）以上系统 123sudo killall -HUP mDNSRespondersudo killall mDNSResponderHelpersudo dscacheutil -flushcache (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Mac","slug":"tech/mac","permalink":"http://gaussli.com/categories/tech/mac/"}],"tags":[{"name":"DNS","slug":"dns","permalink":"http://gaussli.com/tags/dns/"},{"name":"缓存","slug":"缓存","permalink":"http://gaussli.com/tags/%E7%BC%93%E5%AD%98/"}]},{"title":"[Mac]cocoapods出现的错误总结","slug":"mac-cocoapods出现的错误总结","date":"2019-04-30T09:27:02.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/04/30/mac-cocoapods出现的错误总结/","link":"","permalink":"http://gaussli.com/2019/04/30/mac-cocoapods%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/","excerpt":"","text":"今天遇到了一个很神奇的cocoapods的错误，在使用pod search xxx的时候，出现一下内容： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485――― MARKDOWN TEMPLATE ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――### Command``/usr/local/bin/pod search afnet``### Report* What did you do?* What did you expect to happen?* What happened instead?### Stack`` CocoaPods : 1.6.1 Ruby : ruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18] RubyGems : 2.5.2.3 Host : Mac OS X 10.14.3 (18D109) Xcode : 10.1 (10B61) Git : git version 2.17.2 (Apple Git-113)Ruby lib dir : /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/libRepositories : master - https://github.com/CocoaPods/Specs.git @ 05b7b9338bc0e2da13dc75fd3dab0b887257cda0``### Plugins``cocoapods-deintegrate : 1.0.4cocoapods-plugins : 1.0.0cocoapods-search : 1.0.0cocoapods-stats : 1.1.0cocoapods-trunk : 1.3.1cocoapods-try : 1.1.0``### Error``JSON::ParserError - A JSON text must at least contain two octets!/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/json/common.rb:156:in `initialize&#x27;/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/json/common.rb:156:in `new&#x27;/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/json/common.rb:156:in `parse&#x27;/Library/Ruby/Gems/2.3.0/gems/cocoapods-core-1.6.1/lib/cocoapods-core/source/manager.rb:251:in `stored_search_index&#x27;/Library/Ruby/Gems/2.3.0/gems/cocoapods-core-1.6.1/lib/cocoapods-core/source/manager.rb:187:in `updated_search_index&#x27;/Library/Ruby/Gems/2.3.0/gems/cocoapods-core-1.6.1/lib/cocoapods-core/source/manager.rb:118:in `search_by_name&#x27;/Library/Ruby/Gems/2.3.0/gems/cocoapods-search-1.0.0/lib/cocoapods-search/command/search.rb:87:in `local_search&#x27;/Library/Ruby/Gems/2.3.0/gems/cocoapods-search-1.0.0/lib/cocoapods-search/command/search.rb:63:in `run&#x27;/Library/Ruby/Gems/2.3.0/gems/claide-1.0.2/lib/claide/command.rb:334:in `run&#x27;/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.6.1/lib/cocoapods/command.rb:52:in `run&#x27;/Library/Ruby/Gems/2.3.0/gems/cocoapods-1.6.1/bin/pod:55:in `&lt;top (required)&gt;&#x27;/usr/local/bin/pod:22:in `load&#x27;/usr/local/bin/pod:22:in `&lt;main&gt;&#x27;``――― TEMPLATE END ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――[!] Oh no, an error occurred.Search for existing GitHub issues similar to yours:https://github.com/CocoaPods/CocoaPods/search?q=A+JSON+text+must+at+least+contain+two+octets%21&amp;type=IssuesIf none exists, create a ticket, with the template displayed above, on:https://github.com/CocoaPods/CocoaPods/issues/newBe sure to first read the contributing guide for details on how to properly submit a ticket:https://github.com/CocoaPods/CocoaPods/blob/master/CONTRIBUTING.mdDon&#x27;t forget to anonymize any private data!Looking for related issues on cocoapods/cocoapods... - pod search not work JSON ParserError https://github.com/CocoaPods/CocoaPods/issues/5172 [closed] [10 comments] 30 Aug 2018 - pod install-- JSON::ParserError - A JSON text must at least contain two octets! https://github.com/CocoaPods/CocoaPods/issues/6692 [closed] [7 comments] 10 Dec 2017 具体我也不知道为毛这样，我试过重装cocoapods不行，试过删除repo再重建也是不行。 搜索了一下JSON::ParserError - A JSON text must at least contain two octets!这句话，说是需要删除~/Library/Caches/CocoaPods/search_index.json文件，接着我去看了这个文件，发现大小是0的，所以删除掉了，再试了一遍pod search xxx，居然就可以了。 甚是神奇，急需开发，暂时就不深究了，先记录下。 回顾了一下，回去在看了search_index.json这个文件，就有21M的大小了，所以我认为的是：这个文件应该就是cocoapods的本地索引文件了，因为新装的cocoapods或者更新了repo仓库，索引文件都需要更新，而应该就是上一次触发索引更新的时候出错中断了，导致没有成功建立索引文件（文件大小为0），所以在执行pod search xxx的时候cocoapods去读取索引文件的时候就出错了。而且我还看了下这个索引文件，这个文件是以json格式保存的，所以之前建立索引文件失败，也就是符合上面那个json解析的错误了。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Mac","slug":"tech/mac","permalink":"http://gaussli.com/categories/tech/mac/"}],"tags":[{"name":"cocoapods","slug":"cocoapods","permalink":"http://gaussli.com/tags/cocoapods/"},{"name":"error","slug":"error","permalink":"http://gaussli.com/tags/error/"},{"name":"错误","slug":"错误","permalink":"http://gaussli.com/tags/%E9%94%99%E8%AF%AF/"}]},{"title":"[Maven]org.apache.maven.plugins说明","slug":"maven-org-apache-maven-plugins说明","date":"2019-04-19T11:35:31.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/04/19/maven-org-apache-maven-plugins说明/","link":"","permalink":"http://gaussli.com/2019/04/19/maven-org-apache-maven-plugins%E8%AF%B4%E6%98%8E/","excerpt":"","text":"org.apache.maven.plugins Core plugins maven-clean-plugin Clean up after the build 清理已构建的包 maven-compiler-plugin Compiles Java sources 编译Java代码 maven-deploy-plugin Deploy the build artifact to the remote repository 发布到远程仓库 maven-failsafe-plugin Run the JUnit integration tests in an isolated classloader 使用额外的类加载器执行JUnit集成测试 maven-install-plugin Install the build artifact into the local repository 发布到本地仓库 maven-resources-plugin Copy the resources to the output directory for including in the JAR 复制资源静态文件到JAR中的目录中 maven-site-plugin Generate a site for the current project 为当前项目生成一个站点 maven-surefire-plugin Run the JUnit unit tests in an isolated classloader 使用额外的类加载器执行JUnit单元测试 maven-verifier-plugin Userful for integration tests - verifies the existence of certain conditions Packaging types/tools maven-ear-plugin Generate an EAR from the current project maven-jar-plugin Build a JAR from the current project maven-rar-plugin Build a RAR from the current project maven-war-plugin Build a WAR from the current project Reporting plugins Tools maven-dependency-plugin maven-shade-plugin Build an Uber-JAR from the current project, including dependencies maven-gpg-plugin maven-plugin-plugin maven-javadoc-plugin maven-enforcer-plugin maven-source-plugin Build a source -JAR from the current project maven-assemply-plugin maven-archetype-plugin maven-antrun-plugin maven-release-plugin maven-eclipse-plugin maven-project-info-reports-plugin maven-scm-plugin maven-invoker-plugin maven-checkstyle-plugin maven-jxr-plugin maven-surefire-report-plugin maven-help-plugin maven-jarsigner-plugin maven-pmd-plugin maven-changes-plugin maven-remote-resources-plugin maven-toolchains-plugin maven-repository-plugin maven-clover-plugin maven-stage-plugin maven-continuum-plugin maven-jlink-plugin Build Java Run Time maven-plugin-parent maven-scm-publish-plugin maven-projecthelp-plugin maven-acr-plugin Build a JavaEE application client from the current project maven-patch-plugin maven-docck-plugin maven-jdeps-plugin maven-ejb-plugin Build an EJB (and optional client) from the current project maven-linkcheck-plugin maven-changelog-plugin maven-doap-plugin maven-one-plugin maven-plugins maven-jdeprscan-plugin maven-reactor-plugin maven-core-it-plugin maven-antlr-plugin maven-jmod-plugin Build Java JMod files (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Maven","slug":"tech/maven","permalink":"http://gaussli.com/categories/tech/maven/"}],"tags":[{"name":"Maven","slug":"maven","permalink":"http://gaussli.com/tags/maven/"},{"name":"plugins","slug":"plugins","permalink":"http://gaussli.com/tags/plugins/"},{"name":"pom","slug":"pom","permalink":"http://gaussli.com/tags/pom/"}]},{"title":"[Network]IP地址分类","slug":"network-ip地址分类","date":"2019-03-12T09:42:18.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/03/12/network-ip地址分类/","link":"","permalink":"http://gaussli.com/2019/03/12/network-ip%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB/","excerpt":"","text":"网络号用于识别主机所在的网络 主机号用于识别该网络中的主机。 IP地址分为5类，A类保留给政府，B类分配给中等规模的公司，C类分配给任何需要的人，D类用户组播，E类用于实现，各类可容纳的地址数目是不同的。 转化为二进制后，A类地址第一位总是0，B类地址前两位总是10，C类地址前三位总是110，D类地址前四位总是1110，E类地址前五位总是11110. A类地址 A类地址第1个字节为网络地址，其他3个字节为主机地址。它的第1个字节的第一位总是0 A类地址网络号范围：0.0.0.0 – 127.0.0.0。地址范围：0.0.0.0 – 127.255.255.255 A类地址中的私有地址和保留地址 私有地址：10.x.x.x，所谓的私有地址就是互联网上不使用，而被用在局域网中的地址 保留地址：127.x.x.x，用做循环测试使用 B类地址 B类地址第1个字节和第2个字节为网络地址，其他2个字节为主机地址。它的第1个字节的前两位总是10 B类地址网络号范围：128.0.0.0 – 191.255.0.0。地址范围：128.0.0.0 – 191.255.255.255 B类地址中的私有地址和保留地址 私有地址：172.16.0.0 – 172.31.255.255 保留地址：169.254.x.x。如果你的IP地址是自动获取IP地址的，而你的网络上又没有找到可用的DHCP服务器，就会得到其中一个IP C类地址 C类地址第1个字节、第2个字节和第3个字节为网络地址，第4个字节为主机地址。它的第1个字节的前三位总是110 C类地址网络号范围：192.0.0.0 – 223.255.255.0。地址范围：192.0.0.0 – 223.255.255.255 C类地址中的私有地址和保留地址 私有地址：192.168.x.x（192.168.0.0 – 192.168.255.255） D类地址 D类地址不分网络地址和主机地址，它的第1个字节的前四位总是1110 D类地址范围：224.0.0.0 – 239.255.255.255 E类地址 E类地址不分网络地址和主机地址，它的第1个字节的前五位总是11110 E类地址范围：240.0.0.0 – 255.255.255.254 实体IP可以直接在网际网路上沟通的IP被称为实体IP 虚拟IP在规划IP时预留的三个网段的IP作为内部网域的虚拟IP使用。分别为： A级：10.0.0.1 – 10.255.255.254 B级：172.16.0.1 – 172.16.255.254 C级：192.168.0.1 – 192.168.255.254 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Network","slug":"tech/network","permalink":"http://gaussli.com/categories/tech/network/"}],"tags":[{"name":"IP","slug":"ip","permalink":"http://gaussli.com/tags/ip/"}]},{"title":"[Linux]ELRepo项目的一些说明","slug":"linux-elrepo项目的一些说明","date":"2019-03-08T08:16:57.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/03/08/linux-elrepo项目的一些说明/","link":"","permalink":"http://gaussli.com/2019/03/08/linux-elrepo%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%B4%E6%98%8E/","excerpt":"","text":"小言这篇文章的初衷是前2天写的文章[Linux]CentOS7.6更新内核中使用了ELRepo，而在那篇文章说到这个ELRepo是个内核源，因为那篇文章是关于内核升级的。但是现在一想来总觉得不太对，就有这篇文章记录一下 ELRepo介绍先贴个官网说明【官网】 “For the community, by the community.”Welcome to ELRepo, an RPM repository for Enterprise Linux packages. ELRepo supports Red Hat Enterprise Linux (RHEL) and its derivatives (Scientific Linux, CentOS &amp; others).The ELRepo Project focuses on hardware related packages to enhance your experience with Enterprise Linux. This includes filesystem drivers, graphics drivers, network drivers, sound drivers, webcam and video drivers. For the community, by the community. 这句话相当的棒！！ 整段话大概的意思就是说ELRepo是一个企业级Linux工具包的RPM仓库，ELRepo支持RedHat企业级Linux系统以及它的衍生产品。 那ELRepo关注怎样的工具包呢？它主要关注一些与硬件相关工具包，用于提升Linux的用户体验。其中包括文件系统驱动，图形驱动，网络驱动，声音驱动，摄像头及视频驱动等。 ELRepo的内容再贴官方引用 ELRepo contains four channels. You can browse the contents of each channel by clicking on its name. elrepoThis is the main channel and is enabled by default. As this channel should not contain packages also present in the distribution, it should be safe to run a ‘yum update’ with this repository channel enabled.For example, to install kmod-r8168 (Realtek r8168 NIC driver):yum install kmod-r8168Depending on the package being installed or the repository setup, it might be necessary to disable non-elrepo repositories:yum --disablerepo=\\* --enablerepo=elrepo install kmod-nvidia elrepo-extrasThe elrepo-extras channel provides packages and their dependencies that replace/update RHEL distribution packages. It may be enabled in the /etc/yum.repos.d/elrepo.repo file or used with ‘yum –enablerepo=elrepo-extras’. elrepo-testingThe elrepo-testing channel provides packages yet to be released to the main channel and is disabled by default. It may be enabled in the /etc/yum.repos.d/elrepo.repo file or used with ‘yum –enablerepo=elrepo-testing’. elrepo-kernelThe elrepo-kernel channel provides both the long-term support kernels (which have been configured for RHEL-7 and RHEL-6) and the latest stable mainline kernels (which have been configured for RHEL-7) using sources available from the Linux Kernel Archives (external link). Please see the kernel-lt or kernel-ml pages for further details. This channel may be enabled in the /etc/yum.repos.d/elrepo.repo file or used with ‘yum –enablerepo=elrepo-kernel’. 这几段话主要说的是 ELRepo呢，共包含4个模块：elrepo、elrepo-extra、elrepo-testing、elrepo-kernel，默认只有第一个是开启的，其余三个都是关闭的 elrepo，主要模块并且默认开启。由于没有默认放在Linux系统的发行包中，所以执行yum update不会出现问题。 elrepo-extra，用于更新Linux系统发行包的替代或更新包 elrepo-testing，提供给elrepo的一些相关联的包 elrepo-kernel，包含longlong-term和mainline版本的Linux核心包，根据Linux官网发布的内核包产生的 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"elrepo","slug":"elrepo","permalink":"http://gaussli.com/tags/elrepo/"},{"name":"yum","slug":"yum","permalink":"http://gaussli.com/tags/yum/"}]},{"title":"[Linux]CentOS7以上更改系统时区","slug":"linux-centos7以上更改系统时区","date":"2019-03-07T23:14:11.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/03/08/linux-centos7以上更改系统时区/","link":"","permalink":"http://gaussli.com/2019/03/08/linux-centos7%E4%BB%A5%E4%B8%8A%E6%9B%B4%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E5%8C%BA/","excerpt":"","text":"CentOS7以后新增了一个工具，用来更方便地更改系统时区 当前时区信息 12timedatectl # 或者timedatectl status 可用时区列表，空格换页 1timedatectl list-timezones 设置系统时区 1timedatectl set-timezone &quot;Asia/Shanghai&quot; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"CentOS","slug":"centos","permalink":"http://gaussli.com/tags/centos/"},{"name":"时区","slug":"时区","permalink":"http://gaussli.com/tags/%E6%97%B6%E5%8C%BA/"},{"name":"时间","slug":"时间","permalink":"http://gaussli.com/tags/%E6%97%B6%E9%97%B4/"}]},{"title":"[Linux]Linux服务器基本安全配置","slug":"linux-linux服务器基本安全配置","date":"2019-03-07T05:24:05.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/03/07/linux-linux服务器基本安全配置/","link":"","permalink":"http://gaussli.com/2019/03/07/linux-linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/","excerpt":"","text":"系统环境 操作系统：CentOS 7.5 内核版本：3.10.0-862.14.4.el7 具体配置1. 设置用户权限配置文件的权限【文件权限】设置用户权限配置文件的权限，其中passwd表示系统用户列表，shadow表示用户密码列表，group表示系统用户组列表，gshadow表示对group中用户组的加密文件。实际操作中，发现passwd和group默认是0644的root权限，shadow和gshadow默认是0000的root权限。所以这几个文件默认是不需要改的，但是这样shadow和gshadow就不能被任何账号访问，而这默认也是正常的，那希望shadow和gshadow能被访问，就给个0400（只读权限）给root用户。 加固操作 12345chown root:root /etc/passwd /etc/shadow /etc/group /etc/gshadowchmod 0644 /etc/group chmod 0644 /etc/passwd chmod 0400 /etc/shadow chmod 0400 /etc/gshadow 2. 访问控制配置文件的权限设置【文件权限】 访问控制配置文件的权限设置 加固操作 1234chown root:root /etc/hosts.allow chown root:root /etc/hosts.deny chmod 644 /etc/hosts.deny chmod 644 /etc/hosts.allow 3. 检查系统空密码账户【身份鉴别】检查系统空密码账户 加固操作 为用户设置一个非空密码 4. 设置密码失效时间【身份鉴别】设置密码失效时间，强制定期修改密码，减少密码被泄漏和猜测风险，使用非密码登陆方式(如密钥对)请忽略此项。 加固操作 使用非密码登陆方式如密钥对，请忽略此项。在 /etc/login.defs 中将 PASS_MAX_DAYS 参数设置为 60-180之间，如 PASS_MAX_DAYS 90。需同时执行命令设置root密码失效时间： chage –maxdays 90 root。 5. 设置密码修改最小间隔时间【身份鉴别】设置密码修改最小间隔时间，限制密码更改过于频繁 加固操作 在 /etc/login.defs 中将 PASS_MIN_DAYS 参数设置为5-14之间,操作为7：PASS_MIN_DAYS 7 需同时执行命令为root用户设置：chage –mindays 7 root 6. 密码复杂度检查【身份鉴别】检查密码长度和密码是否使用多种字符类型 加固操作 编辑/etc/security/pwquality.conf，把minlen（密码最小长度）设置为9-32位，把minclass（至少包含小写字母、大写字母、数字、特殊字符等4类字符中等3类或4类）设置为3或4。如： minlen=10 minclass=3 7. 确保root是唯一的UID为0的帐户【身份鉴别】除root以外其他UID为0的用户都应该删除，或者为其分配新的UID 加固操作 除root以外其他UID为0的用户(查看命令cat /etc/passwd | awk -F: &#39;($3 == 0) &#123; print $1 &#125;&#39;|grep -v &#39;^root$&#39;)都应该删除，或者为其分配新的UID 8. 检查密码重用是否限制【身份鉴别】强制用户不重用最近使用的密码，降低密码猜测攻击风险 加固操作 在/etc/pam.d/password-auth和/etc/pam.d/system-auth中password sufficient pam_unix.so 这行的末尾配置remember参数为5-24之间，原来的内容不用更改。如下面只在末尾加了remember=5，即可限制不能重用最近5个密码。 password sufficient pam_unix.so sha512 try_first_pass remember=5 9. 确保密码到期警告天数为7或更多【身份鉴别】确保密码到期警告天数为7或更多 加固操作 在 /etc/login.defs 中将 PASS_WARN_AGE 参数设置为7-14之间，操作为7： PASS_WARN_AGE 7 。同时执行命令使root用户设置生效： chage –warndays 7 root 10. 确保SSH MaxAuthTries设置为3到6之间【服务配置】设置较低的Max AuthTrimes参数将降低SSH服务器被暴力攻击成功的风险。在尝试失败次数达到设置的值时，连接将断开。 加固操作 在/etc/ssh/sshd_config中取消MaxAuthTries注释符号#，设置最大密码尝试失败次数3-6，操作为5：MaxAuthTries 5。设置完成后执行systemctl restart sshd重启sshd服务。 11. 禁止SSH空密码用户登录【服务配置】禁止SSH空密码用户登录 加固操作 在/etc/ssh/sshd_config中取消PermitEmptyPasswords no注释符号#。设置完成后执行systemctl restart sshd重启sshd服务。 12. 确保SSH LogLevel设置为INFO【服务配置】确保SSH LogLevel设置为INFO,记录登录和注销活动 加固操作 编辑 /etc/ssh/sshd_config 文件以按如下方式设置参数(取消注释):LogLevel INFO，默认值也是INFO。设置完成后执行systemctl restart sshd重启sshd服务。 13. 设置SSH空闲超时退出时间【服务配置】设置SSH空闲超时退出时间,可降低未授权用户访问其他用户ssh会话的风险 加固操作 编辑/etc/ssh/sshd_config，将ClientAliveInterval 设置为300到900，即5-15分钟，将ClientAliveCountMax设置为0。 ClientAliveInterval 900 ClientAliveCountMax 0。设置完成后执行systemctl restart sshd重启sshd服务。 14. SSHD强制使用V2安全协议【服务配置】SSHD强制使用V2安全协议 加固操作 编辑 /etc/ssh/sshd_config 文件以按如下方式设置参数： Protocol 2。设置完成后执行systemctl restart sshd重启sshd服务。 15. 开启地址空间布局随机化【入侵防范】它将进程的内存空间地址随机化来增大入侵者预测目的地址难度，从而降低进程被成功入侵的风险 加固操作 1sysctl -w kernel.randomize_va_space=2 16. 确保rsyslog服务已启用【安全审计】确保rsyslog服务已启用，记录日志用于审计 加固操作 运行以下命令启用 rsyslog ： chkconfig rsyslog on (•̀ᴗ•́)و ̑̑","categories":[],"tags":[{"name":"CentOS","slug":"centos","permalink":"http://gaussli.com/tags/centos/"},{"name":"Linux","slug":"linux","permalink":"http://gaussli.com/tags/linux/"},{"name":"ssh","slug":"ssh","permalink":"http://gaussli.com/tags/ssh/"}]},{"title":"[Linux]ss安装，懂的自然懂","slug":"linux-ss安装，懂的自然懂","date":"2019-03-07T01:48:35.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/03/07/linux-ss安装，懂的自然懂/","link":"","permalink":"http://gaussli.com/2019/03/07/linux-ss%E5%AE%89%E8%A3%85%EF%BC%8C%E6%87%82%E7%9A%84%E8%87%AA%E7%84%B6%E6%87%82/","excerpt":"","text":"依赖python，python-pippip管理工具中有ss的工具 环境： 内核：2.6.32-042stab120.20，budgetvm的普通VPS不能升级内核，一点办法儿都没有，摊手！ 系统：CentOS7.2 VPS位置：LA 本机默认python版本2.7.5，而且没有pip包管理工具。无解，在当前都已经有3.7了。 话不多说，列出步骤： 本机添加epel源，包含了很多额外的软件包、工具包，比官方的版本会更新 1yum install -y epel-release 查找python的新版本，应该是能看到python34和python36，分别对应python3.4版本和python3.6版本 1yum search python 安装python36和python36-pip，因为最后是需要通过pip来安装shadowsocks，所以需要安装一个pip包管理工具 1yum install -y python36 python36-pip 查找shadowsocks工具，由于装的是python36-pip，pip执行命令也变成了pip3.6 1pip3.6 search shadowsocks 安装shadowsocks工具 1pip3.6 install shadowsocks 编写配置文件 12mkdir /etc/shadowsocksvim /etc/shadowsocks/shadowsocks.json 配置文件内容的一些说明 method：加密方式，可选多种的 port_password：通过设置不同端口来实现不同用户，所以这里针对不同端口设置密码 _comment：设置不同端口对应不同用户的账号123456789101112131415161718&#123; &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;timeout&quot;: 600, &quot;port_password&quot;: &#123; &quot;40000&quot;: &quot;user1_pass&quot;, &quot;40001&quot;: &quot;user2_pass&quot;, &quot;40002&quot;: &quot;user3_pass&quot;, &quot;40003&quot;: &quot;user4_pass&quot; &#125;, &quot;_comment&quot;: &#123; &quot;40000&quot;: &quot;user1&quot;, &quot;40001&quot;: &quot;user2&quot;, &quot;40002&quot;: &quot;user3&quot;, &quot;40003&quot;: &quot;user4&quot; &#125;&#125; 安装gevent，gevent可以提高shadowsocks的性能 1pip3.6 install gevent 执行启动命令，shadowsocks.log路径可自定义 1nohup ssserver -c /etc/shadowsocks/shadowsocks.json &gt; /usr/local/shadowsocks/log/shadowsocks.log &amp; 再做一个简单的端口监控，看看哪个账号用得比较多 12345678#!/bin/bash## File: shadowsocks-port-ip-monitor.sh#filename=&quot;port-ip-monitor.log&quot;regex=&quot;4000[0-5]&quot; # monitor 40000-40005date +&quot;[%Y-%m-%d %H:%M:%S]&quot; &gt;&gt; $filenamenetstat -anp | egrep $regex | grep -E &quot;tcp.*ESTABLISHED&quot; | awk &#x27;&#123;print $4, $5&#125;&#x27; | cut -d: -f2 | sort -u &gt;&gt; $filename 启动定时任务，一分钟执行一次,crontab -e 1* * * * * sh /usr/local/shadowsocks/shell/shadowsocks-port-ip-monitor.sh (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"ss","slug":"ss","permalink":"http://gaussli.com/tags/ss/"},{"name":"python","slug":"python","permalink":"http://gaussli.com/tags/python/"}]},{"title":"[Linux]CentOS7.6更新内核","slug":"linux-centos7-6更新内核","date":"2019-03-06T15:22:06.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2019/03/06/linux-centos7-6更新内核/","link":"","permalink":"http://gaussli.com/2019/03/06/linux-centos7-6%E6%9B%B4%E6%96%B0%E5%86%85%E6%A0%B8/","excerpt":"","text":"环境 平台：virtualbox虚拟机 系统：CentOS 7.6 旧内核：3.10.0-957.5.1.el7.x86_64 安装的新内核：4.4.176-1.el7.elrepo.x86_64 步骤 查看当前内核 1uname -a 查看系统版本 1cat /etc/redhat-release 查看已安装的内核 1rpm -qa | grep kernel 查看是否有关于内核的源，elrepo（RPM repository for Enterprise Linux package），其实是个企业级Linux的仓库，这里只用到内核包，所以称为内核源 1yum repolist 安装内核源，官网 http://elrepo.org/tiki/tiki-index.php 1yum install https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm 安装完后重新执行yum repolist就能看到内核源已经安装好了 查看内核源配置文件，会发现针对内核的仓库是默认关闭的，enable属性的值为0，所以要不就是设置为1，要不就是yum搜索、查询、安装的时候加上--enablerepo=elrepo-kernel参数 1cat /etc/yum.repos.d/elrepo.repo 查看新的内核包，lt表示longterm（长时间支持版本），ml表示mainline（主线版本），一般服务端的话还是longterm，出了问题能获得更多的官方支持 1yum search --enablerepo=elrepo-kernel lt 查看kernel-lt和kernel-ml的信息，可以发现当前lt版本是4.4.176，而ml版本是5.0.0。在写这篇文章的前一天看还只是4.10.xxx，隔一天就有5.0.0版本，哈哈哈，但是我还是装的lt版本 1yum info --enablerepo=elrepo-kernel kernel-lt kernel-ml 删除旧版本的kernel-tools和kernel-tools-libs，不然在安装时会出现包冲突错误 1yum remove kernel-tools-3.10.0-957.5.1.el7.x86_64 kernel-tools-libs-3.10.0-957.5.1.el7.x86_64 不删除出现的错误如下 安装kernel-lt、kernel-lt-headers、kernel-lt-devel、kernel-lt-tools、kernel-lt-tools-libs，其中只安装kernel系统就能跑了，其他的有可能其他软件需要使用到的而已，看个人选择。文章后面有不同包的一些说明 1yum install --enablerepo=elrepo-kernel -y kernel-lt kernel-lt-headers kernel-lt-devel kernel-lt-tools kernel-lt-tools-libs 查看当前可用的内核列表 1awk -F\\&#x27; &#x27;$1==&quot;menuentry &quot; &#123;print i++ &quot; : &quot; $2&#125;&#x27; /etc/grub2.cfg 查看当前使用的内核，查看GRUB_DEFAULT属性，该值对应的数字就是第11步内核列表前面的序号，这里是save，表示上次开机记住的，由于之前还没有新的内核，所以这里是使用1 : CentOS Linux (3.10.0-957.5.1.el7.x86_64) 7 (Core)这个版本的内核 1cat /etc/default/grub 如果当前使用的内核不是所希望的，可使用grub2-set-default命令进行设置，不要直接修改/etc/default/grub文件，这里设置为0表示下次重启使用0 : CentOS Linux (4.4.176-1.el7.elrepo.x86_64) 7 (Core)这个内核（PS：如果是CentOS 7.0以下的，使用grub来做系统引导的） 1grub2-set-default 0 重启，使内核配置生效 1reboot 重新查看内核版本，就会发现内核已经是刚刚下载的4.4.176内核（kernel-lt版本） 1uname -a 删除旧内核（可选操作），通过rpm -qa | grep kernel查看已有内核，接着使用yum remove进行删除 1yum remove kernel-3.10.0-957.5.1.el7.x86_64 kernel-devel-3.10.0-957.5.1.el7.x86_64 重建grub2的配置文件（可选操作） 1grub2-mkconfig -o /boot/grub2/grub.cfg 这时重新查看可用的内核列表，就没有了旧内核可以选择了 内核相关的包说明 kernel-lt The Linux kernel. (The core of any Linux-based operating system.) 最核心的包，所有Linux系统的基础 kernel-lt-devel Development package for building kernel modules to match the kernel. 内核开发包，更多是提供给内核开发人员开发内核的一些功能模块 kernel-lt-doc Various bits of documentation found in the kernel sources. 内核包的指引文档 kernel-lt-headers Header files of the kernel, for use by glibc. 内核的头文件，一般其他应用需要调用内核能力就要引入这些头文件 kernel-lt-tools Assortment of tools for the kernel. 内核级别的一些工具 kernel-lt-tools-libs Libraries for the kernel tools. 内核级别工具所依赖的包 kernel-lt-tools-libs-devel Development package for the kernel tools libraries. 内核级别工具开发所需的依赖包 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"CentOS","slug":"centos","permalink":"http://gaussli.com/tags/centos/"},{"name":"Kernel","slug":"kernel","permalink":"http://gaussli.com/tags/kernel/"},{"name":"更新内核","slug":"更新内核","permalink":"http://gaussli.com/tags/%E6%9B%B4%E6%96%B0%E5%86%85%E6%A0%B8/"},{"name":"grub2","slug":"grub2","permalink":"http://gaussli.com/tags/grub2/"},{"name":"elrepo","slug":"elrepo","permalink":"http://gaussli.com/tags/elrepo/"}]},{"title":"[J2EE]Java中加密编码算法","slug":"j2ee-java中加密编码算法","date":"2019-03-04T17:34:15.000Z","updated":"2021-07-26T15:14:32.227Z","comments":true,"path":"2019/03/05/j2ee-java中加密编码算法/","link":"","permalink":"http://gaussli.com/2019/03/05/j2ee-java%E4%B8%AD%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/","excerpt":"","text":"一般的加密算法有三种常用的: 单向加密，不可逆的编码，例如MD5，SHA，HMAC 对称加密，用一个密钥来加密和解密，例如AES，DES，PBE 非对称加密，拥有一对密钥（公钥和私钥），公钥加密的数据需要私钥解密，私钥加密的数据需要公钥解密 Java中有KeyGenerator，SecretKeyFactory，KeyPairGenerator分别对应上述三种加密算法类型。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"加密","slug":"加密","permalink":"http://gaussli.com/tags/%E5%8A%A0%E5%AF%86/"},{"name":"解密","slug":"解密","permalink":"http://gaussli.com/tags/%E8%A7%A3%E5%AF%86/"},{"name":"编码","slug":"编码","permalink":"http://gaussli.com/tags/%E7%BC%96%E7%A0%81/"},{"name":"解码","slug":"解码","permalink":"http://gaussli.com/tags/%E8%A7%A3%E7%A0%81/"},{"name":"Java","slug":"java","permalink":"http://gaussli.com/tags/java/"}]},{"title":"[iOS]cocoapods安装libwebp失败问题","slug":"ios-cocoapods安装libwebp失败问题","date":"2019-02-26T19:11:54.000Z","updated":"2021-07-26T15:10:03.492Z","comments":true,"path":"2019/02/27/ios-cocoapods安装libwebp失败问题/","link":"","permalink":"http://gaussli.com/2019/02/27/ios-cocoapods%E5%AE%89%E8%A3%85libwebp%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/","excerpt":"","text":"由于libwebp的源在google上，即使全局翻墙也无济于事，猜想是因为pod内部的代理机制不走自己的ss，于是参考了一下方法。 找一个国内镜像，替换掉libwebp的源，找到的国内镜像在https://github.com/webmproject/libwebp.git中 查看pod本地库路径：pod repo 查找libwebp的记录路径：find ~/.cocoapods/repos/master -iname libwebp 进入libwebp的记录路径：cd /Users/lijinhai/.cocoapods/repos/master/Specs/1/9/2/libwebp 修改文件1.0.0/libwebp.podspec.json，修改其中的 1234&quot;source&quot;: &#123; &quot;git&quot;: &quot;https://chromium.googlesource.com/webm/libwebp&quot;, &quot;tag&quot;: &quot;v1.0.0&quot;&#125;, 改为： 1234&quot;source&quot;: &#123; &quot;git&quot;: &quot;https://github.com/webmproject/libwebp.git&quot;, &quot;tag&quot;: &quot;v1.0.0&quot;&#125;, 最后在项目中执行pod install或pod update即可 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"}],"tags":[{"name":"cocoapod","slug":"cocoapod","permalink":"http://gaussli.com/tags/cocoapod/"},{"name":"pod","slug":"pod","permalink":"http://gaussli.com/tags/pod/"},{"name":"libwebp","slug":"libwebp","permalink":"http://gaussli.com/tags/libwebp/"}]},{"title":"[Linux]Gitlab的安装和配置","slug":"linux-gitlab的安装和配置","date":"2018-11-09T03:45:14.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2018/11/09/linux-gitlab的安装和配置/","link":"","permalink":"http://gaussli.com/2018/11/09/linux-gitlab%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"1. 环境CentOS：7.2 IP：172.16.17.138 2. 官网上的默认安装方式是安装最新版本的官网安装流程 3. gitlab安装流程3.1 下载\b安装包所有历史版本下载地址 3.2 执行RPM安装1EXTERNAL_URL=&quot;http://172.16.17.138:8888&quot; rpm -i gitlab.rpm 其中http://172.16.17.138:8888改成自己对应访问的ip/域名和端口 3.3 默认配置文件和路径 /etc/gitlab/gitlab.rc：为gitlab的主要配置文件 /var/opt/gitlab/nginx/：\bgitlab中nginx对应的配置\b\b文件夹 /var/opt/gitlab/git-data/：默认的代码仓库位置 /var/opt/gitlab/backups/：默认的备份\b文件位置 3.4 \b一般的配置说明 gitlab访问路径 1external_url &#x27;http://172.16.17.138:8888&#x27; 单IP最大访问量 1234567gitlab_rails[&#x27;rack_attack_git_basic_auth&#x27;] = &#123; &#x27;enabled&#x27; =&gt; true, # 是否启动防攻击配置 &#x27;ip_whitelist&#x27; =&gt; [&quot;127.0.0.1&quot;], # 白名单 &#x27;maxretry&#x27; =&gt; 10000, # 单个IP最大访问量 &#x27;findtime&#x27; =&gt; 60, &#x27;bantime&#x27; =&gt; 3600&#125; \b代码仓库自定义 12345git_data_dirs(&#123; &quot;default&quot; =&gt; &#123; &quot;path&quot; =&gt; &quot;/mnt/data1/gitlab/git-data&quot; &#125;&#125;) 备份路径自定义 12gitlab_rails[&#x27;manage_backup_path&#x27;] = truegitlab_rails[&#x27;backup_path&#x27;] = &quot;/mnt/data1/gitlab/backups&quot; 备份文件保存失效，单位为秒。由于 72460*60 = 604800，所以当前为7天 1gitlab_rails[&#x27;backup_keep_time&#x27;] = 604800 3.5 日常备份计划每日凌晨3点自动进行备份，备份路径为/mnt/data1/gitlab/backups，并把\b执行\b过程的\b信息日志保存下来\b。备份通过命令gitlab-rake gitlab:backup:create执行，每日循环通过命令crontab执行。 编写备份脚本gitlab_backup.sh，放在/mnt/data1/gitlab/backups/中： 12345time=$(date &quot;+%Y%m%d%H%M%S&quot;)path=&quot;/mnt/data1/gitlab/backups/&quot;gitlab-rake gitlab:backup:create &gt; $&#123;path&#125;$&#123;time&#125;_gitlab_backup.log 通过crontab -e添加循环\b任务到系统中，执行service crond restart\b重启crontab即可。 \b结果如图： (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"Gitlab","slug":"gitlab","permalink":"http://gaussli.com/tags/gitlab/"},{"name":"Git","slug":"git","permalink":"http://gaussli.com/tags/git/"},{"name":"代码","slug":"代码","permalink":"http://gaussli.com/tags/%E4%BB%A3%E7%A0%81/"}]},{"title":"[Linux]vsftpd安装配置","slug":"linux-vsftpd安装配置","date":"2018-08-01T07:31:49.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2018/08/01/linux-vsftpd安装配置/","link":"","permalink":"http://gaussli.com/2018/08/01/linux-vsftpd%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","excerpt":"","text":"1. vsftpd安装通过yum安装即可。 1yum install vsftpd 2. 关键\b配置文件和目录路径 /etc/vsftpd/vsftpd.conf：vsftpd的主要配置文件，包含了vsftpd的配置 /etc/vsftpd/ftpusers：全局禁用用户文件，里面的用户都不能通过ftp登录 /etc/vsftpd/user_list：该文件根据 vsftpd.conf 里的配置不同而作用不同，默认情况下是和 ftpusers 文件作用一样 /\betc/vsftpd/vuser-list：虚拟用户登录的账号和密码 /mnt/data1/ftp：ftp文档的跟目录，该目录只允许 ftpuser 用户登录 /mnt/data1/ftp/wuliu 或 dianjian 或 ...：各个虚拟用户（子用户）的ftp文档目录，上传下载都在\b这些目录里 3. vsftpd.conf关键配置 anonymous_enable=NO：是否允许匿名用户登录 local_root=/mnt/data1/ftp：本地用户登录的ftp文件路径 anon_root=/mnt/data1/ftp：匿名用户登录的ftp文件路径 虚拟用户相关配置 虚拟用户相关12345678# 启动虚拟用户guest_enable=YES# 指定虚拟用户的宿主用户guest_username=ftpuser# 设定虚拟用户的权限符合他们的宿主用户virtual_use_local_privs=YES# 配置虚拟用户权限文件夹user_config_dir=/etc/vsftpd/vuser_config 被动ftp相关配置 1234# 配置被动ftp，指定6000-7000端口，好在小科云管理后台开通对应端口范围pasv_enable=YESpasv_min_port=6000pasv_max_port=7000 4. vsftpd服务\b运行相关12345678# \b启动服务systemctl start vsftpd# 重启服务systemctl restart vsftpd# 停止服务\bsystemctl stop vsftpd# 查看服务状态systemctl status vsftpd 5. 新增一个可登录用户过程，以“dianjian”用户新增\b为例1）在 vuser-list 文件中添加\b用户的账号和密码，格式为一行账号，一行密码。 12dianjian12345 随后执行用户账号密码加密 1db_load -T -t hash -f /etc/vsftpd/vuser-list /etc/vsftpd/vuser-list.db 2）创建dianjian\b用户的ftp文档目录 1234# 创建目录mkdir /mnt/data1/ftp/dianjian# 配置用户和组归属，不做\b次步操作则没权限登录chown -R ftpuser:ftpuser /mnt/data1/ftp/dianjian 3）创建dianjian用户配置 12# 打开 dianjian 配置文件，文件名一定要和用户名一致vim /etc/vsftpd/vuser_config/dianjian 文档的内容 123456local_root=/mnt/data1/ftp/dianjianwrite_enable=yesanon_world_readable_only=noanon_upload_enable=yesanon_mkdir_write_enable=yesanon_other_write_enable=yes 至此，一个虚拟用户整个流程创建完毕 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"yum","slug":"yum","permalink":"http://gaussli.com/tags/yum/"},{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"vsftpd","slug":"vsftpd","permalink":"http://gaussli.com/tags/vsftpd/"}]},{"title":"[SpringBoot]FirstSpringBootApplication","slug":"springboot-firstspringbootapplication","date":"2018-07-31T08:51:49.000Z","updated":"2021-07-26T15:13:30.094Z","comments":true,"path":"2018/07/31/springboot-firstspringbootapplication/","link":"","permalink":"http://gaussli.com/2018/07/31/springboot-firstspringbootapplication/","excerpt":"","text":"pom.xml基础说明12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;myproject&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.0.BUILD-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;!-- One or more &quot;Starter&quot; and other dependercies... --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- (you don&#x27;t need this if you are using a .RELEASE version) --&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt;&lt;/project&gt; 简单的 Controller 代码123456789101112131415161718import org.springframework.boot.*;import org.springframework.boot.autoconfigure.*;import org.springframework.web.bind.annotation.*;// @Controler 或 @RestController 让 Spring 识别处理 Web 请求@RestController@SpringBootApplication // 或者@EnableAutoConfiguration + @ComponentScan + @Configurationpublic class Example &#123; // RequestMapping 提供请求的路由信息 @RequestMapping(&quot;/&quot;) String home() &#123; return &quot;Hello World!&quot;; &#125; public static void main(String[] args) throws Exception &#123; SpringApplication.run(Example.class, args); &#125;&#125; Starters 列表 名称 描述 \bspring-boot-starter spring-boot-starter-activemq spring-boot-starter-amqp spring-boot-starter-aop spring-boot-starter-artemis spring-boot-starter-batch spring-boot-starter-cache spring-boot-starter-cloud-connectors spring-boot-starter-data-cassantra spring-boot-starter-data-cassantra-reactive spring-boot-starter-data-couchbase spring-boot-starter-data-couchbase-reactive spring-boot-starter-data-elasticsearch spring-boot-starter-data-jpa spring-boot-starter-data-ldap spring-boot-starter-data-mangodb spring-boot-starter-data-mangodb-reactive spring-boot-starter-data-neo4j spring-boot-starter-data-redis spring-boot-starter-data-redis-reactive spring-boot-starter-data-rest spring-boot-starter-data-solr spring-boot-starter-freemarker spring-boot-starter-groovy-templates spring-boot-starter-hateoas spring-boot-starter-integration spring-boot-starter-jdbc spring-boot-starter-jersey spring-boot-starter-jooq spring-boot-starter-json spring-boot-starter-jta-atomikos spring-boot-starter-jta-bitronix spring-boot-starter-jta-narayama spring-boot-starter-mail spring-boot-starter-mustache spring-boot-starter-quartz spring-boot-starter-security spring-boot-starter-test spring-boot-starter-thymeleaf spring-boot-starter-validation spring-boot-starter-web spring-boot-starter-web-service spring-boot-starter-webflux spring-boot-starter-websocket - 监控管理 - - spring-boot-starter-actuator - 技术替换 - - spring-boot-starter-jetty Default: tomcat spring-boot-starter-log4j2 Default: logging spring-boot-starter-logging Default spring-boot-starter-reactor-netty spring-boot-starter-tomcat Default spring-boot-starter-undertow Default: tomcat Spring Banner.txt占位符 名称 描述 ${application.version} ${application.formatted-version} ${springboot-version} ${springboot-formatted-version} ${Ansi.NAME}(or${AnsiColor.NAME}) ${AnsiBackground.NAME} ${AnsiStyle.NAME} ${application.title} (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"SpringBoot","slug":"tech/javaweb/springboot","permalink":"http://gaussli.com/categories/tech/javaweb/springboot/"}],"tags":[{"name":"SpringBoot","slug":"springboot","permalink":"http://gaussli.com/tags/springboot/"},{"name":"基础","slug":"基础","permalink":"http://gaussli.com/tags/%E5%9F%BA%E7%A1%80/"}]},{"title":"[Mac]brew和brew-Cask的区别","slug":"mac-brew和brew-cask的区别","date":"2018-01-12T07:59:57.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2018/01/12/mac-brew和brew-cask的区别/","link":"","permalink":"http://gaussli.com/2018/01/12/mac-brew%E5%92%8Cbrew-cask%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"brew是下载源代码包，通过源码安装的方式进行安装的，当前大部分软件还是通过configure、make、make install安装的，简单来说就是安装只有命令行的软件。 brew-cask是安装普通软件，通过下载dmg或dkg文件来安装的，一般来说就是有用户界面的软件。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Mac","slug":"tech/mac","permalink":"http://gaussli.com/categories/tech/mac/"}],"tags":[{"name":"brew","slug":"brew","permalink":"http://gaussli.com/tags/brew/"},{"name":"brew-cask","slug":"brew-cask","permalink":"http://gaussli.com/tags/brew-cask/"}]},{"title":"[Linux]后台执行jar文件","slug":"linux-后台执行jar文件","date":"2017-11-07T07:39:19.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2017/11/07/linux-后台执行jar文件/","link":"","permalink":"http://gaussli.com/2017/11/07/linux-%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8Cjar%E6%96%87%E4%BB%B6/","excerpt":"","text":"1java -jar xxx.jar &gt; log.file 2&gt;&amp;1 &amp; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"jar","slug":"jar","permalink":"http://gaussli.com/tags/jar/"}]},{"title":"[J2EE]Log4j配置说明","slug":"j2ee-log4j配置说明","date":"2017-11-06T05:35:27.000Z","updated":"2021-07-26T15:14:41.452Z","comments":true,"path":"2017/11/06/j2ee-log4j配置说明/","link":"","permalink":"http://gaussli.com/2017/11/06/j2ee-log4j%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/","excerpt":"","text":"J2EE-Log4j配置说明 配置根Logger，语法为 log4j.rootLogger=[level],appenderName,appenderName2,… level级别种类 ALL ERROR：严重错误，主要是程序错误 WARN：一般警告，比如session丢失 INFO：一般显示信息，比如登录登出 DEBUG：程序的调试信息 配置日志信息输出目的地 log4j.appender.appenderName=fully.qualified.name.of.appender.class org.apache.log4j.ConsoleAppender：控制台 Threshold=DEBUG：指定日志信息的输出最低层次 ImmediateFlush=TRUE：默认值是true，所有的消息都会被立即输出 Target=System.err：默认值是System.out，输出到控制台（err为红色，out为黑色） org.apache.log4j.FileAppender：文件 Threshold=INFO：指定日志信息的输出最低层次 ImmediateFlush=TRUE：默认值是true，所有的消息都会被立即输出 File=Path/to/log/file：指定消息输出到“Path/to/log/file”文件 Append=FALSE：默认值是true，将消息追加到指定文件中，false指将消息覆盖指定的文件内容 Encoding=UTF-8：可以指定文件的编码格式 org.apache.log4j.DailyRollingFileAppender：每天产生一个日志文件 Threshold=WARN：指定日志消息的输出最低层次 ImmediateFlush=TRUE：默认值是true，所有的消息都会被立即输出 File=Path/to/log/file：指定消息输出到“Path/to/log/file”文件 Append=FALSE：默认值是true，将消息追加到指定文件中，false指将消息覆盖指定的文件内容 DatePattern=’.’yyyy-ww：每周滚动一次文件，即每周产生一个新的文件，还可以使用以下参数： ‘.’yyyy-MM：每月 ‘.’yyyy-ww：每周 ‘.’yyyy-MM-dd：每天 ‘.’yyyy-MM-dd-a：每天两次 ‘.’yyyy-MM-dd-HH：每小时 ‘.’yyyy-MM-dd-HH-mm：每分钟 Encoding=UTF-8：可以指定文件的编码格式 org.apache.log4j.RollingFileAppender：文件大小到达指定大小的时候产生一个新文件 Threshold=ERROR：指定日志消息的输出最低层次 ImmediateFlush=TRUE：默认值是true，所有的消息都会被立即输出 File=Path/to/log/file：指定消息输出到“Path/to/log/file”文件 Append=FALSE：默认值是true，将消息追加到指定文件中，false指将消息覆盖指定的文件内容 MaxFileSize=100KB：后缀可以是KB，MB，GB。在日志文件到达该大小时，将会自动滚动新增一个文件。如example.log.1 MaxBackupIndex=2：指定可以产生的滚动文件的最大数 Encoding=UTF-8：可以指定文件的编码格式 org.apache.log4j.WriterAppender：将日志信息以流格式发送到任意指定的地方 配置日志信息的格式 log4j.appender.appenderName.layout=fully.qualified.name.of.layout.class org.apache.log4j.HTMLLayout：以HTML表格形式布局 LocationInfo=TRUE：默认值是false，输出java文件名称和行号 Title=XXX Log Message：默认值是Log4jLog Message org.apache.log4j.PatternLayout：可以灵活地指定布局模式 ConversionPattern=%m%n：格式化指定的恶消息 %m：输出代码中指定的消息 %p：输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL ％r：输出自应用启动到输出该log信息耗费的毫秒数 ％c：输出所属的类目，通常就是所在类的全名，包括包名，如：com.gaussli.helloworld.HelloWorld %t：输出产生该日志事件的线程名 ％n：输出一个回车换行符，Windows平台为“\\r\\n”，Unix平台为“\\n” ％d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy年MM月dd日 HH:mm:ss,SSS}，输出为：2017年07月26日 15:22:34,145 %l：输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数，如：”Helloworld.main(HelloWorld.java:10)” ％F：输出日志消息产生时所在文件名称，不包括包名，如：HelloWorld.java ％L：输出代码中的行号 ％x：输出和当前线程相关联的NDC（嵌套诊断环境），像java servlets多客户多线程的应用中 ％％：输出一个“％”字符 可以在％与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如： ％5c：输出类目全名，最小宽度是5，默认的情况下右对齐 ％-5c：输出类目全名，最小宽度是5，“-”指定左对齐 ％.5c：输出类目全名，最大宽度是5，将左边多出的字符截掉 ％20.30c：输出类目全名，&lt;20补空格，并右对齐；&gt;30将左边多出的字符截掉 org.apache.log4j.SimpleLayout：包含日志信息的级别和信息字符串 org.apache.log4j.TTCCLayout：包含日志产生的时间、线程、类别等等信息 org.apache.log4j.xml.XMLLayout：以XML形式布局 指定特定包的输出特定的级别 log4j.logger.org.springframework=DEBUG (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"log4j","slug":"log4j","permalink":"http://gaussli.com/tags/log4j/"},{"name":"logger","slug":"logger","permalink":"http://gaussli.com/tags/logger/"}]},{"title":"[SpringBoot]配置文件加载顺序","slug":"springboot-配置文件加载顺序","date":"2017-11-01T08:23:06.000Z","updated":"2021-07-26T15:13:33.236Z","comments":true,"path":"2017/11/01/springboot-配置文件加载顺序/","link":"","permalink":"http://gaussli.com/2017/11/01/springboot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/","excerpt":"","text":"在命令行中传入的参数。 SPRING_APPLICATION_JSON 中的属性。SPRING_APPLICATION_JSON 是以 JSON 格式配置再系统环境变量中的内容。 java:comp/env 中的 JNDI 属性。 Java 的系统属性，可以通过 System.getProperties() 获得的内容。 操作系统的环境变量。 通过 random.* 配置的随机属性。 位于当前应用 jar 包之外，针对不同 {profile} 环境的配置文件内容，例如 application-{profile}.properties 或是 YAML 定义的配置文件。 位于当前应用 jar 包之内，针对不同 {profile} 环境的配置文件内容，例如 application-{profile}.properties 或是 YAML 定义的配置文件。 位于当前应用 jar 包之外的 application.properties 和 YAML 配置内容。 位于当前应用 jar 包之内的 application.properties 和 YAML 配置内容。 在 @Configuration 注解修改的类中，通过 @PropertySource 注解定义的属性。 应用默认属性，使用 SpringApplication.setDefaultProperties 定义的内容。 PS：其中第7项和第9项都是从应用 jar 包之外读取配置文件，所以，实现外部化配置的原理就是从此切入，为其指定外部配置文件的加载位置来取代 jar 包之内的配置内容。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"SpringBoot","slug":"tech/javaweb/springboot","permalink":"http://gaussli.com/categories/tech/javaweb/springboot/"}],"tags":[{"name":"配置文件","slug":"配置文件","permalink":"http://gaussli.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"},{"name":"SpringBoot","slug":"springboot","permalink":"http://gaussli.com/tags/springboot/"},{"name":"加载","slug":"加载","permalink":"http://gaussli.com/tags/%E5%8A%A0%E8%BD%BD/"}]},{"title":"[Mac]已安装的ProvisioningProfiles位置","slug":"mac-已安装的provisioningprofiles位置","date":"2017-11-01T08:03:46.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2017/11/01/mac-已安装的provisioningprofiles位置/","link":"","permalink":"http://gaussli.com/2017/11/01/mac-%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84provisioningprofiles%E4%BD%8D%E7%BD%AE/","excerpt":"","text":"1/Users/&lt;username&gt;/Library/MobileDevice/Provisioning Profiles (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Mac","slug":"tech/mac","permalink":"http://gaussli.com/categories/tech/mac/"}],"tags":[{"name":"ProvisioningProfiles","slug":"provisioningprofiles","permalink":"http://gaussli.com/tags/provisioningprofiles/"}]},{"title":"[J2EE]阿里的druid实现密码加密","slug":"j2ee-阿里的druid实现密码加密","date":"2017-11-01T06:25:56.000Z","updated":"2021-07-26T15:15:01.366Z","comments":true,"path":"2017/11/01/j2ee-阿里的druid实现密码加密/","link":"","permalink":"http://gaussli.com/2017/11/01/j2ee-%E9%98%BF%E9%87%8C%E7%9A%84druid%E5%AE%9E%E7%8E%B0%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/","excerpt":"","text":"1java -cp druid-1.1.3.jar com.alibaba.druid.filter.config.ConfigTools &lt;password&gt; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"加密","slug":"加密","permalink":"http://gaussli.com/tags/%E5%8A%A0%E5%AF%86/"},{"name":"Druid","slug":"druid","permalink":"http://gaussli.com/tags/druid/"},{"name":"密码","slug":"密码","permalink":"http://gaussli.com/tags/%E5%AF%86%E7%A0%81/"}]},{"title":"[Linux]MySQL安装","slug":"linux-mysql安装","date":"2017-09-12T07:20:01.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2017/09/12/linux-mysql安装/","link":"","permalink":"http://gaussli.com/2017/09/12/linux-mysql%E5%AE%89%E8%A3%85/","excerpt":"","text":"0. 一些说明MySQL版本：5.6.37MySQL安装目录：/usr/lcoal/mysql 1. 下载MySQL的tar.gz版本，解压并复制到安装的目录下12tar -zxvf mysql-file.tar.gzcp -R mysql-file /usr/local/mysql 2. 进入MySQL安装目录1cd /usr/local/mysql 3. 执行./scripts/mysql_install_db –help查看初始化安装参数1./scripts/mysql_install_db --help 正常的话出现: 12345678910111213141516171819202122232425262728293031323334353637383940Usage: ./scripts/mysql_install_db [OPTIONS] --basedir=path The path to the MySQL installation directory. --builddir=path If using --srcdir with out-of-directory builds, you will need to set this to the location of the build directory where built files reside. --cross-bootstrap For internal use. Used when building the MySQL system tables on a different host than the target. --datadir=path The path to the MySQL data directory. If missing, the directory will be created, but its parent directory must already exist and be writable. --defaults-extra-file=name Read this file after the global files are read. --defaults-file=name Only read default options from the given file name. --force Causes mysql_install_db to run even if DNS does not work. In that case, grant table entries that normally use hostnames will use IP addresses. --help Display this help and exit. --ldata=path The path to the MySQL data directory. Same as --datadir. --no-defaults Don&#x27;t read default options from any option file. --keep-my-cnf Don&#x27;t try to create my.cnf based on template. Useful for systems with working, updated my.cnf. Deprecated, will be removed in future version. --random-passwords Create and set a random password for all root accounts and set the &quot;password expired&quot; flag, also remove the anonymous accounts. --rpm For internal use. This option is used by RPM files during the MySQL installation process. --skip-name-resolve Use IP addresses rather than hostnames when creating grant table entries. This option can be useful if your DNS does not work. --srcdir=path The path to the MySQL source directory. This option uses the compiled binaries and support files within the source tree, useful for if you don&#x27;t want to install MySQL yet and just want to create the system tables. --user=user_name The login username to use for running mysqld. Files and directories created by mysqld will be owned by this user. You must be root to use this option. By default mysqld runs using your current login name and files and directories that it creates will be owned by you.Any other options are passed to the mysqld program. 若出现以下情况： 12FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:Data::Dumper 则执行perl-Data-Dumper的安装 1yum install perl-Data-Dumper 4. 创建MySQL组和用户12groupadd mysqluseradd -M -s /sbin/nologin mysql -g mysql 5. 执行MySQL初始化安装命令1./scripts/mysql_install_db --basedir=/usr/local/mysql --user=mysql 若出现了[ERROR]了，尝试删除data目录再重新执行 【更新】：当安装MySQL 5.7.20的时候，发现mysql_install_db已经被废弃（deprecated）了，而且mysql_install_db执行文件存放位置也从scripts目录转移到了bin目录下；此外，由于该命令废弃了，所以当前建议使用mysqld –initialize，提示如下代码： 122018-01-18 17:31:30 [WARNING] mysql_install_db is deprecated. Please consider switching to mysqld --initialize2018-01-18 17:31:30 [ERROR] The data directory needs to be specified. mysqld存放在bin目录下，查看详细信息可用命令./mysqld --verbose --help，所以初始化安装命令变为： 1./mysqld --initialize --basedir=/usr/local/mysql --user=mysql 6. my.cnf模版1234567891011121314151617181920212223242526272829303132333435363738394041424344# For advice on how to change settings please see# http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html[client]default-character-set = utf8mb4[mysqld]# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.basedir = /usr/local/mysql/datadir = /usr/local/mysql/data/port = 3306# server_id = .....# socket = .....# 忽略大小写lower_case_table_names = 1# 默认编码character_set_server = utf8mb4init_connect = &#x27;SET NAMES utf8mb4&#x27;log_error = /usr/local/mysql/log/mysql-error.logslow_query_log = 1long_query_time = 1 # 慢查询时间，超过1s则为慢查询slow_query_log_file = /usr/local/mysql/log/mysql-slow.log# Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2M sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES [mysql]default-character-set = utf8mb4 针对版本5.7.25 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# For advice on how to change settings please see# http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html[client]default-character-set = utf8mb4socket = /usr/local/mysql/data/mysql.sock[mysqld]# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.basedir = /usr/local/mysqldatadir = /usr/local/mysql/dataport = 3360# server_id = .....socket = /usr/local/mysql/data/mysql.sockpid_file = /usr/local/mysql/data/mysql.pid# 忽略大小写lower_case_table_names = 1# 默认编码character_set_server = utf8mb4init_connect = &#x27;SET NAMES utf8mb4&#x27;log_error = /usr/local/mysql/data/mysql-error.logslow_query_log = 1long_query_time = 1 # 慢查询时间，超过1s则为慢查询slow_query_log_file = /usr/local/mysql/data/mysql-slow.log# 开启查询缓存# 针对警告&quot;TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option&quot;，版本5.7explicit_defaults_for_timestamp=true# Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2M sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO my.cnf找寻顺序：/etc/my.cnf：Global options/etc/mysql/my.cnf：Global optionsSYSCONFDIR/my.cnf：Global options$MYSQL_HOME/my.cnf：Server-specific options (server only)defaults-extra-file：The file specified with –defaults-extra-file, if any~/.my.cnf：User-specific options~/.mylogin.cnf：User-specific login path options (clients only) 7. 把文件夹权限设为mysql用户1chown -R mysql:mysql /usr/local/mysql/data 除了data文件夹，log日志文件也需要mysql用户权限，若log文件位置如my.cnf模版，则把该log文件夹权限也设为mysql用户 1chown -R mysql:mysql /usr/local/mysql/log 8. 查看初始化安装命令结果，根据建议执行下一步操作1234567891011121314151617181920212223242526272829303132333435363738394041To start mysqld at boot time you have to copysupport-files/mysql.server to the right place for your systemPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !To do so, start the server, then issue the following commands: /usr/local/mysql/bin/mysqladmin -u root password &#x27;new-password&#x27; /usr/local/mysql/bin/mysqladmin -u root -h iZwz9aj3xjio5q3ujyc9ecZ password &#x27;new-password&#x27;Alternatively you can run: /usr/local/mysql/bin/mysql_secure_installationwhich will also give you the option of removing the testdatabases and anonymous user created by default. This isstrongly recommended for production servers.See the manual for more instructions.You can start the MySQL daemon with: cd . ; /usr/local/mysql/bin/mysqld_safe &amp;You can test the MySQL daemon with mysql-test-run.pl cd mysql-test ; perl mysql-test-run.plPlease report any problems at http://bugs.mysql.com/The latest information about MySQL is available on the web at http://www.mysql.comSupport MySQL by buying support/licenses at http://shop.mysql.comWARNING: Found existing config file /usr/local/mysql/my.cnf on the system.Because this file might be in use, it was not replaced,but was used in bootstrap (unless you used --defaults-file)and when you later start the server.The new default config file was created as /usr/local/mysql/my-new.cnf,please compare it with your file and take the changes you need. 9. 建议1: MySQL自启动自启动有两个步骤需要做的，一是把MySQL添加到系统服务，二是添加到自启动列表 123456# 软链接方式添加到系统服务中ln -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld# 添加MySQL服务到自启动列表, 前提保证服务拥有‘x’权限chkconfig --add mysqld# 查看自启动服务是否包含MySQL服务chkconfig --list 10. 建议2: 执行bin/mysql_secure_installation1./bin/mysql_secure_installation 这个命令会处理以下内容： 设置root密码，当然也可以跳过 是否删除匿名用户 是否禁止root用户远程登录 是否删除test数据库 是否立即刷新已变更的权限和内容 【更新】5.7.20版本root用户会有个临时的密码，可通过my.cnf中的mysql-error.log查看到A temporary password is generated for root@localhost: xxx的语句，xxx就是临时的密码了。 若执行过程中出现以下错误： 1ERROR 2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/tmp/mysql.sock&#x27; (2) 则说明MySQL尚未启动，执行service mysqld start启动。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"MySQL","slug":"mysql","permalink":"http://gaussli.com/tags/mysql/"},{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"}]},{"title":"[Linux]创建用户","slug":"linux-创建用户","date":"2017-08-30T07:38:00.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2017/08/30/linux-创建用户/","link":"","permalink":"http://gaussli.com/2017/08/30/linux-%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/","excerpt":"","text":"创建用户组 groupadd 创建用户 useradd -M -s /sbin/nologin -g -M：表示不创建用户目录-s：表示用户执行的shell，nologin表示该shell不可作为登录，即该用户不可登录 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"useradd","slug":"useradd","permalink":"http://gaussli.com/tags/useradd/"},{"name":"groupadd","slug":"groupadd","permalink":"http://gaussli.com/tags/groupadd/"},{"name":"用户","slug":"用户","permalink":"http://gaussli.com/tags/%E7%94%A8%E6%88%B7/"},{"name":"nologin","slug":"nologin","permalink":"http://gaussli.com/tags/nologin/"}]},{"title":"[Linux]挂载硬盘","slug":"linux-挂载硬盘","date":"2017-08-28T07:48:29.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2017/08/28/linux-挂载硬盘/","link":"","permalink":"http://gaussli.com/2017/08/28/linux-%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/","excerpt":"","text":"fdisk -l：查看当前机器硬盘及分区情况 fdisk /dev/vdb：进入硬盘分区 n：进入分区命令 p：主分区；e：逻辑分区 w：保存退出 fdisk -l：再次查看当前机器硬盘及分区情况 mkfs -t ext3 -c /dev/vdb1：深入格式化；mkfs.ext3 /dev/vdb1：快速格式化 mount /dev/vdb1 /mnt/ df -k：查看挂载信息 修改文件/etc/fstab，添加/dev/vdb1 /mnt ext4 defaults 0 0，实现开机自动挂载 额外： 挂载NTFS数据盘：mount -t ntfs-3g /dev/xvdb5 /mnt/datab5 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"硬盘","slug":"硬盘","permalink":"http://gaussli.com/tags/%E7%A1%AC%E7%9B%98/"},{"name":"挂载","slug":"挂载","permalink":"http://gaussli.com/tags/%E6%8C%82%E8%BD%BD/"},{"name":"fdisk","slug":"fdisk","permalink":"http://gaussli.com/tags/fdisk/"},{"name":"mount","slug":"mount","permalink":"http://gaussli.com/tags/mount/"}]},{"title":"[Maven]可继承的POM元素","slug":"maven-可继承的pom元素","date":"2017-08-08T08:09:02.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2017/08/08/maven-可继承的pom元素/","link":"","permalink":"http://gaussli.com/2017/08/08/maven-%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%9A%84pom%E5%85%83%E7%B4%A0/","excerpt":"","text":"groupId: 项目组ID， 项目坐标的核心元素。 version: 项目版本，项目坐标的核心元素。 description: 项目的描述信息。 organization: 项目的组织信息。 inceptionYear: 项目的创始年份。 url: 项目的URL地址。 developers: 项目的开发者信息。 contributors: 项目的贡献者信息。 distributionManagement: 项目的部署配置。 issueManagement: 项目的缺陷跟踪系统信息。 ciManagement: 项目的持续集成系统信息。 scm: 项目的版本控制系统信息。 mailingLists: 项目的邮件列表信息。 properties: 自定义的Maven属性。 dependencies: 项目的依赖配置。 dependencyManagement: 项目的依赖管理配置。 repositories: 项目的仓库配置。 build: 包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等。 reporting: 包括项目的报告输出目录配置、报告插件配置等。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Maven","slug":"tech/maven","permalink":"http://gaussli.com/categories/tech/maven/"}],"tags":[{"name":"Maven","slug":"maven","permalink":"http://gaussli.com/tags/maven/"},{"name":"pom","slug":"pom","permalink":"http://gaussli.com/tags/pom/"},{"name":"继承","slug":"继承","permalink":"http://gaussli.com/tags/%E7%BB%A7%E6%89%BF/"}]},{"title":"[J2EE]Mavan搭建最小化SpringMVC项目","slug":"j2ee-mavan搭建最小化springmvc项目","date":"2017-07-27T06:21:41.000Z","updated":"2021-07-26T15:14:44.632Z","comments":true,"path":"2017/07/27/j2ee-mavan搭建最小化springmvc项目/","link":"","permalink":"http://gaussli.com/2017/07/27/j2ee-mavan%E6%90%AD%E5%BB%BA%E6%9C%80%E5%B0%8F%E5%8C%96springmvc%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"搭建SpringMVC框架需要Spring支持 pom.xml依赖spring-mvc和spring-context 12345678910 &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt; 配置web.xml 1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app version=&quot;3.1&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/applicationContext.xml&lt;/param-value&gt; &lt;!-- 默认是/WEB-INF/applicationContext.xml --&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt; org.springframework.web.context.ContextLoaderListener &lt;/listener-class&gt; &lt;/listener&gt; &lt;servlet&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/SpringMVC-servlet.xml&lt;/param-value&gt; &lt;!-- 默认是/WEB-INF/[servlet名字]-servlet.xml --&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 其中，必要的配置就是指定servlet和listener。 ContextLoaderListener指定了IOC容器初始化的方法 DispatcherServlet则定义了mvc的相关内容，并配置拦截的url，如上面所示，所有/开头的请求，都会通过SpringMVC这个servlet进行处理。 他们都需要一个xml文件，默认位置上面已经说过了。 Spring配置文件（applicationContext.xml）。空的，并没有任何bean 12345678910111213141516&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;&lt;/beans&gt; SpringMVC配置文件（SpringMVC-servlet.xml）。包含扫描controller的配置 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt; &lt;!-- 设置使用注解的类所在的jar包 --&gt; &lt;context:component-scan base-package=&quot;com.gaussli.controller&quot; /&gt;&lt;/beans&gt; Controller文件，在包com.gaussli.controller下 12345678910111213package com.gaussli.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controllerpublic class HelloController &#123; @RequestMapping(&quot;/hello&quot;) public @ResponseBody String test() &#123; return &quot;hello, world! This com from spring!&quot;; &#125;&#125; 添加spring-mvc和spring-context依赖后，maven会自动依赖所有关联的包 spring-webmvc spring-beans spring-core spring-expression spring-web spring-context spring-aop aopalliance commons-logging spring每个jar作用 spring.jar包含有完整发布模块的单个jar包。但不包括mock.jar、aspect.jar、spring-portlet.jar、and spring-hibernate2.jar。 spring-src.zip所有的源代码压缩包。 除了spring.jar文件，Spring还包括有其它21个独立的jar包，各自包含着对应的Spring组件，用户可以根据自己的需要来选择 spring-core.jar这个jar文件包含Spring框架基本的核心工具类。Spring其它组件都要使用到这个包里的类，是其它组件的基本核心，当然也可以在自己的应用系统中使用这些工具类。 外部依赖Commons Logging, (Log4j) spring-beans.jar这个jar文件是所有应用都要用到的，它包含访问配置文件、创建喝管理bean，以及进行Inversion of Control(IoC) / Dependency Injection(DI)操作相关的所有类。如果应用只需基本的IoC/DI支持，引入spring-core.jar和spring-beans.jar文件就可以了。 外部依赖spring-core.jar, (CGLIB) spring-aop.jar这个jar文件包含在应用中使用Spring的AOP特性时所需的类喝源码级元数据支持。使用基于AOP的Spring特性，如声明型事务管理(Declarative Transaction Management)，也要在应用里包含这个jar包。 外部依赖spring-core, (spring-beans, AOP Alliance, CGLIB, Commons Attributes) spring-context.jar这个jar文件为Spring核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI所需的全部类，instrumentation组件以及检验Validation方面的相关类。 外部依赖spring-beans, (spring-aop) spring-dao.jar这个jar文件包含Spring DAO、Spring Transaction进行数据访问的所有类。为了使用声明型事物支持，还需在自己的应用里包含spring-aop.jar。 外部依赖spring-core, (spring-aop, spring-context, JTA API) spring-jdbc.jar这个jar文件包含对Spring对JDBC数据访问进行封装的所有类。 外部依赖spring-beans, spring-dao spring-support.jar这个jar文件包含支持UI模版（Veloctity、FreeMarker、JasperReports），邮件服务，脚本服务（JRuby），缓存Cache（EHCache），任务计划Scheduling（uartz）方面的类。 外部依赖spring-context, (spring-jdbc, Velocity, FreeMarker, JasperReports, BSH, Groovy, JRuby, Quartz, EHCache) spring-web.jar这个jar包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入Web Application Context特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。 外部依赖spring-context, Serlvet API, (JSP API, JSTL, Commons FileUpload, COS) spring-webmvc.jar这个jar文件包含Spring MVC框架相关的所有类。包括框架的Servlets、Web MVC框架、控制器喝视图支持。当然，如果应用使用了独立的MVC框架，则无需这个jar文件里的任何类。 外部依赖spring-web, (spring-support, Tiles, iText, POI) spring-portlet.jarspring自己实现的一个类型Spring MVC的框架。包括一个MVC框架和控制器 外部依赖spring-web, Portlet API, (spring-webmvc) spring-struts.jarStruts框架支持，可以更方便更容易的集成Struts框架 外部依赖spring-web, Struts spring-remoting.jar这个jar文件包括支持EJB、远程调用Remoting（RMI、Hession、Burlap、Http Invoker、JAX-RPC）方面的类。 外部依赖spring-aop, (spring-context, spring-web, Hession, Burlap, JAX-RPC, EJB API) spring-jmx.jar这个jar包提供了对JMX 1.0/1.2的支持类。 外部依赖spring-beans, spring-aop, JMX API spring-jca.jar对JCA 1.0的支持 外部依赖spring-beans, spring-dao,JCA API spring-jdo.jar对JDO 1.0/2.0的支持 外部依赖spring-jdbc, JDO API, (spring-web) spring-jpa.jar对JPA 1.0的支持 外部依赖spring-jdbc, JPA API, (spring-web) spring-hibernate2.jar对Hibernate2.1的支持，已经不建议使用。 外部依赖spring-jdbc, Hibernate2, (spring-web) spring-hibernate3.jar对Hibernate3.0/3.1/3.2的支持 外部依赖spring-jdbc, Hibernate3, (spring-web) spring-toplink.jar对TopLink框架的支持 外部依赖spring-jdbc, TopLink spring-ibatis.jar对iBATIS SQL Maps的支持 外部依赖spring-jdbc, iBATIS SQL Maps spring-mock.jar这个jar文件包括Spring一整套mock类来辅助应用的测试。Spring测试套件使用了其中大量mock类，这样测试就更加简单。模拟HttpServletRequest和HttpServletResponse类在Web应用单元测试是很方便的。并且提供了对JUnit的支持。 外部依赖spring-core spring-aspects.jar提供对AspectJ的支持，以便可以方便的将面向方面的功能集成进IDE中，比如Eclipse AJDT spring-agent.jarSpring的InstrumentationSavingAgent（为InstrumentationLoadTimeWeaver），一个设备代理包，可以参考JDK1.5的Instrumentation功能获得更多信息。 外部依赖none (for use at JVM startup:”-javaagent:spring-agent.jar”) spring-tomcat-weaver.jar扩展Tomcat的ClassLoader，使其可以使用instrumentation（设备）类 外部依赖none (for deployment into Tomcat’s “server/lib” directory) (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"SpringMVC","slug":"springmvc","permalink":"http://gaussli.com/tags/springmvc/"},{"name":"Maven","slug":"maven","permalink":"http://gaussli.com/tags/maven/"}]},{"title":"[Android]对apk进行重新签名","slug":"android-对apk进行重新签名","date":"2017-03-27T08:53:03.000Z","updated":"2021-07-26T15:11:27.995Z","comments":true,"path":"2017/03/27/android-对apk进行重新签名/","link":"","permalink":"http://gaussli.com/2017/03/27/android-%E5%AF%B9apk%E8%BF%9B%E8%A1%8C%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D/","excerpt":"","text":"1jarsigner -verbose -keystore $&#123;KEYSTORE_PATH&#125; -storepass $&#123;STOREPASS&#125; -signedjar $&#123;SIGN_APK_PATH&#125; -digestalg SHA1 -sigalg MD5withRSA $&#123;APK_PATH&#125; $&#123;ALIAS_NAME&#125; -tsa https://timestamp.geotrust.com/tsa (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"Android","slug":"tech/app/android","permalink":"http://gaussli.com/categories/tech/app/android/"}],"tags":[{"name":"apk","slug":"apk","permalink":"http://gaussli.com/tags/apk/"},{"name":"重签名","slug":"重签名","permalink":"http://gaussli.com/tags/%E9%87%8D%E7%AD%BE%E5%90%8D/"}]},{"title":"[J2EE]Tomcat跨域配置","slug":"j2ee-tomcat跨域配置","date":"2017-03-03T08:25:19.000Z","updated":"2021-07-26T15:14:58.354Z","comments":true,"path":"2017/03/03/j2ee-tomcat跨域配置/","link":"","permalink":"http://gaussli.com/2017/03/03/j2ee-tomcat%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE/","excerpt":"","text":"在项目web.xml文件中添加以下代码 1234567891011121314151617181920212223242526272829303132&lt;filter&gt; &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.catalina.filters.CorsFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;cors.allowed.origins&lt;/param-name&gt; &lt;param-value&gt;*&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;cors.allowed.methods&lt;/param-name&gt; &lt;param-value&gt;GET,POST,HEAD,OPTIONS,PUT&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;cors.allowed.headers&lt;/param-name&gt; &lt;param-value&gt;Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;cors.exposed.headers&lt;/param-name&gt; &lt;param-value&gt;Access-Control-Allow-Origin,X-Requested-With,Access-Control-Allow-Credentials&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;cors.support.credentials&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;cors.preflight.maxage&lt;/param-name&gt; &lt;param-value&gt;10&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt; &lt;url-pattern&gt;*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"}],"tags":[{"name":"Tomcat","slug":"tomcat","permalink":"http://gaussli.com/tags/tomcat/"},{"name":"跨域","slug":"跨域","permalink":"http://gaussli.com/tags/%E8%B7%A8%E5%9F%9F/"},{"name":"配置文件","slug":"配置文件","permalink":"http://gaussli.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"}]},{"title":"[iOS]subview中点击事件的坑","slug":"ios-subview中点击事件的坑","date":"2017-02-28T18:05:17.000Z","updated":"2021-07-26T15:09:41.410Z","comments":true,"path":"2017/03/01/ios-subview中点击事件的坑/","link":"","permalink":"http://gaussli.com/2017/03/01/ios-subview%E4%B8%AD%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9D%91/","excerpt":"","text":"如果是自己自定义的一个子view，而这个子view中存在UIButton或UIControl对象，即存在可点击控件的话。单单给UIButton或UIControl对象添加addTarget，绑定点击事件，是不能实现点击的，原因在于他们的父view，即自定义的那个子view，是不可点击的，根据响应者链，如此一来就导致点击事件传递到子view的时候就断了，不能再向下传递了，所以需要给子view添加可点击的处理： 1view.userInteractionEnabled=YES; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"}],"tags":[{"name":"Subview","slug":"subview","permalink":"http://gaussli.com/tags/subview/"},{"name":"UIButton","slug":"uibutton","permalink":"http://gaussli.com/tags/uibutton/"},{"name":"UIControl","slug":"uicontrol","permalink":"http://gaussli.com/tags/uicontrol/"}]},{"title":"[Linux]密钥登录","slug":"linux-密钥登录","date":"2017-01-27T07:45:31.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2017/01/27/linux-密钥登录/","link":"","permalink":"http://gaussli.com/2017/01/27/linux-%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/","excerpt":"","text":"生成rsa密钥 1ssh-keygen -t rsa 修改/etc/ssh/sshd_config文件 取消注释，允许密钥登录 123RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys 2. 不允许密码登录，只允许密钥登录 1PasswordAuthentication no 重启ssh 1/etc/init.d/sshd restart (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://gaussli.com/tags/ssh/"},{"name":"免密码","slug":"免密码","permalink":"http://gaussli.com/tags/%E5%85%8D%E5%AF%86%E7%A0%81/"},{"name":"登录","slug":"登录","permalink":"http://gaussli.com/tags/%E7%99%BB%E5%BD%95/"},{"name":"禁止密码","slug":"禁止密码","permalink":"http://gaussli.com/tags/%E7%A6%81%E6%AD%A2%E5%AF%86%E7%A0%81/"}]},{"title":"[Linux]修改hostname","slug":"linux-修改hostname","date":"2017-01-27T06:28:59.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2017/01/27/linux-修改hostname/","link":"","permalink":"http://gaussli.com/2017/01/27/linux-%E4%BF%AE%E6%94%B9hostname/","excerpt":"","text":"临时修改 1hostname &lt;newname&gt; 永久修改 修改/etc/sysconfig/network文件中的HOSTNAME字段。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"CentOS","slug":"centos","permalink":"http://gaussli.com/tags/centos/"},{"name":"hostname","slug":"hostname","permalink":"http://gaussli.com/tags/hostname/"}]},{"title":"[MySQL]基本操作","slug":"mysql-基本操作","date":"2016-12-15T08:16:26.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/12/15/mysql-基本操作/","link":"","permalink":"http://gaussli.com/2016/12/15/mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"","text":"说明：&lt;&gt;为必填；[]为选填；|为或者，多者选一 登录MySQL 1mysql -u &lt;username&gt; -p [-h &lt;hostname|hostip&gt;] 例： 1234mysql -u root -p -h myhost.commysql -u root -p -h 192.168.1.101mysql -u root -pmysql -u myname -p 设置密码 方法一： 123update User set Password=PASSWORD(&#x27;&lt;password&gt;&#x27;) where User=&#x27;&lt;username&gt;&#x27;;# 设置完毕刷新权限FLUSH PRIVILEGES; 例： 12update User set Password=PASSWORD(&#x27;woshimima&#x27;) where User=&#x27;root&#x27;;FLUSH PRIVILEGES; 方法二： 1234# 修改所有用户的密码，前提是拥有修改密码的权限set password for &#x27;&lt;usernmae&gt;&#x27;@&#x27;&lt;hostname|hostip&gt;&#x27; = password(&#x27;&lt;password&gt;&#x27;);# 修改当前登录用户密码set password = password(&#x27;&lt;password&gt;&#x27;); 查看MySQL默认编码 1show [global] variables like &#x27;char%&#x27;; 查看MySQL是否区分大小写 1show variables like &#x27;%case%&#x27;; 修改数据库编码 1alter database &lt;databasename&gt; CHARACTER SET &lt;encoding&gt;; 例： 1alter database mydb CHARACTER SET utf8; 创建数据库 1create database &lt;databasename&gt;; 例： 1create database mydb; 新增用户 1create user &#x27;&lt;username&gt;&#x27;@&#x27;&lt;hostname|hostip&gt;&#x27; identified by &#x27;&lt;password&gt;&#x27;; 意义为：用户可以通过密码在&lt;hostname|hostip&gt;主机上进行登录到此MySQL。其中&lt;hostname|hostip&gt;的通配符为%，表明所有主机都能登录；为空时，表明登录不需要密码。 例： 1234create user &#x27;myname&#x27;@&#x27;myclienthost.com&#x27; identified by &#x27;woshimima&#x27;;create user &#x27;myname1&#x27;@&#x27;192.168.1.102&#x27; identified by &#x27;woshimima1&#x27;;create user &#x27;myname2&#x27;@&#x27;%&#x27; identified by &#x27;woshimima2&#x27;;create user &#x27;myname3&#x27;@&#x27;%&#x27; identified by &#x27;&#x27;; 删除用户 1drop user &#x27;&lt;username&gt;&#x27;@&#x27;&lt;hostname|hostip&gt;&#x27;; 例： 12drop user &#x27;myname&#x27;@&#x27;myclienthost.com&#x27;;drop user &#x27;myname&#x27;@&#x27;%&#x27;; 授权用户权限 1grant &lt;priviliege&gt; on &lt;databasename&gt;.&lt;tablename&gt; to &#x27;&lt;username&gt;&#x27;@&#x27;&lt;hostname|hostip&gt;&#x27;; 意义为：用户在&lt;hostname|hostip&gt;主机上登录后拥有对数据库中表的权限。其中和的通配符为*，表明所有数据库的所有表；&lt;hostname|hostip&gt;的通配符为%，表明所有主机的登录情况。 常用的权限有：all、select、insert、update、delete、create、drop、index、alter、grant、references、reload、shutdown、process、file 例： 123grant all on mydb.mytable to &#x27;myname&#x27;@&#x27;myclienthost.com&#x27;;grant all on *.* to &#x27;myname&#x27;@&#x27;%&#x27;;grant select on mydb.mytable to &#x27;myname&#x27;@&#x27;myclienthost.com&#x27;; 以上命令授权的用户不能给其他用户授权，如果想让该用户可以授权，用以下命令： 1grant &lt;priviliege&gt; on &lt;databasename&gt;.&lt;tablename&gt; to &#x27;&lt;username&gt;&#x27;@&#x27;&lt;hostname|hostip&gt;&#x27; with grant option; 撤销用户权限 1revoke &lt;priviliege&gt; on &lt;databasename&gt;.&lt;tablename&gt; from &#x27;&lt;username&gt;&#x27;@&#x27;&lt;hostname|hostip&gt;&#x27;; 例： 123revoke all on mydb.mytable from &#x27;myname&#x27;@&#x27;myclienthost.com&#x27;;revoke all on *.* from &#x27;myname&#x27;@&#x27;%&#x27;;revoke select on mydb.mytable from &#x27;myname&#x27;@&#x27;myclienthost.com&#x27;; 查看用户权限 1show grants for &#x27;&lt;username&gt;&#x27;@&#x27;&lt;hostname|hostip&gt;&#x27;; 例： 12show grants for &#x27;myname&#x27;@&#x27;myclienthost.com&#x27;;show grants for &#x27;myname&#x27;@&#x27;%&#x27;; 刷新权限 1flush privileges; 查看MySQL支持的字符集 1show char set; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"MySQL","slug":"tech/mysql","permalink":"http://gaussli.com/categories/tech/mysql/"}],"tags":[{"name":"MySQL","slug":"mysql","permalink":"http://gaussli.com/tags/mysql/"},{"name":"命令行","slug":"命令行","permalink":"http://gaussli.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"}]},{"title":"[Maven]安装配置-Windows","slug":"maven-安装配置-windows","date":"2016-12-15T08:13:17.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/12/15/maven-安装配置-windows/","link":"","permalink":"http://gaussli.com/2016/12/15/maven-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-windows/","excerpt":"","text":"安装JDK并配置JAVA_HOME 安装JDK就从oracle下载安装就好了。 配置JAVA_HOME： 1C:\\Program Files\\Java\\jdk1.8.0_111 下载解压缩Maven到存放目录 1C:\\devsofts\\apache-maven-3.3.9 配置Maven环境变量，M2_HOME和PATH M2_HOME就是Maven的目录 PATH中添加Maven的bin目录，突然发现Win10的环境变量配置比以前更友好了。 查看Maven版本验证是否配置成功 1mvn -v 配置Maven本地库路径 修改conf/setttings.xml文件中localRepository节，默认配置在&lt;user&gt;\\.m2\\repository中 1&lt;localRepository&gt;D:\\repo\\maven\\repo&lt;/localRepository&gt; 执行本地库初始化 1mvn help:system 执行完毕后第5步中设置的本地库目录会多出很多文件。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Maven","slug":"tech/maven","permalink":"http://gaussli.com/categories/tech/maven/"}],"tags":[{"name":"Maven","slug":"maven","permalink":"http://gaussli.com/tags/maven/"},{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"Windows","slug":"windows","permalink":"http://gaussli.com/tags/windows/"}]},{"title":"[Maven]安装配置-Mac","slug":"maven-安装配置-mac","date":"2016-12-15T08:10:15.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/12/15/maven-安装配置-mac/","link":"","permalink":"http://gaussli.com/2016/12/15/maven-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-mac/","excerpt":"","text":"下载解压到文件夹 官网：http://maven.apache.org/ 下载页：http://maven.apache.org/download.cgi 1~/Documents/Soft/apache-maven-3.3.9 配置环境变量 编辑文件~/.bash_profile，Mac和Linux下环境变量分割符为:，而不是Windows下的;。 123# Setting PATH for Maven 3.3.9PATH=&quot;/Users/lijinhai/Documents/Soft/apache-maven-3.3.9/bin:$&#123;PATH&#125;&quot;export PATH 执行命令使配置的环境变量启用 source ~/.bash_profile 检验Maven配置 1mvn -v 复制配置文件settings.xml到用户目录 复制配置文件settings.xml到用户目录，可实现每个不同用户执行不同的Maven配置。文件复制到用户目录下的.m2文件夹，若没有该文件夹则创建一个。 1cp ~/Documents/Soft/apache-maven-3.3.9/conf/settings.xml ~/.m2/ 配置Maven本地库 修改配置文件settings.xml，添加本地库配置，路径最好使用全路径，使用~/指定用户目录有时候会出现问题。默认配置地址为~/.m2/repository 1&lt;localRepository&gt;/Users/lijinhai/Documents/Soft/repo/maven/repo&lt;/localRepository&gt; 初始化Maven本地库 1mvn help:system 执行完毕后在本地库目录会多出一些基本jar目录，以后Maven所下载jar都会存放在这个本地库目录。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Maven","slug":"tech/maven","permalink":"http://gaussli.com/categories/tech/maven/"}],"tags":[{"name":"Maven","slug":"maven","permalink":"http://gaussli.com/tags/maven/"},{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"Mac","slug":"mac","permalink":"http://gaussli.com/tags/mac/"}]},{"title":"[Maven]与EclipseEE的结合和使用","slug":"maven-与eclipseee的结合和使用","date":"2016-12-15T08:05:06.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/12/15/maven-与eclipseee的结合和使用/","link":"","permalink":"http://gaussli.com/2016/12/15/maven-%E4%B8%8Eeclipseee%E7%9A%84%E7%BB%93%E5%90%88%E5%92%8C%E4%BD%BF%E7%94%A8/","excerpt":"","text":"环境 OS system: OS X EI Caption Maven version: 3.3.9 Maven path: /Users/lijinhai/Documents/Soft/apache-maven-3.3.9 Eclipse Java EE version: Neon.1a Release(4.6.1) Eclipse Java EE workspace path: /Users/lijinhai/Documents/workspace-eclipse-jee 在Eclipse中配置Maven 本来本版本Eclipse Java EE已经包含了一个默认Maven配置，现在使用自己本地的Maven。 进入菜单Eclipse --&gt; Preferences 继续进入Maven --&gt; installations --&gt; Add --&gt; Directory，选择Maven的路径，并最终选用自己本地的Maven。 配置用户配置文件settings.xml路径（可选） 第3点为用户本身的settings.xml路径，即默认在~/.m2/settings.xml 第4点为全局的settings.xml路径，即在/Users/lijinhai/Documents/Soft/apache-maven-3.3.9/conf/settings.xml 更新Eclipse EE中Maven索引(update index)(可选) 这个索引方便添加jar时进行搜索。 目录在/Users/lijinhai/Documents/workspace-eclipse-jee/.metadata/.plugins/org.eclipse.m2e.core/nexus这个目录将会有1.6G多。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Maven","slug":"tech/maven","permalink":"http://gaussli.com/categories/tech/maven/"}],"tags":[{"name":"Maven","slug":"maven","permalink":"http://gaussli.com/tags/maven/"},{"name":"Eclipse","slug":"eclipse","permalink":"http://gaussli.com/tags/eclipse/"}]},{"title":"[MySQL]安装配置-Windows","slug":"mysql-安装配置-windows","date":"2016-12-14T08:18:59.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/12/14/mysql-安装配置-windows/","link":"","permalink":"http://gaussli.com/2016/12/14/mysql-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-windows/","excerpt":"","text":"本文记录MySQL在Windows下的安装配置 下载MySQL并解压缩到本地文件夹 例：C:\\devsofts\\mysql-5.7.16-winx64 配置系统环境变量 把MySQL中的bin目录添加到PATH环境变量中，注意环境变量以;进行分割 1C:\\devsofts\\mysql-5.7.16-winx64\\bin; 配置my.ini文件 把MySQL目录下的my-default.ini复制一份并重命名为my.ini，没有my-default.ini文件的话就创建一个，里面的内容为： 123456789101112131415161718192021[client]# 客户端使用端口，一般和服务端一样port = 3306# 客户端字符类型，与服务端一致即可，建议为utf8，这里使用utf8mb4是为了支持emoji表情（utf8mb4是utf8的超集,MySQL5.5.3版本后才能支持）default-character-set = utf8mb4[mysqld]# These are commonly set, remove the # and set as required.# 服务端字符类型，建议为utf8，这里使用utf8mb4是为了支持emoji表情（utf8mb4是utf8的超集）character_set_server = utf8mb4# 解压根目录basedir = C:\\devsofts\\mysql-5.7.16-winx64# 解压根目录\\datadatadir = C:\\devsofts\\mysql-5.7.16-winx64\\data# 忽略大小写lower_case_table_names = 1# 服务端端口# port = 3306 # 可选，默认就为3306端口# MySQL数据库的自定义ID# server_id = 1 # 可选，没有主从或多数据库的话这个参数意义不大 初始化MySQL 使用管理员权限进入bin目录，执行以下命令，进行MySQL的初始化，执行完毕会发现新增了data文件夹以及其文件夹下新增很多文件。（PS：初始化前不能存在data文件夹，否则会报data文件夹已存在的错误。） 1mysqld --initialize-insecure 安装MySQL服务 1mysqld install PS：移除MySQL服务 1mysqld remove 启动MySQL服务 1net start mysql PS：暂停MySQL服务 1net stop mysql 进入MySQL 初始配置好MySQL后root密码为空 1mysql -u root -p (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"MySQL","slug":"tech/mysql","permalink":"http://gaussli.com/categories/tech/mysql/"}],"tags":[{"name":"MySQL","slug":"mysql","permalink":"http://gaussli.com/tags/mysql/"},{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"Windows","slug":"windows","permalink":"http://gaussli.com/tags/windows/"}]},{"title":"[Mac]cocoapods安装与更新","slug":"mac-cocoapods安装与更新","date":"2016-12-08T08:01:05.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/12/08/mac-cocoapods安装与更新/","link":"","permalink":"http://gaussli.com/2016/12/08/mac-cocoapods%E5%AE%89%E8%A3%85%E4%B8%8E%E6%9B%B4%E6%96%B0/","excerpt":"","text":"安装 cocoapods基于ruby开发，在gem中进行管理。所以安装cocoapods前需要有ruby环境。一般Mac自带就有ruby。 一般系统的ruby源都是https://rubygems.org/，而这个源在国内正常情况都是访问不到的，所以可以换成一个国内的源。 以往一般是换成淘宝的源https://ruby.taobao.org/，而现在进入这个网站会发现rubygem镜像管理工作已经交由Ruby China处理，所以现在就可以换成Ruby China的源。 123456# 查看当前的源gem sources -l# 删除rubygems.org这个官网的源gem sources --remove https://rubygems.org/# 添加Ruby China的源gem sources --add https://gems.ruby-china.org/ 确定ruby环境后，只需一句命令即可安装。 1sudo gem install cocoapods 安装后第一次使用的时候会进行本地库的更新，这个过程会比较久的时间，因为需要访问github上的https://github.com/CocoaPods/Specs.git仓库。 更新，至于为什么要用-n属性，是因为cocoapods相关命令会默认装在/usr/local/bin下，但是update的过程却在/usr/bin，会出现没有权限写入的错误。 1sudo gem install -n /usr/local/bin cocoapods 如果想升级到cocoapods的beta版本，可添加--pre参数 1sudo gem install -n /usr/local/bin cocoapods --pre 查看版本 1pod --version 查看cocoapods的环境信息 1pod env 更新cocoapods库 1pod repo update 这个过程可能需要比较久，因为它需要访问github中https://github.com/CocoaPods/Specs.git，把整个库pull下来。耐心等待… (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Mac","slug":"tech/mac","permalink":"http://gaussli.com/categories/tech/mac/"}],"tags":[{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"cocoapods","slug":"cocoapods","permalink":"http://gaussli.com/tags/cocoapods/"},{"name":"软件更新","slug":"软件更新","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E6%9B%B4%E6%96%B0/"}]},{"title":"[Linux]配置命令别名","slug":"linux-配置命令别名","date":"2016-12-06T07:54:15.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/12/06/linux-配置命令别名/","link":"","permalink":"http://gaussli.com/2016/12/06/linux-%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%E5%88%AB%E5%90%8D/","excerpt":"","text":"格式 alias “&lt;别名命令&gt;=&lt;原本命令或命令行指令&gt;” 例子 alias “gl=cd /usr/local/bin/“ (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"命令行","slug":"命令行","permalink":"http://gaussli.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"},{"name":"命令","slug":"命令","permalink":"http://gaussli.com/tags/%E5%91%BD%E4%BB%A4/"},{"name":"别名","slug":"别名","permalink":"http://gaussli.com/tags/%E5%88%AB%E5%90%8D/"}]},{"title":"[iOS]配置PCH文件","slug":"ios-配置pch文件","date":"2016-12-06T05:33:20.000Z","updated":"2021-07-26T15:09:38.969Z","comments":true,"path":"2016/12/06/ios-配置pch文件/","link":"","permalink":"http://gaussli.com/2016/12/06/ios-%E9%85%8D%E7%BD%AEpch%E6%96%87%E4%BB%B6/","excerpt":"","text":"右键文件夹 -&gt; New File… -&gt; Other -&gt; PCH File -&gt; 命名保存 进入项目Build Settings -&gt; 搜索“prefix header” -&gt; 输入PCH文件路径PS：$(SRCROOT) 表示项目根目录 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"}],"tags":[{"name":"PCH","slug":"pch","permalink":"http://gaussli.com/tags/pch/"},{"name":"初始化","slug":"初始化","permalink":"http://gaussli.com/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"}]},{"title":"[iOS]设置状态栏颜色","slug":"ios-设置状态栏颜色","date":"2016-12-06T05:31:53.000Z","updated":"2021-07-26T15:09:39.951Z","comments":true,"path":"2016/12/06/ios-设置状态栏颜色/","link":"","permalink":"http://gaussli.com/2016/12/06/ios-%E8%AE%BE%E7%BD%AE%E7%8A%B6%E6%80%81%E6%A0%8F%E9%A2%9C%E8%89%B2/","excerpt":"","text":"Plist中： Status bar style = UIStatusBarStyleLightContent / UIStatusBarStyleDefault 其中UIStatusBarStyleLightContent为白色，UIStatusBarStyleDefault为黑色 Plist中： View controller-based status bar appearance = NO / YES 其中NO为白色，YES为黑色。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"}],"tags":[{"name":"状态栏","slug":"状态栏","permalink":"http://gaussli.com/tags/%E7%8A%B6%E6%80%81%E6%A0%8F/"},{"name":"颜色","slug":"颜色","permalink":"http://gaussli.com/tags/%E9%A2%9C%E8%89%B2/"}]},{"title":"[iOS]cocoapod使用","slug":"ios-cocoapod使用","date":"2016-12-05T17:43:21.000Z","updated":"2021-07-26T15:10:02.464Z","comments":true,"path":"2016/12/06/ios-cocoapod使用/","link":"","permalink":"http://gaussli.com/2016/12/06/ios-cocoapod%E4%BD%BF%E7%94%A8/","excerpt":"","text":"cocoapods从之前的0.x.x版本升到正式版1.x.x了，不过貌似还是beta版。 以前0.x.x版本的时候，配置很简单，只需： pod ‘&lt;开源库名&gt;’[, ‘~&gt; &lt;版本号&gt;’] 1pod &#x27;Masonry&#x27; 1pod &#x27;Masonry&#x27;, &#x27;~&gt; 1.0.2&#x27; 12platform :ios, &#x27;8.0&#x27;pod &#x27;Masonry&#x27; 12platform :ios, &#x27;8.0&#x27;pod &#x27;Masonry&#x27;, &#x27;~&gt; 1.0.2&#x27; 以上都是可以的。 可是更新到1.x.x后，这种配置方式就会出错了。根据github上说的，应该： 12345platform :ios, &#x27;8.0&#x27;target &quot;MiMA&quot; dopod &#x27;Masonry&#x27;, &#x27;~&gt; 1.0.2&#x27;pod &#x27;FMDB&#x27;end 也就是需要指定target字段。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"}],"tags":[{"name":"cocoapod","slug":"cocoapod","permalink":"http://gaussli.com/tags/cocoapod/"},{"name":"pod","slug":"pod","permalink":"http://gaussli.com/tags/pod/"}]},{"title":"[Linux]免密码登录","slug":"linux-免密码登录","date":"2016-11-24T07:35:04.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/11/24/linux-免密码登录/","link":"","permalink":"http://gaussli.com/2016/11/24/linux-%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/","excerpt":"","text":"环境本地计算机：MacBook，假设用户名为：gaussli远程服务器：CentOS7，假设用户名为：gaussli-remote，IP为：192.168.1.101 处理问题描述MacBook下gaussli用户以gaussli-remote身份免密码登录到远程服务器192.168.1.104上 进入/Users//.ssh/(Macbook)或/home//.ssh/(Linux)文件夹，若没有则创建一个。如果是对应root用户的话，root的用目录应该是/root/，所以应该创建/root/.ssh/。 1cd /Users/gaussli/.ssh/ Macbook生成公私钥 1ssh-keygen -t rsa 连续三次回车，不需要填任何信息。 完成后会得到id_rsa和id_rsa.pub文件，其中id_rsa是私钥，id_rsa.pub是公钥. 复制公钥(id_rsa.pub)到远程服务器 1scp /Users/gaussli/.ssh/id_rsa.pub gaussli-remote@192.168.1.104:/home/gaussli-remote/.ssh/ 若远程服务器的用户目录（这里是/home/gaussli-remote/）下没有.ssh文件，会出现公钥文件复制失败的问题，可先在远程服务器用户目录（这里是/home/gaussli-remote/）下新建.ssh文件夹。 以gaussli-remote身份进入远程服务器，并进入用户目录下.ssh文件夹 12ssh 192.168.1.104 -lgaussli-remotecd ~/.ssh/ 回车键入登录密码 把公钥写入到authorized_keys文件中，若本来没有这个文件，则创建一个 12touch authorized_keys # 没有authorized_keys文件的前提下才执行此命令，用于创建一个名为“authorized_keys”的文件cat id_rsa.pub &gt;&gt; authorized_keys 第二条命令使用“&gt;&gt;”，而不是“&gt;”。“&gt;&gt;”是追加内容，“&gt;”是重新写内容，这样能防止authorized_keys文件原本的内容被删除的悲剧。 测试，以gaussli-remote身份登录远程服务器 1ssh 192.168.1.104 -lgaussli-remote 若能直接登录，则说明配置成功了。 至此，免登录配置完成。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://gaussli.com/tags/ssh/"},{"name":"免密码","slug":"免密码","permalink":"http://gaussli.com/tags/%E5%85%8D%E5%AF%86%E7%A0%81/"},{"name":"登录","slug":"登录","permalink":"http://gaussli.com/tags/%E7%99%BB%E5%BD%95/"}]},{"title":"[Mac]垃圾倾倒","slug":"mac-垃圾倾倒","date":"2016-09-22T08:02:10.000Z","updated":"2021-07-26T15:12:02.445Z","comments":true,"path":"2016/09/22/mac-垃圾倾倒/","link":"","permalink":"http://gaussli.com/2016/09/22/mac-%E5%9E%83%E5%9C%BE%E5%80%BE%E5%80%92/","excerpt":"","text":"把没用的或对自己用处不大的应用删掉，同时删除其他Cache和应用文件 /Users/&lt;用户名&gt;/Applications/&lt;应用&gt; /Users/&lt;用户名&gt;/Library/Application Support/&lt;应用对应文件夹&gt;，这个不一定存在 /Users/&lt;用户名&gt;/Library/Caches/&lt;应用对应文件夹&gt;，这个不一定存在 如果装了Xcode，那可是很庞大的应用，不但自身软件大，连其他相关文件也很大很多 /Users/&lt;用户名&gt;/Library/Developer/Xcode/Archives：这个目录下保存了所有通过Xcode打包的记录，如果不需要这个历史，就可以把其中的内容删掉了。 /Users/&lt;用户名&gt;/Library/Developer/Xcode/DerivedData：这个目录下保存了所有Xcode打开过的项目，多起来很可怕，删之。反正下次再打开会重新新建对应项目的文件，所以不用担心不能再打开旧的项目 /Users/&lt;用户名&gt;/Library/Developer/Xcode/iOS\\ DeviceSupport：这个目录下保存了iOS系统版本的内容，具体是什么自己也不太清楚。经测试可得结论删掉没影响，下次连接新版本手机会重现生成对应iOS系统版本的文件。 /Users/&lt;用户名&gt;/Library/Developer/Xcode/Products：这个目录下保存了发布包版本信息，像第一项一样，如果不需要这个历史，就可以删掉了。 其他还有就是什么QQ、Wechat等删删缓存图片了。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Mac","slug":"tech/mac","permalink":"http://gaussli.com/categories/tech/mac/"}],"tags":[{"name":"垃圾","slug":"垃圾","permalink":"http://gaussli.com/tags/%E5%9E%83%E5%9C%BE/"},{"name":"Trash","slug":"trash","permalink":"http://gaussli.com/tags/trash/"},{"name":"系统清理","slug":"系统清理","permalink":"http://gaussli.com/tags/%E7%B3%BB%E7%BB%9F%E6%B8%85%E7%90%86/"}]},{"title":"[Linux]lsyncd+rsync实时同步备份","slug":"linux-lsyncd-rsync实时同步备份","date":"2016-09-08T07:00:04.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/09/08/linux-lsyncd-rsync实时同步备份/","link":"","permalink":"http://gaussli.com/2016/09/08/linux-lsyncd-rsync%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD/","excerpt":"","text":"小言网上有很多种文件同步备份策略。 最容易想到的策略就是rsync+inotify，这个策略有个弊端，就是实时性太差了，而且rsync内部实行同步的方式是递归扫描整个文件夹并保存一个相关的目录树数据传给备份服务器，让备份服务器进行对比知道应该同步哪些数据；然而，这个目录树数据并不是很小的，如果是一个文件结构很复杂的文件夹需要同步，而一次只改了一个文件，那么目录树数据的大小可能都是改动文件大小的几倍、几十倍甚至几百倍，如此一来，这样的同步策略的效率就很差了。再者，inotify能对同步文件夹进行实时监控，没发生一次文件变化，rsync就会执行一次。 针对上述的问题，网上出现了rsync+lsyncd，lsyncd其实集合了rsync+inotify，并做了优化操作，其中做的事情其实也和inotify差不多，也能监控同步文件夹的变化，不过它不再没发生一次变化就执行rsync一次，而是通过时间延迟和累计触发事件次数来确定何时执行rsync。这样一来，就是性能效率和数据实时性的博弈了，增加时间延迟和累计触发事件次数，就会提高性能和效率，但同时会使数据实时性降低。如此看来，它比rsync+inotify的好处在于配置性了。rsync+inotify已经定死了性能效率和数据实时性，而rsync+lsyncd针对不同现实情况进行参数配置来达到最优的性能效率和数据实时性。 本文主要说的是rsync+lsyncd的配置，上面说到lsyncd已经包含了rsync。那为什么标题还是rsync+lsyncd这样，因为lsyncd是执行在主服务器（即待备份服务器），而rsync是主服务器和备服务器（备份服务器）都需要执行的，自然主服务器的rsync由lsyncd控制，而备服务器的呢？所以笔者认为标题rsync+lsyncd中rsync更多是偏向于说明备服务器。 工具 主服务器中 rsync lsyncd 备服务器中 rsync 主服务器配置1. lsyncd安装请看传送门:Linux中lsyncd安装 2. 进入lsyncd安装目录，笔者这里为／usr/lcoal/lsyncd中1shell&gt; cd /usr/local/lsyncd 可看到4个文件夹，分别的作用为 bin：存放lsyncd执行文件 etc：存放lsyncd配置文件 man：存放lsyncd说明文件 var：存放lsyncd日志、状态、进程信息文件 3. 修改lsyncd配置文件，如果没有该配置文件则创建一个1shell&gt; vi etc/lsyncd.conf 写入以下内容： 12345678910111213141516171819202122settings &#123; logfile =&quot;/usr/local/lsyncd/var/lsyncd.log&quot;, statusFile =&quot;/usr/local/lsyncd/var/lsyncd.status&quot;, pidfile =&quot;/usr/local/lsyncd/var/lsyncd.pid&quot;, inotifyMode =&quot;CloseWrite or Modify&quot;, maxProcesses = 5, -- nodaemon =true, &#125;sync &#123; default.rsync, source = &quot;/data/tomcat7067/webapps/&quot;, target = &quot;root@10.13.31.42::syncfile_from_10_13_49_205&quot;, -- excludeFrom = &quot;/etc/rsyncd.d/rsync_exclude.lst&quot;, rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, archive = true, compress = true, verbose = true, password_file = &quot;/etc/lsyncd.secrets&quot;, &#125;&#125; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"文件","slug":"文件","permalink":"http://gaussli.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"同步","slug":"同步","permalink":"http://gaussli.com/tags/%E5%90%8C%E6%AD%A5/"},{"name":"rsync","slug":"rsync","permalink":"http://gaussli.com/tags/rsync/"},{"name":"lsyncd","slug":"lsyncd","permalink":"http://gaussli.com/tags/lsyncd/"}]},{"title":"[iOS]用户行为分析模块","slug":"ios-用户行为分析模块","date":"2016-09-08T03:40:17.000Z","updated":"2021-07-26T15:09:40.684Z","comments":true,"path":"2016/09/08/ios-用户行为分析模块/","link":"","permalink":"http://gaussli.com/2016/09/08/ios-%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90%E6%A8%A1%E5%9D%97/","excerpt":"","text":"思路1.采集数据 利用Hook分别在UIViewController和UIControl中注入用户行为分析采集代码 把采集到的数据存储在Sandbox中 2.发送数据 启动App 检查是否有昨天及之前的用户行为分析日志文件，并删除存在的所有zip文件（保证日志文件夹的正确性，不会出现不必要的zip文件） 把昨天及之前的用户行为分析日志文件进行打包操作，形成zip文件 上传zip文件 上传成功则删除zip文件和昨天及之前的用户行为分析日志文件，上传失败则只删除zip文件。这样可以保证每次每个日志文件只能成功上传一次，且及时删除文件保持App所占内存空间不会因为日志文件而逐渐变大。 实现1.Hook通过置换函数的方式来实现代码的注入12345678910111213141516// Class KitHookUtil.m#pragma mark - 调换函数实现+ (void) swizzlingInClass: (Class)cls originalSelector: (SEL)originalSelector swizzledSelector: (SEL)swizzledSelector &#123; Class class = cls; Method originalMethod = class_getInstanceMethod(class, originalSelector); Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector); BOOL didAddMethod = class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod)); if (didAddMethod) &#123; class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod)); &#125; else &#123; method_exchangeImplementations(originalMethod, swizzledMethod); &#125;&#125; 2.创建一个UIViewController的Category，在其中进行-viewWillAppear:和-viewWillDisappear:函数的置换-load函数是NSObject的函数，在其中执行函数置换，能在对象初始化的初期就执行置换操作。 -swiz_viewWillAppear:函数最后调用自身，这样看似会做成一个死循环，但实质并不是。由于函数已经被置换了，所以这句调用自身的语句实质上是调用原本的-viewWillAppear:，这样保证注入代码后，程序还能正常地继续执行下去。同理以下的-swiz_viewWillDisappear:也是这个道理。调用流程如下： 123456789101112131415161718192021222324252627// Class UIViewController+KitUserStatisics.m#pragma mark - load+ (void)load &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; // 调换函数实现 [KitHookUtil swizzlingInClass:[self class] originalSelector:@selector(viewWillAppear:) swizzledSelector:@selector(swiz_viewWillAppear:)]; [KitHookUtil swizzlingInClass:[self class] originalSelector:@selector(viewWillDisappear:) swizzledSelector:@selector(swiz_viewWillDisappear:)]; &#125;);&#125;#pragma mark - 置换viewWillAppear- (void)swiz_viewWillAppear:(BOOL)animated &#123; // 代码注入 [self inject_viewWillAppear]; // 调回原本的函数 [self swiz_viewWillAppear:animated];&#125;#pragma mark - 置换viewWillDisappear- (void)swiz_viewWillDisappear:(BOOL)animated &#123; // 代码注入 [self inject_viewWillDisAppear]; // 调回原本的函数 [self swiz_viewWillDisappear:animated];&#125; 3.UIViewController注入代码实现很简单，就是保存行为数据，形式为TypeCode,TimeInterval,ClassName,Remark，就是行为类型,时间戳,触发类名,备注，写入到Sandbox中，路径为&lt;App Sandbox&gt;/Documents/userStatisics/xxx.log，用户行为分析日志文件命名规则为&lt;yyyy-MM-dd&gt;_userStatisics_&lt;Device UUID&gt;.log 1234567891011121314151617181920212223242526// Class UIViewController+KitUserStatisics.m#pragma mark - 注入用户分析代码#pragma mark 注入viewWillAppear- (void) inject_viewWillAppear &#123; // 保存用户分析信息 // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;1&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, NSStringFromClass([self class]), @&quot;进入ViewController&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString];&#125;#pragma mark 注入viewWillDisappear- (void) inject_viewWillDisAppear &#123; // 保存用户分析信息 // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;2&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, NSStringFromClass([self class]), @&quot;离开ViewController&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString];&#125; 4.创建一个UIControl的Category，在其中进行-sendAction:to:forEvent:函数的置换原理如上述第2点。 123456789101112131415161718// Class UIControl+KitUserStatisics.m#pragma mark - load+ (void)load &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; // 调换函数实现 [KitHookUtil swizzlingInClass:[self class] originalSelector:@selector(sendAction:to:forEvent:) swizzledSelector:@selector(swiz_sendAction:to:forEvent:)]; &#125;);&#125;#pragma mark - 置换sendAction:to:forEvent:- (void) swiz_sendAction:(SEL)action to:(id)target forEvent:(UIEvent *)event &#123; // 代码注入 [self inject_sendAction:action to:target forEvent:event]; // 调回原本的函数 [self swiz_sendAction:action to:target forEvent:event];&#125; 5.UIControl注入代码实现和第3点一样，数据形式也很简单，保存行为数据，形式为TypeCode,TimeInterval,BehaviorData,Remark，就是行为类型,时间戳,行为数据,备注。 其中BehaviorData(行为数据)包括UIControlClassName|TargetClassName|ActionFunctionName|UIControlTag|UIControlFrame|UIControlInfo，即控件类名|Target对应的类名|Action函数名|控件Tag值|控件Frame值|控件属性。 其中UIControlInfo(控件属性)会由不同控件而不同。在iOS中继承UIControl的有以下控件： UIButton UISegmentedControl UITextField UISlider UISwitch UIPageControl UIStepper UIDatePicker 由于需要控件调用了-addTarget:action:forControlEvents:才能捕捉到行为数据，所以这里只做其中UIButton、UISegmentedControl、UISlider、UISwitch、UIStepper5种控件的行为分析，因为这5种控件通常都会调用-addTarget:action:forControlEvents:，其它UIControl控件就要视是否调用-addTarget:action:forControlEvents:函数了。 而这5种控件的控件属性会有所不同 UIButton ：保存titleLabel.text UISegmentedControl ：保存选中的文本或Index值 UISlider ：保存滑动的值 UISwitch ：保存“isOn”或者“isOff”状态 UIStepper ：保存Stepper.value 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109// Class UIControl+KitUserStatisics.m#pragma mark - 注入用户分析代码#pragma mark 注入sendAction中- (void) inject_sendAction:(SEL)action to:(id)target forEvent:(UIEvent *)event &#123; // 保存用户分析信息 if ([self isKindOfClass:[UIButton class]]) &#123; // UIButton // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;100&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, [NSString stringWithFormat:@&quot;%@|%@|%@|%ld|%@|%@&quot;, NSStringFromClass([self class]), NSStringFromClass([target class]), NSStringFromSelector(action), (long)self.tag, NSStringFromCGRect(self.frame), ((UIButton*)self).titleLabel.text ? ((UIButton*)self).titleLabel.text: @&quot;&quot;], @&quot;UIButton点击事件&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString]; &#125; else if ([self isKindOfClass:[UISegmentedControl class]]) &#123; // UISegmentedControl // 获取选中的标题，没有标题获取index值 UISegmentedControl *tempSc = (UISegmentedControl*)self; NSInteger selectedSegmentIndex = tempSc.selectedSegmentIndex; NSString *selectedSegmentTitle = [tempSc titleForSegmentAtIndex:selectedSegmentIndex]; selectedSegmentTitle = selectedSegmentTitle == nil || selectedSegmentTitle.length == 0 ? [NSString stringWithFormat:@&quot;%ld&quot;, selectedSegmentIndex] : selectedSegmentTitle; // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;101&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, [NSString stringWithFormat:@&quot;%@|%@|%@|%ld|%@|%@&quot;, NSStringFromClass([self class]), NSStringFromClass([target class]), NSStringFromSelector(action), (long)self.tag, NSStringFromCGRect(self.frame), selectedSegmentTitle ? selectedSegmentTitle : @&quot;&quot;], @&quot;UISegmentedControl选择事件&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString]; &#125; else if ([self isKindOfClass:[UISlider class]]) &#123; // UISlider // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;102&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, [NSString stringWithFormat:@&quot;%@|%@|%@|%ld|%@|%f&quot;, NSStringFromClass([self class]), NSStringFromClass([target class]), NSStringFromSelector(action), (long)self.tag, NSStringFromCGRect(self.frame), ((UISlider*)self).value], @&quot;UISlider选择事件&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString]; &#125; else if ([self isKindOfClass:[UISwitch class]]) &#123; // UISwitch // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;103&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, [NSString stringWithFormat:@&quot;%@|%@|%@|%ld|%@|%@&quot;, NSStringFromClass([self class]), NSStringFromClass([target class]), NSStringFromSelector(action), (long)self.tag, NSStringFromCGRect(self.frame), ((UISwitch*)self).isOn ? @&quot;isOn&quot; : @&quot;isOff&quot;], @&quot;UISwitch选择事件&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString]; &#125; else if ([self isKindOfClass:[UIStepper class]]) &#123; // UIStepper // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;104&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, [NSString stringWithFormat:@&quot;%@|%@|%@|%ld|%@|%f&quot;, NSStringFromClass([self class]), NSStringFromClass([target class]), NSStringFromSelector(action), (long)self.tag, NSStringFromCGRect(self.frame), ((UIStepper*)self).value], @&quot;UIStepper选择事件&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString]; &#125; else &#123; // 其它 // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;105&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, [NSString stringWithFormat:@&quot;%@|%@|%@|%ld|%@|%@&quot;, NSStringFromClass([self class]), NSStringFromClass([target class]), NSStringFromSelector(action), (long)self.tag, NSStringFromCGRect(self.frame), @&quot;&quot;], @&quot;其它UIControl事件&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString]; &#125;&#125; 6.创建一个UITabBarController的Category，在其中进行-setSelectedViewController:函数的置换原理如上述第2点。 123456789101112131415161718// Class UITabBarController+KitUserStatisics.m#pragma mark - load+ (void)load &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; // 调换函数实现 [KitHookUtil swizzlingInClass:[self class] originalSelector:@selector(setSelectedViewController:) swizzledSelector:@selector(swiz_setSelectedViewController:)]; &#125;);&#125;#pragma mark - 置换swiz_setSelectedViewController:- (void) swiz_setSelectedViewController: (__kindof UIViewController *)selectedViewController &#123; // 代码注入 [self inject_setSelectedViewController:selectedViewController]; // 调回原本的函数 [self swiz_setSelectedViewController:selectedViewController];&#125; 7.UITabBarController注入代码实现和第3点一样，数据形式也很简单，保存行为数据，形式为TypeCode,TimeInterval,ClassName,Remark，就是行为类型,时间戳,触发类名,备注。 首次进入应用后不会触发第一个Tabbar的统计，切换到不同Tabar时统计进入对应ViewController的数据。 1234567891011121314// Class UIControl+KitUserStatisics.m#pragma mark - 注入用户分析代码#pragma mark 注入setSelectedViewController:中- (void) inject_setSelectedViewController: (__kindof UIViewController *)selectedViewController &#123; // 保存用户分析信息 // 用户分析信息(类型,时间,内容,备注) NSString *contentString = [NSString stringWithFormat:@&quot;%@,%@,%@,%@&quot;, @&quot;3&quot;, [KitUserStatisicsUtil sharedInstance].currentTimeInterval, NSStringFromClass([selectedViewController class]), @&quot;Tabbar切换ViewController&quot;]; [[KitUserStatisicsUtil sharedInstance] writeUserStatisicsFileString:contentString];&#125; 8.发送用户行为日志文件在每次App启动的时候进行用户行为日志文件进行压缩并上传操作，实现方式也是通过Hook方式把上传代码注入到AppDelegate中。 1234567891011121314151617181920212223// Class AppDelegate+KitUserStatisics.m#pragma mark - load+ (void)load &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; [KitHookUtil swizzlingInClass:[self class] originalSelector:@selector(application:didFinishLaunchingWithOptions:) swizzledSelector:@selector(swiz_application:didFinishLaunchingWithOptions:)]; &#125;);&#125;#pragma mark - 置换application:didFinishLaunchingWithOptions:- (BOOL)swiz_application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; [self inject_application:application didFinishLaunchingWithOptions:launchOptions]; return [self swiz_application:application didFinishLaunchingWithOptions:launchOptions];&#125;#pragma mark - 注入代码- (void) inject_application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; // 压缩用户日志文件 [[KitUserStatisicsUtil sharedInstance] zipUserStatiscsFile]; // 发送用户日志压缩文件 [[KitUserStatisicsUtil sharedInstance] sendUserStatisicsFiles];&#125; 依赖1. iOS Framework libz.tbd Security.framework 2.第三方框架由于使用到Zip压缩和网络文件上传，所以会依赖2个第三方框架 SSZipArchive：Zip压缩框架 AFNetworking: 网络框架 使用 导入依赖框架（SSZipArchive和AFNetworking） 导入libz.tbd和Security.framework 导入KitUserStatisics文件夹 修改其中KitUserStatisicsInfo.plist中的UploadFileURL属性，指定上传文件接口 只需四步，就能接入该用户行为分析框架。 数据说明1.用户行为日志格式–文件头设备信息说明例子： 1iPhone Simulator,Simulator,iPhone OS,9.1,CD392B37-7B30-471B-8D40-5D4E7D243369,1.0,1 序号 字段名 说明 默认值 1 deviceName 设备名称 2 deviceModel 设备型号 3 systemName 系统名称 4 systemVersion 系统版本 5 uuid 设备唯一标识 6 appVersion 应用版本 7 appBuild 应用Build值 2.用户行为日志格式–UIViewController行为例子： 11,1473302682,ViewController,进入ViewController 序号 字段名 说明 默认值 1 TypeCode 行为类型 2 TimeInterval 时间戳 3 ClassName 触发类名 4 Remark 备注 3.用户行为日志格式–UIControl行为例子： 1100,1473302950,UIButton|ViewController|buttonAction:|0|&#123;&#123;0, 100&#125;, &#123;100, 100&#125;&#125;|commitButton,UIButton点击事件 序号 字段名 说明 默认值 1 TypeCode 行为类型 2 TimeInterval 时间戳 3 BehaviorData 行为数据 4 Remark 备注 BehaviorData：UIControlClassName|TargetClassName|ActionFunctionName|UIControlTag|UIControlFrame|UIControlInfo，即控件类名|Target对应的类名|Action函数名|控件Tag值|控件Frame值|控件属性 3.1.用户行为日志格式–UIControl行为中UIControlInfo例子： 1UIButton|ViewController|buttonAction:|0|&#123;&#123;0, 100&#125;, &#123;100, 100&#125;&#125;|commitButton 序号 控件 字段名 说明 默认值 1 UIButton titleLabel.text 按钮内文本 2 UISegmentedControl selectedSegmentTitle或selectedSegmentIndex 选中文本或索引 3 UISlider value 滑动值 4 UISwitch isOn或isOff 开或关的状态 5 UIStepper value Stepper的值 6 其他UIControl 空 空 @”” 4.用户行为日志格式–TypeCode(行为类型) 序号 代码 说明 1 0～99 启动App／UIViewController页面行为 1 100～199 UIControl点击行为 序号 代码 说明 0 0 启动App 1 1 进入页面行为 2 2 离开页面行为 3 3 Tabbar切换页面行为 3 100 UIButton点击行为 4 101 UISegmentedControl选择行为 5 102 UISlider滑动行为 6 103 UISwitch开关行为 7 104 UISteppe值变化行为 8 105 其他UIControl对应操作行为 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"}],"tags":[{"name":"UIControl","slug":"uicontrol","permalink":"http://gaussli.com/tags/uicontrol/"},{"name":"用户行为","slug":"用户行为","permalink":"http://gaussli.com/tags/%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA/"},{"name":"无埋点","slug":"无埋点","permalink":"http://gaussli.com/tags/%E6%97%A0%E5%9F%8B%E7%82%B9/"},{"name":"hook","slug":"hook","permalink":"http://gaussli.com/tags/hook/"},{"name":"swizzling","slug":"swizzling","permalink":"http://gaussli.com/tags/swizzling/"},{"name":"zip压缩","slug":"zip压缩","permalink":"http://gaussli.com/tags/zip%E5%8E%8B%E7%BC%A9/"},{"name":"SSZipArchive","slug":"ssziparchive","permalink":"http://gaussli.com/tags/ssziparchive/"},{"name":"AFNetworking","slug":"afnetworking","permalink":"http://gaussli.com/tags/afnetworking/"}]},{"title":"[Linux]常见目录作用","slug":"linux-常见目录作用","date":"2016-08-10T07:46:53.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/08/10/linux-常见目录作用/","link":"","permalink":"http://gaussli.com/2016/08/10/linux-%E5%B8%B8%E8%A7%81%E7%9B%AE%E5%BD%95%E4%BD%9C%E7%94%A8/","excerpt":"","text":"Linux－－常用目录作用 序号 目录 说明 备注 1 / 跟目录 2 /bin 命令保存目录（普通用户就可以读取执行的命令） 3 /boot 启动目录，启动相关文件 4 /dev 设备文件保存目录 5 /etc 配置文件保存目录 6 /home 普通用户的家目录 7 /lib 系统库保存目录 8 /mnt 系统挂载目录 9 /media 挂在目录 10 /root 超级用户的家目录 11 /tmp 临时目录 12 /sbin 命令保存目录（超级用户才能使用的目录） 13 /proc 直接写入内存的 14 /sys 15 /usr 系统软件资源目录 16 /var 系统相关文档内容 /bin/、sbin、／usr/bin和/usr/sbin都是用来保存系统命令的，其中bin下的命令是所有用户都可以读取执行的，而sbin下的命令只有超级用户才能读取执行的。 /proc和/sys目录不能直接操作，这两个目录保存的是内存的过载点。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"文件","slug":"文件","permalink":"http://gaussli.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"文件系统","slug":"文件系统","permalink":"http://gaussli.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"name":"目录","slug":"目录","permalink":"http://gaussli.com/tags/%E7%9B%AE%E5%BD%95/"}]},{"title":"[Linux]命令记录","slug":"linux-命令记录","date":"2016-08-10T07:41:46.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/08/10/linux-命令记录/","link":"","permalink":"http://gaussli.com/2016/08/10/linux-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/","excerpt":"","text":"ls：查询目录中内容 ls [选项] [文件或目录] 选项： -a：显示所有文件，包括隐藏文件 -l：显示详细信息 -d：查看目录属性 -h：人性化显示文件大小 -i：显示inode End mkdir：建立目录 mkdir -p [目录名] 原意：make directories 选项： -p：递归创建 End cd：切换所在目录 cd [目录] 原意：change directories 简化操作： cd ~：进入当前用户的家目录 cd：进入当前用户的家目录 cd -：进入上次目录 cd ..：进入上一级目录 cd .：进入当前目录 End pwd：查询所在目录位置 pwd 原意：print working directory rmdir：删除空目录 rmdir [目录名] 原意：remove empty directories rm：删除文件或目录 rm -rf [文件或目录] 原意：remove 选项： -r：删除目录 -f：强制 End cp：复制命令 cp [选项] [原文件或目录] [目标目录] 原意：copy 选项： -r：复制目录 -p：连带文件属性复制 -d：若源文件是链接文件，则复制链接属性 -a：相当于 -pdr End mv：剪切或改名命令 mv [原文件或目录] [目标目录] 原意：move ln：链接命令 ln -s [原文件] [目标文件] 原意：link 选项： -s：创建软链接 硬链接特征： 拥有相同的i节点和存储block块，可以看做是同一个文件 可通过i节点识别 不能跨分区 不能针对目录使用 软链接特征： 类似Windows快捷方式 软链接拥有自己的i节点和block块，但是数据块中只保存原文件的文件名和i节点号，并没有实际的文件数据 文件权限都为lrwxrwxrwx，其中l是指软链接 修改任意文件，另一个都改变 删除原文件，软链接不能使用 locate：文件搜索命令 locate 文件名 在后台数据库中按文件名搜索，搜索速度更快 /var/lib/mlocate：locate命令所搜索的后台数据库 updatedb：更新数据库 etc/updatedb.conf：locate、whereis、which命令的搜索规则配置文件 PRUNE_BIND_MOUNTS = “yes”：开启搜索限制 PRUNEFS = ：搜索时，不搜索的文件系统 PRUNENAMES = ：搜索时，不搜索的文件类型 PRUNEPATHS = ：搜索时，不搜索的路径 End whereis：搜索命令的命令 whereis 命令名 搜索命令所在路径及帮助文档所在位置 选项： -b：只查找可执行文件 -m：只查找帮助文档 End which：搜索命令的命令 which 文件名 搜索命令所在路径及别名 find：文件搜索命令 find [搜索范围] [搜索条件] 避免大范围搜索，会非常耗费系统资源。 find是在系统当中搜索符合条件的文件名。如果需要匹配，使用通配符匹配，通配符是完全匹配。 通配符： *：匹配任意内容 ?：匹配任意一个字符 []：匹配任意一个中括号内的字符 搜索条件： -name：指定文件名，如find /root -name install.log -iname：不区分大小写，如find /root -iname install.log -user：按照所有者搜索，如find /root -user root -nouser：查找没有所有者的文件，如find /root -nouser -mtime、-atime、ctime：按照最新内容修改日期、最新访问日期、最新文件属性改变日期查找文件 -mtime -10：10天内修改的文件 -mtime 10：10天当天修改的文件 -mtime +10：10天前修改的文件 -size：按照文件大小查找文件，其中大小单位中，k是小写，M是大写，不能不写单位，不写的话默认是块 -size -25k：小于25KB的文件 -size 25k：等于25KB的文件 -size +25k：大于25KB的文件 -inum：按照i节点查找文件，如find /root -inum 262148 -a 或者 and：逻辑与，两个条件都满足 -o 或者 or：逻辑或，两个条件满足一个即可 exec 对find结果处理的命令 &#123;&#125; \\;：对搜索结果执行其他命令，如find /root -name install.log -exec ls -al &#123;&#125; \\;（对结果执行ls -al命令） End grep：字符串搜索命令 grep [选项] 字符串 文件名 在文件当中匹配符合条件的字符串 选项： -i：忽略大小写 -v：排除指定字符串，也就是取反 End man：帮助命令 man 命令 原意：manual，获取指定命令的帮助 选项： -f：查看命令拥有哪些级别的帮助，相当于whatis 命令这个命令 -级别：查看命令中指定级别的帮助，如man -5 passwd -k：查看和命令相关的所有帮助，相当于apropos 命令这个命令 man的级别 1：查看命令的帮助 2：查看可被内核调用的函数的帮助 3：查看函数和函数库的帮助 4：查看特殊文件的帮助（主要是/dev目录下的文件） 5：查看配置文件的帮助 6：查看游戏的帮助 7：查看其它杂项的帮助 8：查看系统管理员可用命令的帮助 9：查看和内核相关文件的帮助 End help：shell内部命令帮助 help shell内部命令 区分是否是shell内部命令，使用whereis 命令这个命令，如果找不到命令路径，则证明是shell内部命令，当然前提是命令合法可用。 info：详细命令帮助 info 命令 操作： 回车：进入子帮助页面（带有*号标记） u：进入上层页面 n：进入下一个帮助小节 p：进入上一个帮助小节 q：退出 End zip：.zip格式压缩命令 zip 压缩文件名 源文件：压缩文件 zip -r 压缩文件名 源目录：压缩目录 unzip 压缩文件：解压缩 gzip：.gz格式压缩命令 gzip 源文件：压缩为.gz格式的压缩文件，源文件会消失 gzip -c 源文件 &gt; 压缩文件：压缩为.gz格式，源文件保留 gzip -r 目录：压缩目录下所有的子文件，但是不能压缩目录 gzip -d 压缩文件：解压缩 gunzip 压缩文件：解压缩 bzip2：.bz2格式压缩 bzip2 源文件：压缩为.bz2格式，不保留源文件 bzip2 -k 源文件：压缩后保留源文件 bzip -d 压缩文件：解压缩，-k选项保留源压缩文件 bunzip 压缩文件：解压缩，-k选项保留源压缩文件 注意：bzip2命令不能压缩目录 查看目录下文件总行数 1find . -name &quot;*.java&quot; -or -name &quot;*.xml&quot; -or -name &quot;*.gradle&quot; -or -name &quot;*.properties&quot; |xargs grep -v &quot;^$&quot;|wc -l rsync文件远程同步 1rsync -zvrt [源路径] [目标路径] 远程路径格式：用户名@ip:文件目录，如myname@gaussli.com:/usr/local/ MD5校验 1md5sum [文件名] tar命令打包目录下部分文件 1tar -zcvf [tar名称] `find . |grep -e [只打包文件的名称规则]` (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"命令行","slug":"命令行","permalink":"http://gaussli.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"}]},{"title":"[Linux]Yum更换源","slug":"linux-yum更换源","date":"2016-07-24T07:34:23.000Z","updated":"2021-07-26T08:15:46.000Z","comments":true,"path":"2016/07/24/linux-yum更换源/","link":"","permalink":"http://gaussli.com/2016/07/24/linux-yum%E6%9B%B4%E6%8D%A2%E6%BA%90/","excerpt":"","text":"小言默认CentOS安装后会自带Yum工具，只是这个Yum工具的默认源是CentOS官方源，由于官方源国内访问速度慢，所以国内就慢慢出现了很多针对国内用户的源，最出名的应该就是163的，然而不久之前阿里云也出了自己的源，所以以后就会多了一个选择了 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"CentOS","slug":"centos","permalink":"http://gaussli.com/tags/centos/"},{"name":"Linux","slug":"linux","permalink":"http://gaussli.com/tags/linux/"},{"name":"YUM","slug":"yum","permalink":"http://gaussli.com/tags/yum/"}]},{"title":"[VirtualBox]CentOS虚拟机中网络配置","slug":"virtualbox-centos虚拟机中网络配置","date":"2016-07-16T08:28:28.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/07/16/virtualbox-centos虚拟机中网络配置/","link":"","permalink":"http://gaussli.com/2016/07/16/virtualbox-centos%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"小言很久之前就在VirtualBox下装了CentOS虚拟机，可是当时由于网络联通不了，搞了一会儿还是不成功，当时就先放弃了。后来有一晚网上找到了配置方法，遂再次尝试，终于成功了，以作记录。 环境 操作系统：Window8.1 VirtualBox版本：5.0.16 CentOS版本：CentOS6.7 64位 minimal版 虚拟机CPU核数：1核 虚拟机内存：2G 虚拟机硬盘：15G 步骤1–选择网络连接方式一般来说，虚拟机网络连接方式有以下几种： 网络地址转换(NAT) 桥接网卡 Host-Only适配器 我尝试过使用NAT方式，不成功；也尝试过Host-Only方式，也不成功。最后想了想，使用桥接网卡方式，我自身局域网其他主机（甚至手机、平板）都能访问到我的虚拟机了。我自身局域网是使用TP-LINK作为路由，既有有线网络，也有无线网络。那么使用桥接网卡的方式，我的虚拟机就能和我的Window享有同等待遇，在路由器中分配得到一个局域网IP。简单说就是如果Window主机IP为192.168.1.101的话，Window下虚拟机IP可能就是192.168.1.102了。 所以这里选择的桥接网卡的网络连接方式。 步骤2–配置CentOS中网卡信息一般来说，VirtualBox会为虚拟机虚拟出一块网卡，带来一个虚拟的MAC地址，通常会命名为eth0。 执行以下命令能对网卡的信息进行配置 1shell&gt; vi /etc/sysconfig/network-scripts/ifcfg-eth0 内容如下： 其中， HWADDR表示网卡的MAC地址 ONBOOT表示是否系统启动执行配置，这里设置为yes。 BOOTPROTO表明IP获取方式，由于我的路由器是通过dhcp分配IP的，这里设置为dhcp；如果好像公司那些通过MAC地址绑定来分配IP的，可以使用static，并把属性IPADDR设置为所分配的IP。上述图片中最后的BOOTPROTO属性会覆盖第二行的BOOTPROTO属性，所以最终使用的IP获取方式是dhcp。 NETMASK表示子网掩码，这个和我的路由器局域网配置一样，设置为255.255.255.0 修改好后，保存退出。 步骤3–配置CentOS中网关信息执行以下命令能对CentOS虚拟机的网关信息进行配置 1shell&gt; vi /etc/sysconfig/network 内容如下： 修改其中GATEWAY属性，具体可查看Windows的网关信息，因为Window和通过桥接网卡方式连网的虚拟机会在同一个局域网中，所以网关也是会一样的。当然也可以查看路由器中网关信息。这里是192.168.1.1。 修改好后，保存退出。 步骤4–使网络配置生效执行以下命令使网络配置生效 1shell&gt; service network restart 或者 1shell&gt; /etc/init.d/network restart 当然重启虚拟机reboot命令也是可以的。 步骤5–测试网络查看网络配置信息 1shell&gt; ifconfig 结果如下，可知获取的IP信息是否符合路由器配置的，这里通过dhcp分配的IP为192.168.1.105。 使用ping或wget或curl等等命令都可以测试网络是否通，当然前提是路由器配置好了能上网的。 ping网关，成功则说明局域网中互相访问没问题了。 1shell&gt; ping 192.168.1.1 ping百度，成功则说明虚拟机可访问Internet了。 1shell&gt; ping www.baidu.com 至此，网络配置已经完成。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"VirtualBox","slug":"tech/virtualbox","permalink":"http://gaussli.com/categories/tech/virtualbox/"}],"tags":[{"name":"CentOS","slug":"centos","permalink":"http://gaussli.com/tags/centos/"},{"name":"网络","slug":"网络","permalink":"http://gaussli.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"Network","slug":"network","permalink":"http://gaussli.com/tags/network/"}]},{"title":"[VirtualBox]CentOS虚拟机中克隆机网络配置","slug":"virtualbox-centos虚拟机中克隆机网络配置","date":"2016-07-16T08:26:45.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/07/16/virtualbox-centos虚拟机中克隆机网络配置/","link":"","permalink":"http://gaussli.com/2016/07/16/virtualbox-centos%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%85%8B%E9%9A%86%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"小言所谓的克隆机，就是说VirtualBox中可通过已有的虚拟机可不断克隆出一样的虚拟机。而克隆出来的虚拟机，选择重新初始化所有网卡的MAC地址后，克隆机的网卡会出现两个，一个是原本的eth0，一个是新增的eth1。那么由于之前配置的是eth0（详见virtualbox中centos虚拟机中网络配置），而eth0已经没用了，eth1却没有做配置的，所以是不能上网的。以下就来解决这个问题。 环境 操作系统：Window8.1 VirtualBox版本：5.0.16 CentOS版本：CentOS6.7 64位 minimal版 虚拟机CPU核数：1核 虚拟机内存：2G 虚拟机硬盘：15G 步骤1–问题信息查看1shell&gt; cat /etc/udev/rules,d/70-persistent-net.rules 查看网卡信息，可见两块网卡，一个是原本的eth0，一个是新增的eth1。eth0的MAC地址是的原本虚拟机，eth1的MAC地址是通过上述的重新初始化所有网卡的MAC地址后重新虚拟获取的。 1shell&gt; ls -al /etc/sysconfig/network-script 这里只能看到一个ifcfg-eth0文件，而没有ifcfg-eht1文件，说明eth1网卡没有配置。自然ifcfg-eth0文件中配置就是原本虚拟机的配置了。 解决思路： 把/etc/udev/rules,d/70-persistent-net.rules文件中的eth0网卡删掉，因为反正也是没用的了，把eth1网卡改成eth0，这样就只剩下一块网卡。 把/etc/sysconfig/network-script/ifcfg-eth0文件中MAC地址修改成/etc/udev/rules,d/70-persistent-net.rules文件中网卡的MAC地址。 步骤2–修改网卡信息执行以下命令，修改网卡信息 1shell&gt; vi /etc/udev/rules,d/70-persistent-net.rules 把eth0网卡删掉，把eth1网卡信息中的NAME属性改成eth0。同时记录MAC地址，下述步骤3中有使用到。 修改好后，保存退出。 步骤3–修改eth0网卡信息执行以下命令，修改eth0网卡信息 1shell&gt; vi /etc/sysconfig/network-script/ifcfg-eth0 把MAC地址属性HWADDR改成步骤2所记录的MAC地址。 步骤4–使网络配置生效这里要使上述的网络配置生效，一定要重启虚拟机。我尝试过单单重启网络配置是不能成功的。 执行以下命令重启虚拟机 1shell&gt; reboot 步骤5–测试网络查看网络配置信息 1shell&gt; ifconfig 结果如下，可知获取的IP信息是否符合路由器配置的，这里通过dhcp分配的IP为192.168.1.106。 使用ping或wget或curl等等命令都可以测试网络是否通，当然前提是路由器配置好了能上网的。 ping网关，成功则说明局域网中互相访问没问题了。 1shell&gt; ping 192.168.1.1 ping百度，成功则说明虚拟机可访问Internet了。 1shell&gt; ping www.baidu.com 至此，网络配置已经完成。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"VirtualBox","slug":"tech/virtualbox","permalink":"http://gaussli.com/categories/tech/virtualbox/"}],"tags":[{"name":"CentOS","slug":"centos","permalink":"http://gaussli.com/tags/centos/"},{"name":"克隆","slug":"克隆","permalink":"http://gaussli.com/tags/%E5%85%8B%E9%9A%86/"},{"name":"网络","slug":"网络","permalink":"http://gaussli.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"Network","slug":"network","permalink":"http://gaussli.com/tags/network/"}]},{"title":"[Linux]邮件发送","slug":"linux-邮件发送","date":"2016-07-15T07:51:32.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/07/15/linux-邮件发送/","link":"","permalink":"http://gaussli.com/2016/07/15/linux-%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/","excerpt":"","text":"概况在Linux中，有很多种方式可以实现Shell中发送邮件。然而尝试sendmail失败后，掉入了一个大坑。最后发现直接简单粗暴使用mail或mailx（以下统称为mail）就可以了。 当然如果需要自己搭建邮件服务器，那么类似sendmail这类命令还是不能避免的。单纯使用mail实际上是使用了外部的smtp服务，这里我就是使用163的。 步骤1–安装部分Linux是原本就带有mail的了，没有也不怕，执行以下命令就可以了（以下所有情况均在CentOS下执行测试） 1shell&gt; yum install mailx -y 步骤2–配置接下来进行外部smtp配置，修改／etc/mail.rc，在文档最后添加以下几句，保存退出。 12345set from=xxx@163.comset smtp=smtp.163.comset smtp-auth-user=xxx # 和from属性中‘@’之前一样set smtp-auth-password=xxx ＃ 邮箱密码set smtp-auth=login 步骤3–发送邮件执行以下命令即可实现邮件发送了 1shell&gt; echo &quot;邮件正文内容&quot; | mail -s &quot;邮件主题&quot; xxx@xxx.com 这就是差不多最简单的一封邮件。有点需要注意的是，163好像会检测邮件是否太过垃圾（虽然我也不知道它的策略）。一旦被它认为是垃圾邮件，就会被退信了。所以测试写的内容也不能太过随意。 (•̀ᴗ•́)و ̑̑","categories":[],"tags":[]},{"title":"[Linux]lsyncd安装","slug":"linux-lsyncd安装","date":"2016-07-15T07:03:49.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/07/15/linux-lsyncd安装/","link":"","permalink":"http://gaussli.com/2016/07/15/linux-lsyncd%E5%AE%89%E8%A3%85/","excerpt":"","text":"简介lsyncd是文件同步工具，它能通过对文件夹进行监控来实现实时同步功能。它是对inotify和rsync命令的lua封装。 依赖包 cmake 由于现在lsyncd需要cmake来进行编译打包操作，已经不像以前还在Google code时候是用的./configure。 1shell&gt; yum install cmake -y 安装结果： lua和lua-devel lsyncd是对inotify和rsync的lua封装，所以自然也是需要lua语言的依赖。 1shell&gt; yum install lua lua-devel -y 若没有两个都安装成功的话，会出现以下错误（lua一般都是Linux默认安装的，所以通常都是忘记安装lua-devel）： 12CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:108 (message): Could NOT find Lua (missing: LUA_INCLUDE_DIR) 安装结果： gcc-c++ 这个是在cmake过程中出现了错误才知道的，应该是里面有代码是c++，错误如下： 12-- The CXX compiler identification is unknownCMake Error: your CXX compiler: &quot;CMAKE_CXX_COMPILER-NOTFOUND&quot; was not found. Please set CMAKE_CXX_COMPILER to a valid compiler path or name. 1shell&gt; yum install gcc-c++ -y 安装结果： 下载并解压源码包Click入lsyncd网站，找到下载链接lsyncd源码包，进行下载。很奇怪的一点是它居然用releace-2.1.6.tar.gz来进行命名，一点都看不出是lsyncd包，而且这样的命名也不符合发布包命名的一般规则，可见作者就是一任性的人。为了文件管理，可以把它更名为lsyncd-2.1.6.tar.gz。 12shell&gt; wget -c https://github.com/axkibe/lsyncd/archive/release-2.1.6.tar.gz -O lsyncd-2.1.6.tar.gzshell&gt; tar -zxvf lsyncd-2.1.6.tar.gz 编译并安装执行以下命令进行lsyncd的编译以及安装操作 123shell&gt; cmake -DCMAKE_INSTALL_PREFIX=/usr/local/lsyncdshell&gt; makeshell&gt; make install cmake结果： make结果： make install结果: (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"文件","slug":"文件","permalink":"http://gaussli.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"同步","slug":"同步","permalink":"http://gaussli.com/tags/%E5%90%8C%E6%AD%A5/"},{"name":"lsyncd","slug":"lsyncd","permalink":"http://gaussli.com/tags/lsyncd/"},{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"源码安装","slug":"源码安装","permalink":"http://gaussli.com/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"}]},{"title":"[Linux]MySQL主从同步复制","slug":"linux-mysql主从同步复制","date":"2016-07-12T07:13:17.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/07/12/linux-mysql主从同步复制/","link":"","permalink":"http://gaussli.com/2016/07/12/linux-mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6/","excerpt":"","text":"步骤1–配置主数据库主属性修改my.cnf配置文件，修改log_bin、binlog-do-db、server_id属性，log_bin指定日志文件的命名；binlog-do-db指定需同步的数据库名，不指定的情况下同步所有数据库；server_id指定数据库唯一id。如： 1234[mysqld]log_bin = mysql-binbinlog-do-db=ycpaidbserver_id = 1 如果这个主数据库是其他另外数据库的从数据库，也就是说需要实现级联（链式）主从复制，则需添加以下属性，来表明开启从数据库日志，实现级联（链式）复制 12[mysqld]log-slave-updates=1 #启用从库日志，这样可以设置链式复制 步骤2–重启主数据库其中mysql为服务名称，根据/etc/init.d/中对应的数据库服务名，可能为mysqld、mysql、mysql.server。重启完毕后能在data目录下看到mysql-bin.000001的同步所需文件，每重启一次数据库，则文件会新增一个，后缀数字将会自动加1。 1shell&gt; service mysql restart 使用账号密码登录mysql命令行，执行以下命令，就能看到当前数据库的主属性信息 1mysql&gt; show master status\\G; 结果截图如下图(为保护数据安全，进行了数据库名打码)： 步骤3–在主数据库新建slave权限的账号一般来说会新建一个只有slave权限的账号供主从同步使用，当然使用其他高权限账号，如root也是可以，不过怎么说也是不够安全。 使用账号密码登录mysql命令行，执行以下命令，新建slave权限的账号： 12mysql&gt; create user &#x27;username&#x27;@&#x27;host&#x27; identified by &#x27;password&#x27;;mysql&gt; grant replication slave on databasename.tablename to &#x27;username&#x27;@&#x27;host&#x27;; 其中host的通配符为％，表示所有ip都能连接；databasename和tablename通配符为*。 查看账号权限可用以下命令： 1mysql&gt; show grant for &#x27;username&#x27;@&#x27;host&#x27;; 步骤4–备份主数据库执行下列命令备份主数据库，用户从数据库的初始化 1shell&gt; mysqldump -u[数据库用户名] -p[数据库密码] [数据库名] &gt; [导出路径] 使用tail命令查看备份数据文件的最后几行，获取当前备份文件的备份时间，这个时间很重要，需要靠这个时间来确认从数据库的起始同步点，结果如图： 步骤5–配置从数据库从属性1修改my.cnf配置文件，修改server_id，可选修改log_bin、binlog-do-db属性。这里的server_id表示数据库的独特标识，所以不能主数据库的server_id相同，如： 12[mysqld]server_id = 2 步骤6–重启从数据库（同步骤2）其中mysql为服务名称，根据/etc/init.d/中对应的数据库服务名，可能为mysqld、mysql、mysql.server。 1shell&gt; service mysql restart 步骤7–从数据库初始化把步骤3备份出来的数据库文件导入到从数据库主机中，我这边是是用scp命令，由于是内网，所以速度会非常快。 1shell&gt; scp [主数据库备份文件路径] [从数据库主机用户名]@[从数据库主机IP（或域名）][从数据库主机将要存放备份文件目录] 使用账号密码登录mysql命令行，执行以下命令，导入数据库文件到从数据库，以完成从数据库的数据初始化。当然，前提是已经建好了对应的数据库 12mysql&gt; use [数据库名]; // 进入指定数据库mysql&gt; source [数据库文件目录]; // 导入数据库文件 步骤8–根据主数据库的binlog文件确认同步点当前主数据库的binlog文件为mysql-bin.000006。 根据步骤4获取到的备份文件时间，现在就用上了。我们需要依靠这个备份文件时间来获取同步点，即需要查看主数据库binlog文件获取备份文件时间后第一个操作的时间节点，其对应的pos值就是我们所需的同步点。 执行以下命令查看binlog文件在备份文件时间前后约半个小时内的操作记录。由于备份文件时间为2016-07-08 17:15:42，所以前后大概查看2016-07-08 17:00:00到2016-07-08 17:30:00这段时间。当然这段时间是任意设置的，甚至可以查看所有操作记录，慢慢一个个挨着找。 1shell&gt; /usr/local/mysql/bin/mysqlbinlog --start-datetime=&quot;2016-07-08 17:00:00&quot; --stop-datetime=&quot;2016-07-08 17:30:00 mysql-bin.000006&quot; 由于编码和binlog编码不一样，导致了以下的错误： 这个时候添加参数--no-defaults即可： 1shell&gt; /usr/local/mysql/bin/mysqlbinlog --no-defaults --start-datetime=&quot;2016-07-08 17:00:00&quot; --stop-datetime=&quot;2016-07-08 17:30:00&quot; mysql-bin.000006 接着在结果中慢慢找到刚小于2016-07-08 17:15:42和刚大于2016-07-08 17:15:42的位置： 接着就得出214497149就是为同步点 步骤9–配置从数据库从属性2步骤5中的从属性是配置mysql配置文件my.cnf的，而这里是对数据库内容进行配置。 使用账号密码登录mysql命令行，执行以下命令，配置从属性： 123mysql&gt; change master to master_host=&#x27;[主数据库IP]&#x27;,master_user=&#x27;[步骤3新建的slave权限账号名]&#x27;,master_password=&#x27;[步骤3新建的slave权限账号密码]&#x27;, master_log_file=&#x27;[步骤8说明的binlog文件名(这里为 mysql-bin.000006)]&#x27;,master_log_pos=[步骤8获取的同步点(这里为214497149)];mysql&gt; start slave; // 启动从数据库的从同步复制服务 使用以下命令可查看从同步复制服务的状态： 1mysql&gt; show slave status\\G; 至此，主从复制就配置完成了。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"同步","slug":"同步","permalink":"http://gaussli.com/tags/%E5%90%8C%E6%AD%A5/"},{"name":"MySQL","slug":"mysql","permalink":"http://gaussli.com/tags/mysql/"},{"name":"主从","slug":"主从","permalink":"http://gaussli.com/tags/%E4%B8%BB%E4%BB%8E/"},{"name":"复制","slug":"复制","permalink":"http://gaussli.com/tags/%E5%A4%8D%E5%88%B6/"}]},{"title":"[Linux]Nginx安装","slug":"linux-nginx安装","date":"2016-07-08T07:28:55.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/07/08/linux-nginx安装/","link":"","permalink":"http://gaussli.com/2016/07/08/linux-nginx%E5%AE%89%E8%A3%85/","excerpt":"","text":"Linux中Nginx安装1. 下载Nginx的tar.gz源码版本，解压并复制到安装的目录下12tar -zxvf nginx-file.tar.gzcd nginx-file 2. 创建Nginx组和用户12gorupadd nginxuseradd -M -s /sbin/nologin nginx -g nginx 3. 查看Nginx编译参数1./configure --help 4. 执行编译检查1./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module 常用模块说明： with-http_stub_status_module：开启Nginx状态检测 with-http_ssl_module：开启Https安全请求 若出现： 1234./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_moduleoption, or install the PCRE library into the system, or build the PCRE librarystatically from the source with nginx by using --with-pcre=&lt;path&gt; option. 说明没有安装pcre-devel包，执行yum install pcre-devel进行安装 若出现： 1234./configure: error: SSL modules require the OpenSSL library.You can either do not enable the modules, or install the OpenSSL libraryinto the system, or build the OpenSSL library statically from the sourcewith nginx by using --with-openssl=&lt;path&gt; option. 说明没有安装openssl-devel包，执行yum install openssl-devel进行安装 所有检查成功后，一般会出现待会安装的一些信息： 123456789101112131415161718Configuration summary + using system PCRE library + using system OpenSSL library + using system zlib library nginx path prefix: &quot;/usr/local/nginx&quot; nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot; nginx modules path: &quot;/usr/local/nginx/modules&quot; nginx configuration prefix: &quot;/usr/local/nginx/conf&quot; nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot; nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot; nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot; nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot; nginx http client request body temporary files: &quot;client_body_temp&quot; nginx http proxy temporary files: &quot;proxy_temp&quot; nginx http fastcgi temporary files: &quot;fastcgi_temp&quot; nginx http uwsgi temporary files: &quot;uwsgi_temp&quot; nginx http scgi temporary files: &quot;scgi_temp&quot; 5. 执行编译1make install 6. 执行安装，其实就是复制到目标目录1make (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"Nginx","slug":"nginx","permalink":"http://gaussli.com/tags/nginx/"},{"name":"源码安装","slug":"源码安装","permalink":"http://gaussli.com/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"}]},{"title":"四川之行 九寨沟 Day Three","slug":"2016-06-20-九寨沟","date":"2016-06-20T04:00:00.000Z","updated":"2021-07-26T15:17:18.139Z","comments":true,"path":"2016/06/20/2016-06-20-九寨沟/","link":"","permalink":"http://gaussli.com/2016/06/20/2016-06-20-%E4%B9%9D%E5%AF%A8%E6%B2%9F/","excerpt":"","text":"九寨沟 海拔在三千多一点 属高原湿润气候 因为里面的九个村寨而得名 当然最出名的就两三个 荷叶寨 树正寨 则查洼寨 好听点说是出名 其实就是商业化比较严重的三个村寨 里面各种购物 也难怪 现时的九寨沟已经是一个十分成熟的景区了 共分为三个沟 树正沟 日则沟 则查洼沟 形成一个Y字形 在前一晚听说九寨沟早上放行是大概7:45到8:00 于是一大早起来 酒店提供早餐 馒头 白粥 榨菜 泡菜 很清淡的早餐 师傅载我们到九寨沟入口 虽说前一晚我们都走到了入口 不过其实也是有一段距离的 早上多了两人同行 是友人的友人 不过他们还没买门票 所以到九寨沟入口 排队先买个门票 幸亏还不是到很旺的季节 不然就可能要排很久了 同行友人买票时间 随便拍两张 试试手 虽说不是很旺的季节 不过也是不少人了 听前一晚酒店介绍的小哥说 入沟人数大概会在1万多 正式入沟 九寨沟进去是要搭观光巴的 当然也可以不搭 只不过走路的话 就很远很远了 很尴尬的是 写到这里 我上传到百度网盘的图片不见了 导致整段四川行程记录到此结束～～","categories":[{"name":"Travel","slug":"travel","permalink":"http://gaussli.com/categories/travel/"},{"name":"九寨沟","slug":"travel/九寨沟","permalink":"http://gaussli.com/categories/travel/%E4%B9%9D%E5%AF%A8%E6%B2%9F/"}],"tags":[{"name":"九寨沟","slug":"九寨沟","permalink":"http://gaussli.com/tags/%E4%B9%9D%E5%AF%A8%E6%B2%9F/"}]},{"title":"四川之行 开往九寨沟的汽车上 Day Two","slug":"2016-06-19-四川之行_开往九寨沟的汽车上","date":"2016-06-19T04:00:00.000Z","updated":"2021-07-26T15:17:15.295Z","comments":true,"path":"2016/06/19/2016-06-19-四川之行_开往九寨沟的汽车上/","link":"","permalink":"http://gaussli.com/2016/06/19/2016-06-19-%E5%9B%9B%E5%B7%9D%E4%B9%8B%E8%A1%8C_%E5%BC%80%E5%BE%80%E4%B9%9D%E5%AF%A8%E6%B2%9F%E7%9A%84%E6%B1%BD%E8%BD%A6%E4%B8%8A/","excerpt":"","text":"8:30 AM 通过10大洋的Uber 从春熙路酒店附近到蜀汉路地铁站 寻找包车师傅 多杰 由于师傅是藏族人 所有本来是没有中文名的 多杰的中文名也是上学的时候老师给起的 没想到由于成都会限号 师傅的车进不来三环内 所以只能我们去三环外的蜀汉路地铁站了 一路经过 郫县 –&gt; 都江堰 –&gt; 汶川 –&gt; 茂县 –&gt; 松潘 –&gt; 漳扎镇 最后到达九寨沟沟外彭丰村 一辆现代伊兰特 一位藏族师傅 全程跑400多公里 接近500公里 下午5点多6点才到 成都的天气热度和广州是有得比的 而且车多 自然空气也没有十分好 所以会有一定的灰霾 成都出发 看到离九寨沟472km 跑过一段 经过第一个县城 郫县 跑过郫县 进入都江堰 天开始蓝 云开始白 空气开始好 温度开始凉 没有了城市中的热岛效应 都江堰前的道路基本都是高速 两旁整洁 给人很洁净的感觉 远处就是山 给人很舒服的感觉 一路上出了都江堰后 基本都是走环山公路 而且公路旁边就是基本贯穿整个路程的岷江 一路上就可以见到藏族村寨特色的建筑了 这个就和广东的平房不一样了 应该也是为了排水造成这样的屋檐？ 如果地理我没记错的话是这样 接下来我就是睡下醒下 再睡下醒下了 师傅中途加了个油 顺便就买了樱桃 10块一斤 便宜极了 好吧 樱桃我不怎么感冒 而且听说还有虫 喔 后来还听说 有虫正常 再喔 中途在茂县吃了个饭 三人100不到 还挺好 而且米饭里有谷类 听藏族师父说这是特色 吃起来还挺好吃的 途中经过松潘古城 外有一古城墙 据说是其中有文成公主和松赞干布的故事 好吧 我只懂一二 进入九寨沟境内 发现周围的树木都变得一片一片的针叶林化 和广东的不同了 一段路的远处还能看到一座山的山顶有积雪 好吧 坐在车内不只是感到凉了 都开始感觉到冷了 趁着 在某一服务中心借个厕所的间隙 从行李箱拿件外套穿着 不然就越来越冷了 继续行车不久 有一个很大的薰衣草园 薰衣草都几乎开满了 不得不承认 上面的薰衣草照片 着实就是一张废片 对焦失败 快门跟不上 以我渣渣后期能力已经补救不到了 放出来只是仅仅说明这一片薰衣草园的存在 唔 天气不错 听师傅说这样的天气 明天九寨沟会是晴天 不过天气有时也会变化得很快 不多久就又多云了 不过整体来说还是一个好天气 一路上会经过很多藏族村寨 又经过一个 有一座类似箭塔的建筑物 想起了各种游戏中的箭塔～～ 很久都没有看到这么大的云了 喔喔喔 终于到了彭丰村 到处都是旅馆酒店 九寨沟果然是一个旅游商业化很严重的地方了 checkin好 放好行李 发现差不多7点 天还没有开始黑的意思 就出去随便走走 熟悉下吧 hello 小花 友人是个爱花之人 导致整个旅程多了很多个快门是给花儿的 走着走着 来到了九寨沟门口处 远处山上还能看到日落的余晖 感觉暖暖的 路边发现拍出来很假的花 九寨沟门口 就肯定有九寨沟三个大字 夜幕来了 还看到了大大的月亮 3000多海拔的地方 离月亮也会近一点 手持都能拍出个月亮 回去的路上顺便买了明天的九寨沟门票 防止到时再买太多人了 买完走回来就9点了 天还没完全黑 找吃的去 转了一圈 最后想着回住的那里吃 （住的那里同时还会提供吃饭的地 不过都9点多了 店家说师傅下班了 推荐了旁边不远的 藏家小菜 店里都是其他人的留言 是间富有情怀的小店 来都来了 我们也督只龟吧 点了一份牦牛干锅餐 试了他家自制的酸奶 老板娘很好人 送了一小壶青稞酒 好奇之下 还试了他家自酿的桑葚酒 听说有50多度 入口果然很呛 不过是挺香的 出完回酒店 听酒店的店家说九寨沟的正确走法 树正沟 日则沟 则查洼沟 巴拉巴拉一段后 大概知道了 毕竟来之前九寨沟是做得最多攻略的了 具体怎么走我也是知道了 九寨沟那边的人可能都很喜欢酿酒 酒店的店家都自己酿了 枸杞酒 小试一下 也是很烈 不过感觉很好 至此 End","categories":[{"name":"Travel","slug":"travel","permalink":"http://gaussli.com/categories/travel/"},{"name":"九寨沟","slug":"travel/九寨沟","permalink":"http://gaussli.com/categories/travel/%E4%B9%9D%E5%AF%A8%E6%B2%9F/"}],"tags":[{"name":"成都","slug":"成都","permalink":"http://gaussli.com/tags/%E6%88%90%E9%83%BD/"}]},{"title":"四川之行 成都 Day One","slug":"2016-06-18-四川之行","date":"2016-06-18T04:00:00.000Z","updated":"2021-07-26T15:17:10.752Z","comments":true,"path":"2016/06/18/2016-06-18-四川之行/","link":"","permalink":"http://gaussli.com/2016/06/18/2016-06-18-%E5%9B%9B%E5%B7%9D%E4%B9%8B%E8%A1%8C/","excerpt":"","text":"在决定去四川的时候 在决定整个路程的时候 我就觉得 这是一场很长很长的旅途 很多人都说 成都是一个生活节奏很慢很慢的城市 是一个让人来了就不想离开的城市 09:40AM 离开广州 12:05PM 到达成都 飞机餐 还是一如既往地难吃 四川航空 3U8646 中型机 第一次搭乘四川航空 总体来说还是算平稳 联系成电的朋友兼旧同事 都说uber很便宜 那就打uber进入市区吧 其实成都并不算是一个特别大的城市 双流机场到市中心也就十多公里 位于成都的西南位置 uber进入市中心也就只要26大洋 想想这在广州怎么可能啊 不过uber过程中听司机说成都将会有个新机场 那就比较远了 噢 成都的人感觉都很健谈的样子 几次uber 司机都很好谈话 基本都是说个不停 市中心主道路也和北京一样分几环几环的 一、二、三环 外加一条绕城高速 就组成了整个成都的主路网 uber到酒店还是走了点远路 貌似成都的路很多都不能左转 这点想来想去都没明白是为毛 而且成都 车真是多 已经是每日都有各种限号了 居然还是会一整天都能塞 酒店在春熙路附近 checkin后休息了一会儿 已经差不多2点多了 外出觅食 春熙路 就像广州的北京路 就是一条商业步行街 在其中找到了一间名叫龙抄手的总店 那就去试试吧 好了 两个人吃 点多了 那就每种试试好了 红油抄手 辣 凉粉 辣 鸡丝凉面 辣 感觉自从大学毕业后吃辣少了 对辣的承受程度也降低了 还是喝个银耳羹解解辣 好了 最后也就每种吃一半 吃完 是时候找一找成电的小伙伴了 随后 走到了IFS 看到了标示性 大熊猫 的屁股 随后的随后 走了走太古里 就是广州的太古汇 奢侈品的世界 本来下午计划是去宽窄巷子走走的 最后发现时间不太够 那就去吃晚饭好了 在小伙伴的带领下 啥火锅？ 好吧 我忘记了 印象最深刻的 有一种酱料是一整罐油 请干了这罐热油 yeah 有一种食物命名为七上八下 有一种火锅是全是油和辣椒和花椒 有一种成都特色豆奶叫唯怡豆奶 火锅还是很不错的 果然是比广州的辣和麻 果然是名不虚传的四川火锅 好了 过程中都没有拍照 就给出一张战后状况吧 吃完 小伙伴带着去了锦里的夜市 去的时候灯还没亮起来 出来的时候灯就亮了 随便走一走 很多小食 很多小工艺品 初来成都 一脸懵逼 走了走就离开了 回到酒店附近 买了下面包和干粮 准备第二天出发九寨沟 Day One End～","categories":[{"name":"Travel","slug":"travel","permalink":"http://gaussli.com/categories/travel/"},{"name":"九寨沟","slug":"travel/九寨沟","permalink":"http://gaussli.com/categories/travel/%E4%B9%9D%E5%AF%A8%E6%B2%9F/"}],"tags":[{"name":"成都","slug":"成都","permalink":"http://gaussli.com/tags/%E6%88%90%E9%83%BD/"}]},{"title":"[iOS]ipa打包分发测试的演进之路","slug":"ios-ipa打包分发测试的演进之路","date":"2016-06-14T17:45:03.000Z","updated":"2021-07-26T15:10:01.371Z","comments":true,"path":"2016/06/15/ios-ipa打包分发测试的演进之路/","link":"","permalink":"http://gaussli.com/2016/06/15/ios-ipa%E6%89%93%E5%8C%85%E5%88%86%E5%8F%91%E6%B5%8B%E8%AF%95%E7%9A%84%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF/","excerpt":"","text":"时期一2016年01月，每日都需要发布一个版本，无论进展如何，功能是否完成。 处理思路： 服务器（Windows）中跑Tomcat服务，提供ipa及apk包的下载服务 每次打完包后上传到SVN，而且ipa打包是靠Xcode内Archive功能 制作一个下载页html，包含所有下载包的下载链接 每次需要登录服务器Update更新内容 处理流程： 打包ipa或apk包 修改下载页html内容 commit到svn中 远程登录服务器（Windows） 在对应的Tomcat服务中update svn的内容 完成 处理耗时： 一般情况在15min左右，网络问题出现的情况可能需要30min甚至更长。 时期二2016年05月初，此时已经不需要每日发布一个版本了，不过仍然会比较频繁，有可能两日一个、三日一个、甚至一日两个、三个版本。 处理思路： 由于通过Xcode打包实在太慢，转换到通过脚本来打包。通过脚本打包能绕过Xcode打包过程的联网验证行为，这个联网验证会经常出现连接失败的错误；不过脚本打包存在一个小问题，就是打包出来的ipa会比通过Xcode打包出来的大一点点，通过分析包内容也没有得到具体的原因所在。 由于之前的那台服务器（Windows）已经不再跑Tomcat服务了，所以需要把整个软件包下载服务器迁移到一个Linux（CenOS6.7）上。 考虑到Linux下svn操作不熟悉，就把原本svn上的下载内容迁移到了Git上。 考虑到ipa和apk包都是静态文件，那就使用nginx做服务容器吧。 直接开放nginx中对应文件目录访问权限，舍弃下载页html的维护。 处理流程： 通过脚本打包ipa push ipa到Git对应的repo上 通过ssh登录服务器（Linux） 在对应位置pull更新内容 完成 处理耗时： 一般少于5min 时期三2016年05月某日，一日天发布了三个包，发现每次都ssh登录服务器进行更新实在麻烦，由于服务器的登录密码都是随机的，所以每次都需要复制黏贴密码 处理思路： 在服务器（Linux）中配置一个定时任务，每两个小时自动执行pull更新内容操作 处理耗时： 由于只需要通过脚本打包并push上Git了，所以耗时能大大缩短，大概2、3min就能完成一次发布包的提交，接着就是等待服务器自动更新了。 总结打包脚本：提供ipa打包服务Git：提供ipa包存储同步服务nginx：提供Web访问ipa包服务 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"}],"tags":[{"name":"打包","slug":"打包","permalink":"http://gaussli.com/tags/%E6%89%93%E5%8C%85/"},{"name":"分发","slug":"分发","permalink":"http://gaussli.com/tags/%E5%88%86%E5%8F%91/"},{"name":"测试","slug":"测试","permalink":"http://gaussli.com/tags/%E6%B5%8B%E8%AF%95/"}]},{"title":"[Linux]Nginx命令行参数","slug":"linux-nginx命令行参数","date":"2016-06-08T07:27:00.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/06/08/linux-nginx命令行参数/","link":"","permalink":"http://gaussli.com/2016/06/08/linux-nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/","excerpt":"","text":"Linux中Nginx命令行参数原文http://nginx.org/en/docs/switches.html 详文nginx支持下列命令行参数 -? | -h －－打印命令行参数帮助信息。 -c file －－用一个指定的配置文件file来代替默认的配置文件。 -g directives －－设置临时全局配置项，如 1nginx -g &quot;pid /var/run/nginx.pid; worker_processes `sysctl -n hw.ncpu`;&quot; -p prefix －－ 指定nginx的安装目录，该安装目录需要包含服务器相关文件（默认值为/usr/local/nginx）。 -q －－在测试配置文件正确性的过程中不输出非错误信息 -s signal －－发送一个signal到nginx主进程。参数signal是下面中的一个： stop －－快速关闭nginx quit －－正常关闭nginx，等待所有正在执行的请求完成再进行关闭 reload －－重载配置文件，根据新配置文件开启一个新工作进程，正常关闭旧工作进程 reopen －－重新打开日志文件 -t －－测试配置文件的正确性：nginx可以检查配置文件的语法 -T －－和-t一样，但是会额外转存配置文件到标准输出（1.9.2） -v －－打印nginx版本 -V －－打印nginx版本，编译版本，以及配置参数 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"Nginx","slug":"nginx","permalink":"http://gaussli.com/tags/nginx/"},{"name":"命令行","slug":"命令行","permalink":"http://gaussli.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"},{"name":"翻译","slug":"翻译","permalink":"http://gaussli.com/tags/%E7%BF%BB%E8%AF%91/"}]},{"title":"[iOS]NSAttributedString的属性（CharacterAttributes）","slug":"ios-nsattributedstring的属性（characterattributes）","date":"2016-06-06T17:48:00.000Z","updated":"2021-07-26T15:11:07.392Z","comments":true,"path":"2016/06/07/ios-nsattributedstring的属性（characterattributes）/","link":"","permalink":"http://gaussli.com/2016/06/07/ios-nsattributedstring%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%88characterattributes%EF%BC%89/","excerpt":"","text":"定义123456789101112131415161718192021NSString *const NSAttachmentAttributeName;NSString *const NSBackgroundColorAttributeName;NSString *const NSBaselineOffsetAttributeName;NSString *const NSExpansionAttributeName;NSString *const NSFontAttributeName;NSString *const NSForegroundColorAttributeName;NSString *const NSKernAttributeName;NSString *const NSLigatureAttributeName;NSString *const NSLinkAttributeName;NSString *const NSObliquenessAttributeName;NSString *const NSParagraphStyleAttributeName;NSString *const NSShadowAttributeName;NSString *const NSStrikethroughColorAttributeName;NSString *const NSStrikethroughStyleAttributeName;NSString *const NSStrokeColorAttributeName;NSString *const NSStrokeWidthAttributeName;NSString *const NSTextEffectAttributeName;NSString *const NSUnderlineColorAttributeName;NSString *const NSUnderlineStyleAttributeName;NSString *const NSVerticalGlyphFormAttributeName;NSString *const NSWritingDirectionAttributeName; (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"}],"tags":[{"name":"NSAttributedString","slug":"nsattributedstring","permalink":"http://gaussli.com/tags/nsattributedstring/"}]},{"title":"[Linux][翻译]MySQL安装（通用二进制发行版方式）","slug":"linux-翻译-mysql安装（通用二进制发行版方式）","date":"2016-06-04T07:22:59.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/06/04/linux-翻译-mysql安装（通用二进制发行版方式）/","link":"","permalink":"http://gaussli.com/2016/06/04/linux-%E7%BF%BB%E8%AF%91-mysql%E5%AE%89%E8%A3%85%EF%BC%88%E9%80%9A%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8F%91%E8%A1%8C%E7%89%88%E6%96%B9%E5%BC%8F%EF%BC%89/","excerpt":"","text":"小言MySQL 是易上手的而且还很热门的，虽然它已经被 Oracle 揽入门下了，不过怎么说都没有 Oracle 的复杂，还记得大学期间学数据库使用的就是 Oracle ，安装起来各种坑各种跳。再者社区版开源，拥抱开源。废话说多了～ 本文记录的是通过源码进行MySQL的安装以及配置。 环境操作系统：CentOS 7.0 MySQL 版本：mysql-5.6.31-linux-glibc2.5-x86_64（ MySQL 的 Linux 通用发行版） 概况Oracle 提供了一系列 MySQL 的二进制发行版，其中包含适用大部分 Linux 平台的通用二进制发行版（以 .tar.gz 后缀的 tar 压缩文件形式给出），以及针对不同系统平台的独特发行版。 本章节主要讲述 MySQL 通用发行版的安装。其他针对不同系统平台的独特发行版的安装请查看对应的安装章节。如，针对 Windows 平台的安装，请查看 Section 2.3, “Installing MySQL on Microsoft Windows”。 关于如何获取 MySQL ，请查看 Section 2.1.2, “How to Get MySQL”。 MySQL 二进制发行版的 tar 压缩文件以mysql-VERSION-OS.tar.gz的形式进行命名，其中 VERSION 是一串数字（如5.6.32），OS 表明该发行版适用于哪种系统平台（如pc-linux-i686或winx64）。 警告如果你原本已经通过操作系统自身的软件包管理工具（如yum或apt-get）安装过 MySQL ，那么应该就经历过安装过程遇到的问题。在进行安装之前，确保原本所安装的 MySQL 已经被完全移除（通过软件包管理工具），并且其他额外的文件，如旧版本的数据文件，也要全部移除。你应该检查相关的配置文件或目录，如/etc/my.cnf或/etc/mysql，是否存在，若存在，则同样全部移除它们。 关于使用官方的 MySQL 软件包来替代第三方提供的软件包的信息，请查看相关的 Apt guide 或 yum guide。 警告MySQL 需要依赖libaio包。如果本地没有安装此依赖包，则会导致数据目录初始化以及后续的服务启动都出现失败的情况。如果需要进行安装，则通过合适的软件管理工具即可，如在基于 Yum 的系统中： 123shell&gt; yum search libaio #search for infoshell&gt; yum install libaio #install library 或者，在基于 APT 的系统中： 123shell&gt; apt-cache search libaio # search for infoshell&gt; apt-get install libaio # install library 如果在安装执行过程遇到问题并需要提交bug问题，请查看 Section 1.6, “How to Report Bugs or Problems”。 在 Unix 中，安装 tar 压缩文件形式的二进制发行版，需要解压到你所选择的安装目录下（通常为/usr/local/mysql）。随后将会看到如下表的文件目录： 目录 目录内容 bin, scripts mysqld服务，客户端程序及其他帮助程序 data 日志文件，数据库文件 docs MySQL 手册 man MySQL 手册（Unix命令行形式） include MySQL 所需的头文件 lib MySQL 所需的库文件 share 其他各种支持文件，包括错误信息，示例配置文件，数据库初始化的 SQL 语句文件等 sql-bench Benchmarks 安装 MySQL 二进制发行版，所需的命令列表如下： 1234567891011121314shell&gt; groupadd mysqlshell&gt; useradd -r -g mysql -s /bin/false mysqlshell&gt; cd /usr/localshell&gt; tar zxvf /path/to/mysql-VERSION-OS.tar.gzshell&gt; ln -s full-path-to-mysql-VERSION-OS mysqlshell&gt; cd mysqlshell&gt; chown -R mysql .shell&gt; chgrp -R myaql .shell&gt; scripts/mysql_install_db --user=mysqlshell&gt; chown -R root .shell&gt; chown -R mysql datashell&gt; bin/mysqld_safe --user=mysql &amp;# 其他可选命令shell&gt; cp support-files/mysql.server /etc/init.d/mysql.server 注意上述命令的执行是假设你已经拥有root（系统管理员）权限。否则，你需要在每个命令前使用前缀获取管理员权限，Linux 下使用sudo，OpenSolaris 下使用pfexec。 注意上述命令的执行并不会设置 MySQL 帐号的密码。此操作请查看 Section 2.10.4, “Securing the Initial MySQL Accounts”。 从 MySQL 5.6.8开始，mysql_install_db脚本会在安装目录下生成一个默认的配置文件my.cnf。这个文件的生成是基于发行版中一个my-default.cnf文件。关于配置文件的更多信息，请查看 Section 5.1.2.2, “Using a Sample Default Server Configuration File”。 关于上述命令更多的详细描述，如下。 创建一个 mysql 的用户和群组如果你的系统并没有mysql的用户和群组来运行mysqld服务，则需要创建一个这样的用户和群组。以下的命令的作用就是创建一个mysql用户和一个mysql群组。当然你也可以不命名为mysql，而是其他你所喜欢的，只需把命令中对应的名称替换了即可。useradd和groupadd语法会根据不同的 Unix 系统而有所不同，也许有些系统就是使用adduser和groupadd语法。 12shell&gt; groupadd mysqlshell&gt; useradd -r -g mysql -s /bin/false mysql 注意因为mysql用户只是用来制定目录归属，而不是用来登录系统，所以useradd命令使用了-r和-s /bin/false选项来设置mysql用户没有登录系统的权限。如果你的useradd命令不支持这种选项，则可忽略了。 获得并解压发行版文件选择好解压目录并进入到目录中。本示例中解压目录是在/usr/local下。所以以下的操作都假设你已经拥有在/usr/local下创建文件和目录的权限。如果所选择的目录是受保护的，那么以下的安装过程就需要使用root权限. 1shell&gt; cd /usr/local 关于如何获得发行版文件，请查看 Section 2.1.2, “How to Get MySQL”。对于所有的发布包，都是通过同一套 MySQL 源码发行版编译打包出来的。 解压发行版文件后就能在安装目录下看到对应的安装文件和文件夹。接着创建一条到安装目录的软链接。 12shell&gt; tar zxvf /path/to/mysql-VERSION-OS.tar.gzshell&gt; ln -s full-path-to-mysql-VERSION-OS mysql tar命令会创建一个名为mysql-VERSION-OS的目录。ln命令创建一条到该目录的软链接，这样更容易更方便地操作目录/usr/local/mysql 执行后续安装初始化配置剩下的安装命令包含设置安装目录的归属以及访问权限、初始化数据目录、启动 MySQL 服务、设置 MySQL 配置文件。更多信息请查看 Section 2.10, “Postintallation Setup and Testing”。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"MySQL","slug":"mysql","permalink":"http://gaussli.com/tags/mysql/"},{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"翻译","slug":"翻译","permalink":"http://gaussli.com/tags/%E7%BF%BB%E8%AF%91/"}]},{"title":"[Linux]软件源码安装","slug":"linux-软件源码安装","date":"2016-06-02T07:49:39.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/06/02/linux-软件源码安装/","link":"","permalink":"http://gaussli.com/2016/06/02/linux-%E8%BD%AF%E4%BB%B6%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/","excerpt":"","text":"小言在Linux中，安装软件和Windows的不尽相同（此处不考虑桌面环境下的安装）。Linux其实也有类似于Windows下的软件管理工具，如Debian家族的apt-get和dpkg；又如Red Hat家族的RPM和Yum，它们都和Windows下什么360软件管家、百度软件管家的角色差不多，都是用来管理系统软件。当然功能肯定是没有360和百度的强大，而且是一系列相关的命令。 然而通过这种软件管理器来进行软件有好有不好，好的方面很明显，就是安装快速，而且自动处理依赖；不好的方面也很容易想到，不一定有最新版的安装包，软件移植也是基本不可能，而且安装出来的目录分散，bin、lib、etc都很可能会有软件的相关文件，容易造成目录混乱。 通过源码编译安装，就把上述好与不好的进行置换，选择那种方式的这种权衡就只有个人把握了。 步骤源码安装一般来说共分三个步骤(配置[Configure]、编译[make]、安装[make install])，当然不排除一些软件需要前提配置和后期配置的操作。所以在安装前还是最好阅读一下该软件的README文件、INSTALL文件或其它安装说明文档，总能找到对应的安装信息。 配置[Configure]1$ ./configure Configure是一个可执行脚本，最主要的工作是检查依赖是否完整，一次过没有错误是最好的，不然就要慢慢查看是哪里出现问题了。Configure有很多参数或选项，可以通过./configure –help查看详细的选项列表。其中最常用的想必就是--prefix=XXX了，该选项是配置软件安装路径，“XXX”为安装路径。如果不进行配置，软件的各种文件就会被分到不同的目录中，可执行文件默认在/usr/local/bin中；库文件默认在/usr/local/lib中；配置文件默认在/usr/local/etc中；其它资源文件放在/usr/local/share中。使用--prefix选项能在卸载软件时直接把对应安装路径下的文件删除即可卸载干净。 编译[make]1$ make 经过上述的Configure，编译前提工作已经准备就绪，执行make命令进行编译工作。 安装[make install]1$ make install 编译完毕就会产生可执行文件等内容了，但是这个时候所有文件还在当前的文件夹内，所以执行make install命令来把相关文件安装到目标目录中，其实其中的过程大量的工作都是在拷贝文件，这个操作基本都是需要root权限的，所以如果当前不是root用户，临时切换一下就可以了。 至此，软件的源码安装就可完成，后续的软件配置就会因软件而有所不同了。 (•̀ᴗ•́)و ̑̑","categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"}],"tags":[{"name":"源码安装","slug":"源码安装","permalink":"http://gaussli.com/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"}]},{"title":"湖南长沙之行","slug":"2016-05-10-湖南长沙之行","date":"2016-05-10T04:00:00.000Z","updated":"2021-07-26T15:16:48.815Z","comments":true,"path":"2016/05/10/2016-05-10-湖南长沙之行/","link":"","permalink":"http://gaussli.com/2016/05/10/2016-05-10-%E6%B9%96%E5%8D%97%E9%95%BF%E6%B2%99%E4%B9%8B%E8%A1%8C/","excerpt":"","text":"工作累了 压力大了 是时候来一场说走就走 任性&amp;疯狂 才对得起这廿几岁 4月29日 5月的最后一个工作日 照常拖着疲惫的身体准备回住的地方 经过一同事位置 发现他在看旅游的信息 “准备去旅游？” “看看51有什么地方好玩” “喔 去哪？ 好地方我也去” “看看吧” 就酱 这场长沙 就开始了 高铁 火车 住宿 路线 美食 三个小时攻略信息 该买的买好了 该plan的plan好了 就差第二日能不能早起的事情了 4月29日深夜 的确 生活充满着很多事与愿违的事情 一个项目的事情 一个打包的事情 就这样到了3点才躺上床 4月30日 早上5点半 带着强烈的困意还是起来了 洗漱 收拾 出门 步行 地铁 南站 取票 劳动节虽说只有法定三日 可是人还是很多 8:00AM 2.5h 站在了广州到长沙的高铁上 同时也见证着一场小规模的人类短期迁徙活动 平时广州回一趟佛山也基本需要2.5h 同样的时间能北上700多公里 想想也是奇妙 10:20AM左右 到达长沙南站 长沙的地铁现今就是一条过的2号线 穿过雨花 芙蓉 岳麓三个区 &amp; 奇怪的数字2起始命名 首站 岳麓山 可是吃最紧要 于山脚找吃 所以就有了首站之前 午饭 看见了PizzaHut 看见了三汁焖锅 来到长沙吃这？ 长沙作为湘菜的代表地 不可能不吃湘菜 岳麓区新民路 大碗厨 第一顿的湘菜 偏家常小菜 什么鬼牛肉 什么鬼黄鸭叫 还有一个香辣猪蹄 味道最好还是个猪蹄 黄鸭叫后来才知道原来是一种鱼 湘菜的辣和广东做出来的辣还是不一样的 我这种词穷得理科生看来 就是辣得干净利落 还有一个有趣的现象就是他们那边上饭是用保温瓶上的 在米饭的保温上不失为一个好办法 无知的我还以为是外带食物 1:30PM 左右 正式开始首站 岳麓山 岳麓山主要有两个门进 中午吃午饭的地方靠近东门 东门有缆车可上山 南门需要从湖大进去 较多的景点都是靠近南门 东门除了缆车就没啥好看的了 于是选择了南门进 公交经潇湘中路、牌楼路和麓山南路至湖大校园内 看见赫赫有名的毛爷爷像 看见有着湖南大学牌匾的建筑 看见湖南大学的图书馆 看见不明所以的一间自卑亭 毛爷爷像两旁都可登山 一条是登高路 正式的南门入口 一条是不知名道路 岳麓书院入口 岳麓书院进能比较方便去到著名的爱晚亭 于是就花了50大洋从岳麓书院上山了 岳麓书院是中国古代四大书院之一 还是千年学府 不过反正我是不懂 既不懂它的文化 也不懂它的艺术 走来走去 拍来拍去 就是到处一游了 岳麓书院和爱晚亭之间有间饰品手信店 名字起得不错 长沙记忆 爱晚亭 所处位置应该还是属于山腰甚至还只是山脚 比较多人都来感受杜牧的七言绝句《山行》 停车坐爱枫林晚 霜叶红于二月花 据闻爱晚亭最美的时候是秋天 红红火火的样子 反正我是没看过～ 继续上山 看到各种墓 岳麓书院 爱晚亭这条路线上山的话是要走石梯级的 而且部分路段比较抖 爬了不知多少时间 走走停停 梯级斜坡 来到岳麓山高点 祥云阁 这里是缆车的终点 这里能看到长沙市中心的全景 全景啥的看看就好了 当日的能见度也不是十分高 下山吧 下山不走原来的路了 从南门的路下山 经过云麓宫、古麓山寺等小景点 还是那句 作为一名理科生 走马观花看看就好了 经过真正的岳麓山南门 临走留下一照 继续下行就是上面所说的登高路 下午四五点时分 正值游客下山 登高路很多很多人 遇到传说中的长沙臭豆腐之经典名店－－黑色经典 果断买之一试 果然还是和广东的不同 很不同 遇到一长沙名店－－杨裕兴 经过一卖酒的店子 遇到一熊猫酸奶 打着纯手工制作的名号 而且店铺内饰比较特色 遂也买之一试 原来不是单纯的酸奶 上面还有点提子、红豆、果仁等配料 由于店内布满熊猫 咨询店主是否能拍照后 留下几个快门 继续前行 再次经过毛爷爷像和湖大牌匾 找个妹纸帮忙拍照 留下湖大合影 天色渐暗 再次坐上公交 结束首站－－岳麓山 公交上遇到好心的阿姨 了解长沙特点名店和特色小食 公交开过原来的潇湘中路 经过橘子洲大桥 来到长沙最繁华的地方－－五一广场 此时由于我们还没有checkin住宿 店家又来电话吹促 无奈只能先到住宿处 接下来的住宿问题就是整个旅程最有趣的一环了 到达住宿酒店 被告知不认可去哪儿的订单 而且以迟来登记入住为由当场加价 可是明明下午还在岳麓山的时候就已经说明大概要七八点才登记入住了 去哪儿的订单已经在当天早上把双床房换成了大床房 这样已经忍了 进而继续出现这种情况 只能找去哪儿客服理论 经过一大轮的巴拉巴拉 再经过一大轮的巴拉巴拉 最后以“不给我们重新找一间 一旦我们要露宿街头 就等着收12315投诉啦”结束 时间基本快到晚上9点 晚饭都还没吃 等待去哪儿的新房间的过程中 也要去找吃的了 来到文和友老长沙龙虾馆 一心想试这出名的货 可是一间龙虾馆可谓人山人海 来都来了 就先拿个号吧 一看 前面还有200桌等候 我去 这是我拿过最夸张的排号了 无办法 这样等不下去 继续走去其他地方找吃的 走了不久就收到去哪儿的新房间信息了 由于房间只保留到11点 担心找到吃的吃完 也要过11点了 于是就先去新住处好了 查了下地图 搭个公交 还是挺远的 不过这份权益争取回来的好处就是 用原本的价格住上了好一倍的地方 10:00 PM 去到新酒店 登记下 收拾下 休息下 10:30 PM 继续出去没玩的找吃 看了看刚刚龙虾馆的微信排号 发现剩下30多桌了 看来还是有机会 遂打个的士过去 公交实在走很太远的路了 去到没等几分钟 居然就排到了 等了116分钟 差不多两个钟 真不敢相信200桌都能有机会吃到 这住宿 协商 理论 找吃 新住宿 再找吃 一路下来 深深感受到 塞翁失马 焉知非福～ 好了 这就是老长沙龙虾馆的装横 很有大院的特色 这就是老长沙龙虾馆的收银处 由于是收银处 所以很容易联想到银行二字 一开始咋眼一看还以为是长沙人银行 后来发现原来是长沙人很行 一切都是心机啊 杯子餐具也是很有情怀的 店里的服务员衣服背后都写着一句长沙方言 具体的是啥已经忘记了～～ 上菜 姜辣凤爪 老长沙卤猪脚 文和友龙虾 文和友好像是集团的名字 老长沙虾尾 凤爪中规中矩 卤猪脚的蘸料有点厉害 入口很麻 后劲很辣 龙虾够大只 肉多 虾尾没头部 几乎剥开就是完整的虾肉了 4个菜都很够辣 5月1日 00:00 AM 完成第二站 文和友龙虾馆 回酒店 休息 洗澡 喝茶 睡觉 洗漱 收拾 退房 来到第二日的中午 原本早上去看什么杜甫江阁之类的在芙蓉区的景点的 不过一个懒觉就过去了 反正文化什么的也不懂 中午 来到第三站 火宫殿 也是一名店 火宫殿以前真的是一座大寺庙 一座大火庙 位于长沙市波子街 后来波子街商业改造的同时仍然保留了部分旧址 现今保存了一宫（火宫殿） 二庙（火神庙、财神庙） 二阁（普慈阁、弥陀阁）的建筑格局 就形成了既有寺庙 又有饭馆的一个场所 融合了民俗文化、火庙文化和饮食文化 每年仍然保留了一些传统的习俗节日 现还会有火宫殿庙会 饮食分为两个地方 湘菜首府和小吃王国 湘菜首府主攻地道湘菜 小吃王国主攻当地小吃 最出名的一道菜应该就是剁椒鱼头了 入湘菜首府就是为了吃这道菜 顺便试了特色小吃 龙脂猪血和姊妹团子 剁椒鱼头其实并没有想象中好吃 有点儿咸 可能师傅当天心情不好～～ 不过剁椒的辣味和鱼头的搭配还是很赞的 本来鱼就是很淡的 加上辣味 口感还是会很不错的 毕竟是湘菜系中的传统名菜 一试还是值得的 龙脂猪血 感觉我没吃出很特别的味道 就是那个汤底是有点辣的 以下引用一下龙脂猪血的一点知识 龙脂猪血,是指加工后的猪血特别嫩滑,有如龙肝风脂一般美味。龙脂猪血用新鲜猪血味原料。制好的猪血辅以干椒末、冬排菜和芝麻油,味微辣而香脆,爽滑鲜嫩,十分可口。 姊妹团子 就是一咸一甜 不知道背后历史的话也是没啥特别的感觉 以下引用一下姊妹团子的历史 清末民初，长沙铜铺街一江姓（也有一说是姜姓）铜匠，制铜器手艺不错，还擅长烹调，他做的糯米团子就很受邻里称赞。江有二女，两姊妹长大后在火宫殿开了一家糯米团子店。姐妹俩不仅美丽聪慧，且心灵手巧，做起团子来宛如杂耍，让人看得眼花缭乱，引得很多人驻足观看和品尝，生意兴隆。有一天，一位颇有文化气质的老者吃完团子后对两姊妹说：糯米团子，味道一甜一咸，口感极好，可惜这个名字有些俗气，何不改叫’姊妹团子’？两姊妹连忙找来笔墨，请老先生书写姊妹团子四字作为新店名。从此，姊妹团子店门庭若市，生意越做越大。 吃完出发第三站 橘子洲 来到长沙 怎么也要瞻仰一下传说中的毛泽东青年艺术雕塑 橘子洲 位于湘江江心 是湘江下游众多冲积沙洲之一 西望岳麓山 东临长沙城 1925年寒秋时节 青年时期毛泽东重游橘子洲 挥笔写下《沁园春·长沙》 就让这个小沙洲出了名 独立寒秋，湘江北去，橘子洲头，看万山红遍，层林尽染 从火宫殿到橘子洲 我们发现有两个方案 一是到湘江中路地铁站坐一站地铁到橘子洲站 二是直接步行橘子洲大桥 当然我们并没有细致研究有没有公交可到～ 待我们到达湘江中路地铁站时 由于是51假期 地铁站里都是人 最后还是默默走出地铁站 选择方案二 橘子洲大桥还是很长的 走了很久很久 而且桥上很大很大风 由于橘子洲在湘江的中间 所以橘子洲大桥也是走一半就可以 可是下桥后发现等待坐观光车的人也是多得恐怖 那就慢慢走好了 好像橘子洲分成了几个区域 每个区域所种植的都不一样 走走停停 拍拍这啥 拍拍那啥 橘子洲三点多公里走下来还是很累的 当然火宫殿出发到橘子洲大桥到橘子洲也是用走的 累感觉很正常 喔 终于来到看毛泽东青年的样子 毛泽东青年艺术雕塑伫立在长沙橘子洲头，作为长沙橘子洲景区最大景观工程的青年毛泽东艺术雕塑以1925年青年时期的毛泽东形象为基础，突出表现毛泽东胸怀大志、风华正茂的形象。 青年毛泽东艺术雕塑是2007年2月经中共中央办公厅批准后建设的。雕像总高度32米，长83米，宽41米。 橘子洲毛泽东青年艺术雕塑有着特殊的意义。青年时代的毛泽东曾在橘子洲头明志，“问苍茫大地，谁主沉浮”即抒发于此，这豪迈词句也激励着年轻一代的人们奋发向上，蓄志进取。毛泽东雕塑采用钢筋混凝土框剪结构，外表材料为花岗岩石材，总高度32米。 继续走到最湘江边 视野很开阔 感受当年的 指点江山 激扬文字 可是当天的能见度还是低 哈哈哈 夜色也是慢慢来了 我们离开了橘子洲 行走在长沙的商业步行街中 感受着各种人文 体验着长沙夜市 最终的目的就是处理晚饭了 经过一间饮品店 发现很多人在排队购买 心想应该不错 于是进店跟风尝试 经过又一间黑色经典 再来过多一次臭豆腐的瘾 经过旁边一卖特色小食店 顺便试了 糖油粑粑 经过一间雪糕店 马迭尔 不明原因的人多 也买根试试 吃着的途中还有个小哥问我们是不是叫马迭尔 在哪里买 看来是这货是真火 最后一遗憾 没看见并吃上凉粉 可能是眼力不够尖 最后还是不知吃啥好 就回了火宫殿 不过今次是去小吃王国 自己捧着托盘买好想吃的东西 再找位置 就好像大学打饭一样～ 场内布置格局和氛围都像广东的早茶～ 随后找了个地方休息了下 由于是凌晨1点半的火车 51假期 车票还是十分紧张 去是刚好有高铁 回来就只能10+小时的火车了 临近出发到火车站 发现街边有个摊档 就顺便撸了个串串 火车晚点了10多分钟 差不多两点 踏上了回广州的归程 至此 End","categories":[{"name":"Travel","slug":"travel","permalink":"http://gaussli.com/categories/travel/"},{"name":"长沙","slug":"travel/长沙","permalink":"http://gaussli.com/categories/travel/%E9%95%BF%E6%B2%99/"}],"tags":[{"name":"长沙","slug":"长沙","permalink":"http://gaussli.com/tags/%E9%95%BF%E6%B2%99/"}]},{"title":"Welcome","slug":"2016-05-01-First","date":"2016-05-01T04:00:00.000Z","updated":"2021-07-26T06:01:36.000Z","comments":true,"path":"2016/05/01/2016-05-01-First/","link":"","permalink":"http://gaussli.com/2016/05/01/2016-05-01-First/","excerpt":"","text":"Omg, 你来了！这是第一篇，循例Hello World. 召唤毕生所学～～ 1printf(&quot;%s&quot;, &quot;Hello World!&quot;); 1cout&lt;&lt;&quot;Hello World!&quot;&lt;&lt;endl; 1System.out.println(&quot;Hello World!&quot;); 1NSLog(@&quot;%@&quot;, @&quot;Hello World!&quot;); 1console.log(&#x27;Hello World!&#x27;); 1echo &quot;Hello World!&quot;; This End. (•̀ᴗ•́)و ̑̑","categories":[],"tags":[{"name":"Welcome","slug":"welcome","permalink":"http://gaussli.com/tags/welcome/"}]}],"categories":[{"name":"Tech","slug":"tech","permalink":"http://gaussli.com/categories/tech/"},{"name":"Container","slug":"tech/container","permalink":"http://gaussli.com/categories/tech/container/"},{"name":"Kubernetes","slug":"tech/container/kubernetes","permalink":"http://gaussli.com/categories/tech/container/kubernetes/"},{"name":"Linux","slug":"tech/linux","permalink":"http://gaussli.com/categories/tech/linux/"},{"name":"K3S","slug":"tech/container/k3s","permalink":"http://gaussli.com/categories/tech/container/k3s/"},{"name":"Kubesphere","slug":"tech/container/kubesphere","permalink":"http://gaussli.com/categories/tech/container/kubesphere/"},{"name":"OpenEBS","slug":"tech/container/openebs","permalink":"http://gaussli.com/categories/tech/container/openebs/"},{"name":"Docker","slug":"tech/container/docker","permalink":"http://gaussli.com/categories/tech/container/docker/"},{"name":"Middleware","slug":"tech/middleware","permalink":"http://gaussli.com/categories/tech/middleware/"},{"name":"Seata","slug":"tech/middleware/seata","permalink":"http://gaussli.com/categories/tech/middleware/seata/"},{"name":"Zipkin","slug":"tech/middleware/zipkin","permalink":"http://gaussli.com/categories/tech/middleware/zipkin/"},{"name":"Showdoc","slug":"tech/middleware/showdoc","permalink":"http://gaussli.com/categories/tech/middleware/showdoc/"},{"name":"xxl-job","slug":"tech/middleware/xxl-job","permalink":"http://gaussli.com/categories/tech/middleware/xxl-job/"},{"name":"Apollo","slug":"tech/middleware/apollo","permalink":"http://gaussli.com/categories/tech/middleware/apollo/"},{"name":"JavaWeb","slug":"tech/javaweb","permalink":"http://gaussli.com/categories/tech/javaweb/"},{"name":"J2EE","slug":"tech/javaweb/j2ee","permalink":"http://gaussli.com/categories/tech/javaweb/j2ee/"},{"name":"Network","slug":"tech/network","permalink":"http://gaussli.com/categories/tech/network/"},{"name":"Mac","slug":"tech/mac","permalink":"http://gaussli.com/categories/tech/mac/"},{"name":"Maven","slug":"tech/maven","permalink":"http://gaussli.com/categories/tech/maven/"},{"name":"App","slug":"tech/app","permalink":"http://gaussli.com/categories/tech/app/"},{"name":"iOS","slug":"tech/app/ios","permalink":"http://gaussli.com/categories/tech/app/ios/"},{"name":"SpringBoot","slug":"tech/javaweb/springboot","permalink":"http://gaussli.com/categories/tech/javaweb/springboot/"},{"name":"Android","slug":"tech/app/android","permalink":"http://gaussli.com/categories/tech/app/android/"},{"name":"MySQL","slug":"tech/mysql","permalink":"http://gaussli.com/categories/tech/mysql/"},{"name":"VirtualBox","slug":"tech/virtualbox","permalink":"http://gaussli.com/categories/tech/virtualbox/"},{"name":"Travel","slug":"travel","permalink":"http://gaussli.com/categories/travel/"},{"name":"九寨沟","slug":"travel/九寨沟","permalink":"http://gaussli.com/categories/travel/%E4%B9%9D%E5%AF%A8%E6%B2%9F/"},{"name":"长沙","slug":"travel/长沙","permalink":"http://gaussli.com/categories/travel/%E9%95%BF%E6%B2%99/"}],"tags":[{"name":"Kubernetes","slug":"kubernetes","permalink":"http://gaussli.com/tags/kubernetes/"},{"name":"二进制","slug":"二进制","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"部署","slug":"部署","permalink":"http://gaussli.com/tags/%E9%83%A8%E7%BD%B2/"},{"name":"coredns","slug":"coredns","permalink":"http://gaussli.com/tags/coredns/"},{"name":"cni","slug":"cni","permalink":"http://gaussli.com/tags/cni/"},{"name":"网络插件","slug":"网络插件","permalink":"http://gaussli.com/tags/%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/"},{"name":"flannel","slug":"flannel","permalink":"http://gaussli.com/tags/flannel/"},{"name":"calico","slug":"calico","permalink":"http://gaussli.com/tags/calico/"},{"name":"kubelet","slug":"kubelet","permalink":"http://gaussli.com/tags/kubelet/"},{"name":"kube-proxy","slug":"kube-proxy","permalink":"http://gaussli.com/tags/kube-proxy/"},{"name":"kube-controller","slug":"kube-controller","permalink":"http://gaussli.com/tags/kube-controller/"},{"name":"kube-scheduler","slug":"kube-scheduler","permalink":"http://gaussli.com/tags/kube-scheduler/"},{"name":"HAProxy","slug":"haproxy","permalink":"http://gaussli.com/tags/haproxy/"},{"name":"Keepalived","slug":"keepalived","permalink":"http://gaussli.com/tags/keepalived/"},{"name":"kube-apiserver","slug":"kube-apiserver","permalink":"http://gaussli.com/tags/kube-apiserver/"},{"name":"高可用","slug":"高可用","permalink":"http://gaussli.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"},{"name":"etcd","slug":"etcd","permalink":"http://gaussli.com/tags/etcd/"},{"name":"数据库","slug":"数据库","permalink":"http://gaussli.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"ca证书","slug":"ca证书","permalink":"http://gaussli.com/tags/ca%E8%AF%81%E4%B9%A6/"},{"name":"openssl","slug":"openssl","permalink":"http://gaussli.com/tags/openssl/"},{"name":"x509","slug":"x509","permalink":"http://gaussli.com/tags/x509/"},{"name":"pem","slug":"pem","permalink":"http://gaussli.com/tags/pem/"},{"name":"der","slug":"der","permalink":"http://gaussli.com/tags/der/"},{"name":"crt","slug":"crt","permalink":"http://gaussli.com/tags/crt/"},{"name":"cer","slug":"cer","permalink":"http://gaussli.com/tags/cer/"},{"name":"内核","slug":"内核","permalink":"http://gaussli.com/tags/%E5%86%85%E6%A0%B8/"},{"name":"cpu","slug":"cpu","permalink":"http://gaussli.com/tags/cpu/"},{"name":"虚拟内存","slug":"虚拟内存","permalink":"http://gaussli.com/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"},{"name":"SELinux","slug":"selinux","permalink":"http://gaussli.com/tags/selinux/"},{"name":"firewall","slug":"firewall","permalink":"http://gaussli.com/tags/firewall/"},{"name":"时间","slug":"时间","permalink":"http://gaussli.com/tags/%E6%97%B6%E9%97%B4/"},{"name":"linux","slug":"linux","permalink":"http://gaussli.com/tags/linux/"},{"name":"localtime","slug":"localtime","permalink":"http://gaussli.com/tags/localtime/"},{"name":"脚本安装","slug":"脚本安装","permalink":"http://gaussli.com/tags/%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"},{"name":"Container","slug":"container","permalink":"http://gaussli.com/tags/container/"},{"name":"K3S","slug":"k3s","permalink":"http://gaussli.com/tags/k3s/"},{"name":"OpenEBS","slug":"openebs","permalink":"http://gaussli.com/tags/openebs/"},{"name":"数据迁移","slug":"数据迁移","permalink":"http://gaussli.com/tags/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"},{"name":"证书过期","slug":"证书过期","permalink":"http://gaussli.com/tags/%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F/"},{"name":"Node","slug":"node","permalink":"http://gaussli.com/tags/node/"},{"name":"优雅","slug":"优雅","permalink":"http://gaussli.com/tags/%E4%BC%98%E9%9B%85/"},{"name":"节点","slug":"节点","permalink":"http://gaussli.com/tags/%E8%8A%82%E7%82%B9/"},{"name":"Kubesphere","slug":"kubesphere","permalink":"http://gaussli.com/tags/kubesphere/"},{"name":"YAML","slug":"yaml","permalink":"http://gaussli.com/tags/yaml/"},{"name":"Kubeadm","slug":"kubeadm","permalink":"http://gaussli.com/tags/kubeadm/"},{"name":"Kubelet","slug":"kubelet","permalink":"http://gaussli.com/tags/kubelet/"},{"name":"Kubectl","slug":"kubectl","permalink":"http://gaussli.com/tags/kubectl/"},{"name":"YUM","slug":"yum","permalink":"http://gaussli.com/tags/yum/"},{"name":"Docker","slug":"docker","permalink":"http://gaussli.com/tags/docker/"},{"name":"Seata","slug":"seata","permalink":"http://gaussli.com/tags/seata/"},{"name":"Zipkin","slug":"zipkin","permalink":"http://gaussli.com/tags/zipkin/"},{"name":"二进制安装","slug":"二进制安装","permalink":"http://gaussli.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85/"},{"name":"Showdoc","slug":"showdoc","permalink":"http://gaussli.com/tags/showdoc/"},{"name":"源码安装","slug":"源码安装","permalink":"http://gaussli.com/tags/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/"},{"name":"Redis","slug":"redis","permalink":"http://gaussli.com/tags/redis/"},{"name":"xxl-job","slug":"xxl-job","permalink":"http://gaussli.com/tags/xxl-job/"},{"name":"任务调度","slug":"任务调度","permalink":"http://gaussli.com/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"},{"name":"分布式","slug":"分布式","permalink":"http://gaussli.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"Apollo","slug":"apollo","permalink":"http://gaussli.com/tags/apollo/"},{"name":"Linux","slug":"linux","permalink":"http://gaussli.com/tags/linux/"},{"name":"代理源","slug":"代理源","permalink":"http://gaussli.com/tags/%E4%BB%A3%E7%90%86%E6%BA%90/"},{"name":"SpringMVC","slug":"springmvc","permalink":"http://gaussli.com/tags/springmvc/"},{"name":"xml","slug":"xml","permalink":"http://gaussli.com/tags/xml/"},{"name":"Spring","slug":"spring","permalink":"http://gaussli.com/tags/spring/"},{"name":"Bean","slug":"bean","permalink":"http://gaussli.com/tags/bean/"},{"name":"生命周期","slug":"生命周期","permalink":"http://gaussli.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"},{"name":"life cycle","slug":"life-cycle","permalink":"http://gaussli.com/tags/life-cycle/"},{"name":"String Framework","slug":"string-framework","permalink":"http://gaussli.com/tags/string-framework/"},{"name":"框架","slug":"框架","permalink":"http://gaussli.com/tags/%E6%A1%86%E6%9E%B6/"},{"name":"jsp","slug":"jsp","permalink":"http://gaussli.com/tags/jsp/"},{"name":"内置对象","slug":"内置对象","permalink":"http://gaussli.com/tags/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"},{"name":"动作元素","slug":"动作元素","permalink":"http://gaussli.com/tags/%E5%8A%A8%E4%BD%9C%E5%85%83%E7%B4%A0/"},{"name":"web","slug":"web","permalink":"http://gaussli.com/tags/web/"},{"name":"response","slug":"response","permalink":"http://gaussli.com/tags/response/"},{"name":"响应","slug":"响应","permalink":"http://gaussli.com/tags/%E5%93%8D%E5%BA%94/"},{"name":"状态行","slug":"状态行","permalink":"http://gaussli.com/tags/%E7%8A%B6%E6%80%81%E8%A1%8C/"},{"name":"gitlab","slug":"gitlab","permalink":"http://gaussli.com/tags/gitlab/"},{"name":"代码库","slug":"代码库","permalink":"http://gaussli.com/tags/%E4%BB%A3%E7%A0%81%E5%BA%93/"},{"name":"备份","slug":"备份","permalink":"http://gaussli.com/tags/%E5%A4%87%E4%BB%BD/"},{"name":"迁移","slug":"迁移","permalink":"http://gaussli.com/tags/%E8%BF%81%E7%A7%BB/"},{"name":"DNS","slug":"dns","permalink":"http://gaussli.com/tags/dns/"},{"name":"缓存","slug":"缓存","permalink":"http://gaussli.com/tags/%E7%BC%93%E5%AD%98/"},{"name":"cocoapods","slug":"cocoapods","permalink":"http://gaussli.com/tags/cocoapods/"},{"name":"error","slug":"error","permalink":"http://gaussli.com/tags/error/"},{"name":"错误","slug":"错误","permalink":"http://gaussli.com/tags/%E9%94%99%E8%AF%AF/"},{"name":"Maven","slug":"maven","permalink":"http://gaussli.com/tags/maven/"},{"name":"plugins","slug":"plugins","permalink":"http://gaussli.com/tags/plugins/"},{"name":"pom","slug":"pom","permalink":"http://gaussli.com/tags/pom/"},{"name":"IP","slug":"ip","permalink":"http://gaussli.com/tags/ip/"},{"name":"elrepo","slug":"elrepo","permalink":"http://gaussli.com/tags/elrepo/"},{"name":"yum","slug":"yum","permalink":"http://gaussli.com/tags/yum/"},{"name":"CentOS","slug":"centos","permalink":"http://gaussli.com/tags/centos/"},{"name":"时区","slug":"时区","permalink":"http://gaussli.com/tags/%E6%97%B6%E5%8C%BA/"},{"name":"ssh","slug":"ssh","permalink":"http://gaussli.com/tags/ssh/"},{"name":"ss","slug":"ss","permalink":"http://gaussli.com/tags/ss/"},{"name":"python","slug":"python","permalink":"http://gaussli.com/tags/python/"},{"name":"Kernel","slug":"kernel","permalink":"http://gaussli.com/tags/kernel/"},{"name":"更新内核","slug":"更新内核","permalink":"http://gaussli.com/tags/%E6%9B%B4%E6%96%B0%E5%86%85%E6%A0%B8/"},{"name":"grub2","slug":"grub2","permalink":"http://gaussli.com/tags/grub2/"},{"name":"加密","slug":"加密","permalink":"http://gaussli.com/tags/%E5%8A%A0%E5%AF%86/"},{"name":"解密","slug":"解密","permalink":"http://gaussli.com/tags/%E8%A7%A3%E5%AF%86/"},{"name":"编码","slug":"编码","permalink":"http://gaussli.com/tags/%E7%BC%96%E7%A0%81/"},{"name":"解码","slug":"解码","permalink":"http://gaussli.com/tags/%E8%A7%A3%E7%A0%81/"},{"name":"Java","slug":"java","permalink":"http://gaussli.com/tags/java/"},{"name":"cocoapod","slug":"cocoapod","permalink":"http://gaussli.com/tags/cocoapod/"},{"name":"pod","slug":"pod","permalink":"http://gaussli.com/tags/pod/"},{"name":"libwebp","slug":"libwebp","permalink":"http://gaussli.com/tags/libwebp/"},{"name":"Gitlab","slug":"gitlab","permalink":"http://gaussli.com/tags/gitlab/"},{"name":"Git","slug":"git","permalink":"http://gaussli.com/tags/git/"},{"name":"代码","slug":"代码","permalink":"http://gaussli.com/tags/%E4%BB%A3%E7%A0%81/"},{"name":"软件安装","slug":"软件安装","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"vsftpd","slug":"vsftpd","permalink":"http://gaussli.com/tags/vsftpd/"},{"name":"SpringBoot","slug":"springboot","permalink":"http://gaussli.com/tags/springboot/"},{"name":"基础","slug":"基础","permalink":"http://gaussli.com/tags/%E5%9F%BA%E7%A1%80/"},{"name":"brew","slug":"brew","permalink":"http://gaussli.com/tags/brew/"},{"name":"brew-cask","slug":"brew-cask","permalink":"http://gaussli.com/tags/brew-cask/"},{"name":"jar","slug":"jar","permalink":"http://gaussli.com/tags/jar/"},{"name":"log4j","slug":"log4j","permalink":"http://gaussli.com/tags/log4j/"},{"name":"logger","slug":"logger","permalink":"http://gaussli.com/tags/logger/"},{"name":"配置文件","slug":"配置文件","permalink":"http://gaussli.com/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"},{"name":"加载","slug":"加载","permalink":"http://gaussli.com/tags/%E5%8A%A0%E8%BD%BD/"},{"name":"ProvisioningProfiles","slug":"provisioningprofiles","permalink":"http://gaussli.com/tags/provisioningprofiles/"},{"name":"Druid","slug":"druid","permalink":"http://gaussli.com/tags/druid/"},{"name":"密码","slug":"密码","permalink":"http://gaussli.com/tags/%E5%AF%86%E7%A0%81/"},{"name":"MySQL","slug":"mysql","permalink":"http://gaussli.com/tags/mysql/"},{"name":"useradd","slug":"useradd","permalink":"http://gaussli.com/tags/useradd/"},{"name":"groupadd","slug":"groupadd","permalink":"http://gaussli.com/tags/groupadd/"},{"name":"用户","slug":"用户","permalink":"http://gaussli.com/tags/%E7%94%A8%E6%88%B7/"},{"name":"nologin","slug":"nologin","permalink":"http://gaussli.com/tags/nologin/"},{"name":"硬盘","slug":"硬盘","permalink":"http://gaussli.com/tags/%E7%A1%AC%E7%9B%98/"},{"name":"挂载","slug":"挂载","permalink":"http://gaussli.com/tags/%E6%8C%82%E8%BD%BD/"},{"name":"fdisk","slug":"fdisk","permalink":"http://gaussli.com/tags/fdisk/"},{"name":"mount","slug":"mount","permalink":"http://gaussli.com/tags/mount/"},{"name":"继承","slug":"继承","permalink":"http://gaussli.com/tags/%E7%BB%A7%E6%89%BF/"},{"name":"apk","slug":"apk","permalink":"http://gaussli.com/tags/apk/"},{"name":"重签名","slug":"重签名","permalink":"http://gaussli.com/tags/%E9%87%8D%E7%AD%BE%E5%90%8D/"},{"name":"Tomcat","slug":"tomcat","permalink":"http://gaussli.com/tags/tomcat/"},{"name":"跨域","slug":"跨域","permalink":"http://gaussli.com/tags/%E8%B7%A8%E5%9F%9F/"},{"name":"Subview","slug":"subview","permalink":"http://gaussli.com/tags/subview/"},{"name":"UIButton","slug":"uibutton","permalink":"http://gaussli.com/tags/uibutton/"},{"name":"UIControl","slug":"uicontrol","permalink":"http://gaussli.com/tags/uicontrol/"},{"name":"免密码","slug":"免密码","permalink":"http://gaussli.com/tags/%E5%85%8D%E5%AF%86%E7%A0%81/"},{"name":"登录","slug":"登录","permalink":"http://gaussli.com/tags/%E7%99%BB%E5%BD%95/"},{"name":"禁止密码","slug":"禁止密码","permalink":"http://gaussli.com/tags/%E7%A6%81%E6%AD%A2%E5%AF%86%E7%A0%81/"},{"name":"hostname","slug":"hostname","permalink":"http://gaussli.com/tags/hostname/"},{"name":"命令行","slug":"命令行","permalink":"http://gaussli.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"},{"name":"Windows","slug":"windows","permalink":"http://gaussli.com/tags/windows/"},{"name":"Mac","slug":"mac","permalink":"http://gaussli.com/tags/mac/"},{"name":"Eclipse","slug":"eclipse","permalink":"http://gaussli.com/tags/eclipse/"},{"name":"软件更新","slug":"软件更新","permalink":"http://gaussli.com/tags/%E8%BD%AF%E4%BB%B6%E6%9B%B4%E6%96%B0/"},{"name":"命令","slug":"命令","permalink":"http://gaussli.com/tags/%E5%91%BD%E4%BB%A4/"},{"name":"别名","slug":"别名","permalink":"http://gaussli.com/tags/%E5%88%AB%E5%90%8D/"},{"name":"PCH","slug":"pch","permalink":"http://gaussli.com/tags/pch/"},{"name":"初始化","slug":"初始化","permalink":"http://gaussli.com/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"},{"name":"状态栏","slug":"状态栏","permalink":"http://gaussli.com/tags/%E7%8A%B6%E6%80%81%E6%A0%8F/"},{"name":"颜色","slug":"颜色","permalink":"http://gaussli.com/tags/%E9%A2%9C%E8%89%B2/"},{"name":"垃圾","slug":"垃圾","permalink":"http://gaussli.com/tags/%E5%9E%83%E5%9C%BE/"},{"name":"Trash","slug":"trash","permalink":"http://gaussli.com/tags/trash/"},{"name":"系统清理","slug":"系统清理","permalink":"http://gaussli.com/tags/%E7%B3%BB%E7%BB%9F%E6%B8%85%E7%90%86/"},{"name":"文件","slug":"文件","permalink":"http://gaussli.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"同步","slug":"同步","permalink":"http://gaussli.com/tags/%E5%90%8C%E6%AD%A5/"},{"name":"rsync","slug":"rsync","permalink":"http://gaussli.com/tags/rsync/"},{"name":"lsyncd","slug":"lsyncd","permalink":"http://gaussli.com/tags/lsyncd/"},{"name":"用户行为","slug":"用户行为","permalink":"http://gaussli.com/tags/%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA/"},{"name":"无埋点","slug":"无埋点","permalink":"http://gaussli.com/tags/%E6%97%A0%E5%9F%8B%E7%82%B9/"},{"name":"hook","slug":"hook","permalink":"http://gaussli.com/tags/hook/"},{"name":"swizzling","slug":"swizzling","permalink":"http://gaussli.com/tags/swizzling/"},{"name":"zip压缩","slug":"zip压缩","permalink":"http://gaussli.com/tags/zip%E5%8E%8B%E7%BC%A9/"},{"name":"SSZipArchive","slug":"ssziparchive","permalink":"http://gaussli.com/tags/ssziparchive/"},{"name":"AFNetworking","slug":"afnetworking","permalink":"http://gaussli.com/tags/afnetworking/"},{"name":"文件系统","slug":"文件系统","permalink":"http://gaussli.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"name":"目录","slug":"目录","permalink":"http://gaussli.com/tags/%E7%9B%AE%E5%BD%95/"},{"name":"网络","slug":"网络","permalink":"http://gaussli.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"Network","slug":"network","permalink":"http://gaussli.com/tags/network/"},{"name":"克隆","slug":"克隆","permalink":"http://gaussli.com/tags/%E5%85%8B%E9%9A%86/"},{"name":"主从","slug":"主从","permalink":"http://gaussli.com/tags/%E4%B8%BB%E4%BB%8E/"},{"name":"复制","slug":"复制","permalink":"http://gaussli.com/tags/%E5%A4%8D%E5%88%B6/"},{"name":"Nginx","slug":"nginx","permalink":"http://gaussli.com/tags/nginx/"},{"name":"九寨沟","slug":"九寨沟","permalink":"http://gaussli.com/tags/%E4%B9%9D%E5%AF%A8%E6%B2%9F/"},{"name":"成都","slug":"成都","permalink":"http://gaussli.com/tags/%E6%88%90%E9%83%BD/"},{"name":"打包","slug":"打包","permalink":"http://gaussli.com/tags/%E6%89%93%E5%8C%85/"},{"name":"分发","slug":"分发","permalink":"http://gaussli.com/tags/%E5%88%86%E5%8F%91/"},{"name":"测试","slug":"测试","permalink":"http://gaussli.com/tags/%E6%B5%8B%E8%AF%95/"},{"name":"翻译","slug":"翻译","permalink":"http://gaussli.com/tags/%E7%BF%BB%E8%AF%91/"},{"name":"NSAttributedString","slug":"nsattributedstring","permalink":"http://gaussli.com/tags/nsattributedstring/"},{"name":"长沙","slug":"长沙","permalink":"http://gaussli.com/tags/%E9%95%BF%E6%B2%99/"},{"name":"Welcome","slug":"welcome","permalink":"http://gaussli.com/tags/welcome/"}]}